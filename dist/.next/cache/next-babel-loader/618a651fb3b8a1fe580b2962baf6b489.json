{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { gettingPerformerGalleries, getPerformerGalleriesSuccess, getPerformerGalleriesFail, addPerformerGalleries, purchaseGallerySuccess } from './actions';\nconst initialGalleiresState = {\n  error: null,\n  data: {},\n  ids: [],\n  total: 0,\n  success: false,\n  searching: false\n};\nconst galleryReducers = [{\n  on: gettingPerformerGalleries,\n\n  reducer() {\n    return _objectSpread(_objectSpread({}, initialGalleiresState), {}, {\n      searching: true\n    });\n  }\n\n}, {\n  on: getPerformerGalleriesSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread(_objectSpread({}, state), action.payload), {}, {\n      error: null,\n      success: true,\n      searching: false\n    });\n  }\n\n}, {\n  on: getPerformerGalleriesFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      error: action.payload,\n      success: false,\n      searching: false\n    });\n  }\n\n}, {\n  on: addPerformerGalleries,\n\n  reducer(state, action) {\n    const {\n      ids,\n      data\n    } = state;\n    const galleries = action.payload;\n    galleries.forEach(g => {\n      data[g._id] = g;\n      ids.push(g._id);\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: purchaseGallerySuccess,\n\n  reducer(state, action) {\n    const {\n      data\n    } = state;\n    data[action.payload].isBought = true;\n    return _objectSpread({}, state);\n  }\n\n}];\nexport default merge({}, createReducers('galleries', [galleryReducers], initialGalleiresState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/galleries/reducers.ts"],"names":["createReducers","merge","gettingPerformerGalleries","getPerformerGalleriesSuccess","getPerformerGalleriesFail","addPerformerGalleries","purchaseGallerySuccess","initialGalleiresState","error","data","ids","total","success","searching","galleryReducers","on","reducer","state","action","payload","galleries","forEach","g","_id","push","isBought"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,YAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,SACEC,yBADF,EAEEC,4BAFF,EAGEC,yBAHF,EAIEC,qBAJF,EAKEC,sBALF,QAMO,WANP;AAQA,MAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,KAAK,EAAE,IADqB;AAE5BC,EAAAA,IAAI,EAAE,EAFsB;AAG5BC,EAAAA,GAAG,EAAE,EAHuB;AAI5BC,EAAAA,KAAK,EAAE,CAJqB;AAK5BC,EAAAA,OAAO,EAAE,KALmB;AAM5BC,EAAAA,SAAS,EAAE;AANiB,CAA9B;AAQA,MAAMC,eAAe,GAAG,CACtB;AACEC,EAAAA,EAAE,EAAEb,yBADN;;AAEEc,EAAAA,OAAO,GAAG;AACR,2CACKT,qBADL;AAEEM,MAAAA,SAAS,EAAE;AAFb;AAID;;AAPH,CADsB,EAUtB;AACEE,EAAAA,EAAE,EAAEZ,4BADN;;AAEEa,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAgE;AACrE,yDACKD,KADL,GAEKC,MAAM,CAACC,OAFZ;AAGEX,MAAAA,KAAK,EAAE,IAHT;AAIEI,MAAAA,OAAO,EAAE,IAJX;AAKEC,MAAAA,SAAS,EAAE;AALb;AAOD;;AAVH,CAVsB,EAsBtB;AACEE,EAAAA,EAAE,EAAEX,yBADN;;AAEEY,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAkD;AACvD,2CACKD,KADL;AAEET,MAAAA,KAAK,EAAEU,MAAM,CAACC,OAFhB;AAGEP,MAAAA,OAAO,EAAE,KAHX;AAIEC,MAAAA,SAAS,EAAE;AAJb;AAMD;;AATH,CAtBsB,EAiCtB;AACEE,EAAAA,EAAE,EAAEV,qBADN;;AAEEW,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAmD;AACxD,UAAM;AAAER,MAAAA,GAAF;AAAOD,MAAAA;AAAP,QAAgBQ,KAAtB;AACA,UAAMG,SAAS,GAAGF,MAAM,CAACC,OAAzB;AACAC,IAAAA,SAAS,CAACC,OAAV,CAAmBC,CAAD,IAAO;AACvBb,MAAAA,IAAI,CAACa,CAAC,CAACC,GAAH,CAAJ,GAAcD,CAAd;AACAZ,MAAAA,GAAG,CAACc,IAAJ,CAASF,CAAC,CAACC,GAAX;AACD,KAHD;AAIA,6BACKN,KADL;AAGD;;AAZH,CAjCsB,EA+CtB;AACEF,EAAAA,EAAE,EAAET,sBADN;;AAEEU,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAsC;AAC3C,UAAM;AAAET,MAAAA;AAAF,QAAWQ,KAAjB;AACAR,IAAAA,IAAI,CAACS,MAAM,CAACC,OAAR,CAAJ,CAAqBM,QAArB,GAAgC,IAAhC;AACA,6BAAYR,KAAZ;AACD;;AANH,CA/CsB,CAAxB;AAwDA,eAAehB,KAAK,CAClB,EADkB,EAElBD,cAAc,CAAC,WAAD,EAAc,CAACc,eAAD,CAAd,EAAiCP,qBAAjC,CAFI,CAApB","sourcesContent":["import { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { IReduxAction, IDataResponse, IPerformerGallery } from 'src/interfaces';\nimport {\n  gettingPerformerGalleries,\n  getPerformerGalleriesSuccess,\n  getPerformerGalleriesFail,\n  addPerformerGalleries,\n  purchaseGallerySuccess\n} from './actions';\n\nconst initialGalleiresState = {\n  error: null,\n  data: {},\n  ids: [],\n  total: 0,\n  success: false,\n  searching: false\n};\nconst galleryReducers = [\n  {\n    on: gettingPerformerGalleries,\n    reducer() {\n      return {\n        ...initialGalleiresState,\n        searching: true\n      };\n    }\n  },\n  {\n    on: getPerformerGalleriesSuccess,\n    reducer(state, action: IReduxAction<IDataResponse<IPerformerGallery>>) {\n      return {\n        ...state,\n        ...action.payload,\n        error: null,\n        success: true,\n        searching: false\n      };\n    }\n  },\n  {\n    on: getPerformerGalleriesFail,\n    reducer(state, action: IReduxAction<IDataResponse<any>>) {\n      return {\n        ...state,\n        error: action.payload,\n        success: false,\n        searching: false\n      };\n    }\n  },\n  {\n    on: addPerformerGalleries,\n    reducer(state, action: IReduxAction<IPerformerGallery[]>) {\n      const { ids, data } = state;\n      const galleries = action.payload;\n      galleries.forEach((g) => {\n        data[g._id] = g;\n        ids.push(g._id);\n      });\n      return {\n        ...state\n      };\n    }\n  },\n  {\n    on: purchaseGallerySuccess,\n    reducer(state, action: IReduxAction<string>) {\n      const { data } = state;\n      data[action.payload].isBought = true;\n      return { ...state };\n    }\n  }\n];\nexport default merge(\n  {},\n  createReducers('galleries', [galleryReducers], initialGalleiresState)\n);\n"]},"metadata":{},"sourceType":"module"}