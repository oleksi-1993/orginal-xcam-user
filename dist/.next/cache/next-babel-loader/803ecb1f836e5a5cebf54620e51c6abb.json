{"ast":null,"code":"var _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\pages\\\\index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { PureComponent } from 'react';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { connect } from 'react-redux';\nimport { searchPerformer, updatePerformerFavourite, updateCurrentPerformer } from '@redux/performer/actions';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateCurrentStudio } from '@redux/studio/actions';\nimport PerformerFilter from '@components/user/performer-filter';\nimport { favouriteService } from 'src/services';\nimport { message } from 'antd';\nimport { getResponseError } from 'src/lib';\nimport { withRouter } from 'next/router';\nimport { SocketContext } from 'src/socket';\nimport Head from 'next/head';\nconst initQueryState = {\n  offset: 0,\n  limit: 60,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc'\n};\n\nclass Homepage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"socket\", void 0);\n\n    _defineProperty(this, \"search\", () => {\n      const {\n        router,\n        searchPerformer: dispatchSearchPerformer\n      } = this.props;\n      const {\n        query\n      } = this.state;\n      dispatchSearchPerformer(_objectSpread(_objectSpread({}, query), router.query));\n    });\n\n    this.state = {\n      query: initQueryState\n    };\n  }\n\n  componentDidMount() {\n    this.search();\n    this.socket = this.context;\n    this.socket.on('modelUpdateStatus', this.search);\n    this.socket.on('modelUpdateStreamingStatus', this.search);\n  }\n\n  componentDidUpdate(prevProps, prevStates) {\n    const {\n      router,\n      loggedIn\n    } = this.props;\n    const {\n      query\n    } = this.state;\n\n    if (router.query.q !== prevProps.router.query.q || query !== prevStates.query) {\n      this.search();\n    }\n\n    if (!loggedIn && loggedIn !== prevProps.loggedIn) {\n      this.search();\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket = this.context;\n\n    if (this.socket) {\n      this.socket.off('modelUpdateStatus');\n      this.socket.off('modelUpdateStreamingStatus');\n    }\n  }\n\n  async onLike(performer) {\n    const {\n      updatePerformerFavourite: dispatchUpdatePerformerFavorite\n    } = this.props;\n    const {\n      _id,\n      isFavorite\n    } = performer;\n\n    try {\n      await favouriteService.favorite(_id, isFavorite);\n      dispatchUpdatePerformerFavorite(_id);\n    } catch (error) {\n      const e = await Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  setFilter(name, value) {\n    const {\n      query\n    } = this.state;\n    this.setState({\n      query: _objectSpread(_objectSpread({}, query), {}, {\n        [name]: value\n      })\n    });\n  }\n\n  clearFilter() {\n    this.setState({\n      query: initQueryState\n    });\n  }\n\n  render() {\n    const {\n      categories,\n      countries,\n      ui,\n      settings\n    } = this.props;\n    const {\n      query\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }, ui === null || ui === void 0 ? void 0 : ui.siteName), __jsx(\"meta\", {\n      name: \"keywords\",\n      content: settings === null || settings === void 0 ? void 0 : settings.metaKeywords,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      name: \"description\",\n      content: settings === null || settings === void 0 ? void 0 : settings.metaDescription,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:title\",\n      content: settings === null || settings === void 0 ? void 0 : settings.siteName,\n      key: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:image\",\n      content: settings === null || settings === void 0 ? void 0 : settings.logoUrl,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:keywords\",\n      content: settings === null || settings === void 0 ? void 0 : settings.metaKeywords,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }), __jsx(\"meta\", {\n      property: \"og:description\",\n      content: settings === null || settings === void 0 ? void 0 : settings.metaDescription,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }\n    })), __jsx(\"div\", {\n      className: \"homepage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }\n    }, __jsx(PerformerFilter, _extends({\n      countries: countries,\n      categories: categories,\n      setFilter: this.setFilter.bind(this),\n      clearFilter: this.clearFilter.bind(this)\n    }, query, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    })), __jsx(PerformerGrid, _extends({}, this.props, {\n      onLike: this.onLike.bind(this),\n      title: \"Live cams\",\n      isPage: true,\n      setFilter: this.setFilter.bind(this)\n    }, query, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }))));\n  }\n\n}\n\nHomepage.contextType = SocketContext;\n\nconst mapStateToProps = state => _objectSpread(_objectSpread({\n  ui: _objectSpread({}, state.ui)\n}, state.performer.performers), {}, {\n  countries: state.settings.countries,\n  loggedIn: state.auth.loggedIn,\n  categories: state.performer.categories.data,\n  settings: state.settings\n});\n\nconst mapDispatch = {\n  searchPerformer,\n  updatePerformerFavourite,\n  updateCurrentUser,\n  updateCurrentPerformer,\n  updateCurrentStudio,\n  loginSuccess\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(Homepage));","map":{"version":3,"sources":["E:/programData/React/user/pages/index.tsx"],"names":["PureComponent","PerformerGrid","connect","searchPerformer","updatePerformerFavourite","updateCurrentPerformer","loginSuccess","updateCurrentUser","updateCurrentStudio","PerformerFilter","favouriteService","message","getResponseError","withRouter","SocketContext","Head","initQueryState","offset","limit","gender","category","country","sortBy","sort","Homepage","constructor","props","router","dispatchSearchPerformer","query","state","componentDidMount","search","socket","context","on","componentDidUpdate","prevProps","prevStates","loggedIn","q","componentWillUnmount","off","onLike","performer","dispatchUpdatePerformerFavorite","_id","isFavorite","favorite","error","e","Promise","resolve","setFilter","name","value","setState","clearFilter","render","categories","countries","ui","settings","siteName","metaKeywords","metaDescription","logoUrl","bind","contextType","mapStateToProps","performers","auth","data","mapDispatch"],"mappings":"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","sourcesContent":["import { PureComponent } from 'react';\nimport {\n  IPerformer,\n  ICountries,\n  IPerformerCategogies,\n  IPerformSearch,\n  IUIConfig\n} from 'src/interfaces';\nimport PerformerGrid from '@components/performer/performer-grid';\nimport { connect } from 'react-redux';\nimport {\n  searchPerformer,\n  updatePerformerFavourite,\n  updateCurrentPerformer\n} from '@redux/performer/actions';\nimport { loginSuccess } from '@redux/auth/actions';\nimport { updateCurrentUser } from '@redux/user/actions';\nimport { updateCurrentStudio } from '@redux/studio/actions';\nimport PerformerFilter from '@components/user/performer-filter';\nimport { favouriteService } from 'src/services';\nimport { message } from 'antd';\nimport { getResponseError } from 'src/lib';\nimport { withRouter, NextRouter } from 'next/router';\nimport { SocketContext } from 'src/socket';\nimport Head from 'next/head';\n\ninterface IProps {\n  router: NextRouter;\n  ui: IUIConfig;\n  data: IPerformer[];\n  searchPerformer?: Function;\n  total?: number;\n  success?: boolean;\n  error?: any;\n  settings?: any;\n  searching?: boolean;\n  loggedIn?: boolean;\n  query?: {\n    q: string;\n  };\n  categories?: IPerformerCategogies[];\n  countries?: ICountries[];\n  updatePerformerFavourite: Function;\n  updateCurrentUser: Function;\n  updateCurrentPerformer: Function;\n  updateCurrentStudio: Function;\n  loginSuccess: Function;\n}\n\ninterface IStates {\n  query: IPerformSearch;\n  sort?: {\n    name: string;\n    sortBy?: string;\n  };\n}\n\nconst initQueryState: IPerformSearch = {\n  offset: 0,\n  limit: 60,\n  gender: '',\n  category: '',\n  country: '',\n  sortBy: '',\n  sort: 'desc'\n};\n\nclass Homepage extends PureComponent<IProps, IStates> {\n  private socket;\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      query: initQueryState\n    };\n  }\n\n  componentDidMount() {\n    this.search();\n    this.socket = this.context;\n    this.socket.on('modelUpdateStatus', this.search);\n    this.socket.on('modelUpdateStreamingStatus', this.search);\n  }\n\n  componentDidUpdate(prevProps: IProps, prevStates: IStates) {\n    const { router, loggedIn } = this.props;\n    const { query } = this.state;\n    if (\n      router.query.q !== prevProps.router.query.q\n      || query !== prevStates.query\n    ) {\n      this.search();\n    }\n    if (!loggedIn && loggedIn !== prevProps.loggedIn) {\n      this.search();\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket = this.context;\n    if (this.socket) {\n      this.socket.off('modelUpdateStatus');\n      this.socket.off('modelUpdateStreamingStatus');\n    }\n  }\n\n  async onLike(performer: IPerformer) {\n    const {\n      updatePerformerFavourite: dispatchUpdatePerformerFavorite\n    } = this.props;\n    const { _id, isFavorite } = performer;\n    try {\n      await favouriteService.favorite(_id, isFavorite);\n      dispatchUpdatePerformerFavorite(_id);\n    } catch (error) {\n      const e = await Promise.resolve(error);\n      message.error(getResponseError(e));\n    }\n  }\n\n  setFilter(name: string, value: any) {\n    const { query } = this.state;\n    this.setState({\n      query: {\n        ...query,\n        [name]: value\n      }\n    });\n  }\n\n  search = () => {\n    const { router, searchPerformer: dispatchSearchPerformer } = this.props;\n    const { query } = this.state;\n    dispatchSearchPerformer({\n      ...query,\n      ...router.query\n    });\n  };\n\n  clearFilter() {\n    this.setState({\n      query: initQueryState\n    });\n  }\n\n  render() {\n    const {\n      categories, countries, ui, settings\n    } = this.props;\n    const { query } = this.state;\n\n    return (\n      <>\n        <Head>\n          <title>{ui?.siteName}</title>\n          <meta name=\"keywords\" content={settings?.metaKeywords} />\n          <meta\n            name=\"description\"\n            content={settings?.metaDescription}\n          />\n          {/* OG tags */}\n          <meta\n            property=\"og:title\"\n            content={settings?.siteName}\n            key=\"title\"\n          />\n          <meta property=\"og:image\" content={settings?.logoUrl} />\n          <meta\n            property=\"og:keywords\"\n            content={settings?.metaKeywords}\n          />\n          <meta\n            property=\"og:description\"\n            content={settings?.metaDescription}\n          />\n        </Head>\n        <div className=\"homepage\">\n          <PerformerFilter\n            countries={countries}\n            categories={categories}\n            setFilter={this.setFilter.bind(this)}\n            clearFilter={this.clearFilter.bind(this)}\n            {...query}\n          />\n          <PerformerGrid\n            {...this.props}\n            onLike={this.onLike.bind(this)}\n            title=\"Live cams\"\n            isPage\n            setFilter={this.setFilter.bind(this)}\n            {...query}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\nHomepage.contextType = SocketContext;\n\nconst mapStateToProps = (state) => ({\n  ui: { ...state.ui },\n  ...state.performer.performers,\n  countries: state.settings.countries,\n  loggedIn: state.auth.loggedIn,\n  categories: state.performer.categories.data,\n  settings: state.settings\n});\nconst mapDispatch = {\n  searchPerformer,\n  updatePerformerFavourite,\n  updateCurrentUser,\n  updateCurrentPerformer,\n  updateCurrentStudio,\n  loginSuccess\n};\nexport default connect(mapStateToProps, mapDispatch)(withRouter(Homepage));\n"]},"metadata":{},"sourceType":"module"}