{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar INTERNET_CHECK_URL = 'https://google.com';\nexport var isHasInternetConnection = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var res;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return fetch(INTERNET_CHECK_URL, {\n              headers: {\n                'Cache-Control': 'no-cache, no-store, must-revalidate',\n                Pragma: 'no-cache',\n                Expires: 0\n              }\n            });\n\n          case 3:\n            res = _context.sent;\n\n            if (!(res.status === 404 || res.status === 401 || res.status === 403 || res.status === 500 || res.status >= 200 && res.status <= 300)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\", true);\n\n          case 6:\n            _context.next = 11;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            // eslint-disable-next-line no-console\n            console.log(_context.t0);\n\n          case 11:\n            return _context.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  }));\n\n  return function isHasInternetConnection() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["E:/programData/React/user/src/lib/internet.ts"],"names":["INTERNET_CHECK_URL","isHasInternetConnection","fetch","headers","Pragma","Expires","res","status","console","log"],"mappings":";;AAAA,IAAMA,kBAAkB,GAAG,oBAA3B;AAEA,OAAO,IAAMC,uBAAuB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEjBC,KAAK,CAACF,kBAAD,EAAqB;AAC1CG,cAAAA,OAAO,EAAE;AACP,iCAAiB,qCADV;AAEPC,gBAAAA,MAAM,EAAE,UAFD;AAGPC,gBAAAA,OAAO,EAAE;AAHF;AADiC,aAArB,CAFY;;AAAA;AAE7BC,YAAAA,GAF6B;;AAAA,kBAUjCA,GAAG,CAACC,MAAJ,KAAe,GAAf,IACGD,GAAG,CAACC,MAAJ,KAAe,GADlB,IAEGD,GAAG,CAACC,MAAJ,KAAe,GAFlB,IAGGD,GAAG,CAACC,MAAJ,KAAe,GAHlB,IAIID,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACC,MAAJ,IAAc,GAdN;AAAA;AAAA;AAAA;;AAAA,6CAgB1B,IAhB0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmBnC;AACAC,YAAAA,OAAO,CAACC,GAAR;;AApBmC;AAAA,6CAsB9B,KAtB8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBR,uBAAuB;AAAA;AAAA;AAAA,GAA7B","sourcesContent":["const INTERNET_CHECK_URL = 'https://google.com';\n\nexport const isHasInternetConnection = async (): Promise<boolean> => {\n  try {\n    const res = await fetch(INTERNET_CHECK_URL, {\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        Pragma: 'no-cache',\n        Expires: 0\n      } as any\n    });\n    if (\n      res.status === 404\n      || res.status === 401\n      || res.status === 403\n      || res.status === 500\n      || (res.status >= 200 && res.status <= 300)\n    ) {\n      return true;\n    }\n  } catch (exception) {\n    // eslint-disable-next-line no-console\n    console.log(exception);\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}