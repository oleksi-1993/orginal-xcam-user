{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { settingService } from 'src/services';\nimport { flatten } from 'lodash';\nimport { getCountries, updateSettings } from './actions';\nvar settingSagas = [{\n  on: getCountries,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    var countries, resp;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return select(function (state) {\n              return state.settings.countries;\n            });\n\n          case 3:\n            countries = _context.sent;\n\n            if (!(countries && countries.length)) {\n              _context.next = 6;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return settingService.getCountries();\n\n          case 8:\n            resp = _context.sent;\n            _context.next = 11;\n            return put(updateSettings({\n              countries: resp.data\n            }));\n\n          case 11:\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            // eslint-disable-next-line no-console\n            console.log(_context.t0);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 13]]);\n  })\n}];\nexport default flatten([createSagas(settingSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/settings/sagas.ts"],"names":["put","select","createSagas","settingService","flatten","getCountries","updateSettings","settingSagas","on","worker","state","settings","countries","length","resp","data","console","log"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,QAA4B,oBAA5B;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,WAA7C;AAEA,IAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAEH,YADN;AAEII,EAAAA,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIwB,mBAAMR,MAAM,CAAC,UAACS,KAAD;AAAA,qBAAWA,KAAK,CAACC,QAAN,CAAeC,SAA1B;AAAA,aAAD,CAAZ;;AAJxB;AAIYA,YAAAA,SAJZ;;AAAA,kBAKUA,SAAS,IAAIA,SAAS,CAACC,MALjC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAMmC,mBAAMV,cAAc,CAACE,YAAf,EAAN;;AANnC;AAMYS,YAAAA,IANZ;AAAA;AAOM,mBAAMd,GAAG,CAACM,cAAc,CAAC;AAAEM,cAAAA,SAAS,EAAEE,IAAI,CAACC;AAAlB,aAAD,CAAf,CAAT;;AAPN;AAAA;AAAA;;AAAA;AAAA;AAAA;AASM;AACAC,YAAAA,OAAO,CAACC,GAAR;;AAVN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADmB,CAArB;AAiBA,eAAeb,OAAO,CAAC,CAACF,WAAW,CAACK,YAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { IResponse } from 'src/interfaces';\nimport { settingService } from 'src/services';\nimport { flatten } from 'lodash';\nimport { getCountries, updateSettings } from './actions';\n\nconst settingSagas = [\n  {\n    on: getCountries,\n    * worker() {\n      try {\n        const countries = yield select((state) => state.settings.countries);\n        if (countries && countries.length) return;\n        const resp: IResponse<any> = yield settingService.getCountries();\n        yield put(updateSettings({ countries: resp.data }));\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(e);\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(settingSagas)]);\n"]},"metadata":{},"sourceType":"module"}