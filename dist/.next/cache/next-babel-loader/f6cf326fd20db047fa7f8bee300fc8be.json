{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { getResponseError } from 'src/lib';\nimport { galleryService } from 'src/services';\nimport { getPerformerGalleries, getPerformerGalleriesSuccess, getPerformerGalleriesFail, gettingPerformerGalleries } from './actions';\nconst galleriedSagas = [{\n  on: getPerformerGalleries,\n\n  *worker(action) {\n    try {\n      yield put(gettingPerformerGalleries());\n      const resp = yield galleryService.search(action.payload, false);\n      const galleries = resp.data.data;\n      const ids = galleries.map(g => g._id);\n      const data = galleries.length && (galleries.length > 1 ? galleries.reduce((previousValue, currentValue, index) => {\n        if (index === 1) {\n          return {\n            [previousValue._id]: previousValue,\n            [currentValue._id]: currentValue\n          };\n        }\n\n        const value = _objectSpread({}, previousValue);\n\n        value[currentValue._id] = currentValue;\n        return value;\n      }) : {\n        [galleries[0]._id]: galleries[0]\n      });\n      yield put(getPerformerGalleriesSuccess({\n        data,\n        ids,\n        total: resp.data.total\n      }));\n    } catch (error) {\n      const err = yield getResponseError(error);\n      yield put(getPerformerGalleriesFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(galleriedSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/galleries/sagas.ts"],"names":["put","flatten","createSagas","getResponseError","galleryService","getPerformerGalleries","getPerformerGalleriesSuccess","getPerformerGalleriesFail","gettingPerformerGalleries","galleriedSagas","on","worker","action","resp","search","payload","galleries","data","ids","map","g","_id","length","reduce","previousValue","currentValue","index","value","total","error","err"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAOA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SACEC,qBADF,EAEEC,4BAFF,EAGEC,yBAHF,EAIEC,yBAJF,QAKO,WALP;AAOA,MAAMC,cAAc,GAAG,CACrB;AACEC,EAAAA,EAAE,EAAEL,qBADN;;AAEE,GAAEM,MAAF,CAASC,MAAT,EAAoC;AAClC,QAAI;AACF,YAAMZ,GAAG,CAACQ,yBAAyB,EAA1B,CAAT;AACA,YAAMK,IAAmC,GAAG,MAAMT,cAAc,CAACU,MAAf,CAChDF,MAAM,CAACG,OADyC,EAEhD,KAFgD,CAAlD;AAKA,YAAMC,SAAS,GAAGH,IAAI,CAACI,IAAL,CAAUA,IAA5B;AACA,YAAMC,GAAG,GAAGF,SAAS,CAACG,GAAV,CAAeC,CAAD,IAA0BA,CAAC,CAACC,GAA1C,CAAZ;AACA,YAAMJ,IAAI,GAAGD,SAAS,CAACM,MAAV,KAAqBN,SAAS,CAACM,MAAV,GAAmB,CAAnB,GAAuBN,SAAS,CAACO,MAAV,CAAiB,CAACC,aAAD,EAAgBC,YAAhB,EAA8BC,KAA9B,KAAwC;AAChH,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,iBAAO;AAAE,aAACF,aAAa,CAACH,GAAf,GAAqBG,aAAvB;AAAsC,aAACC,YAAY,CAACJ,GAAd,GAAoBI;AAA1D,WAAP;AACD;;AAED,cAAME,KAAK,qBAAQH,aAAR,CAAX;;AACAG,QAAAA,KAAK,CAACF,YAAY,CAACJ,GAAd,CAAL,GAA0BI,YAA1B;AACA,eAAOE,KAAP;AACD,OARwD,CAAvB,GAQ7B;AAAE,SAACX,SAAS,CAAC,CAAD,CAAT,CAAaK,GAAd,GAAoBL,SAAS,CAAC,CAAD;AAA/B,OARQ,CAAb;AAUA,YAAMhB,GAAG,CACPM,4BAA4B,CAAC;AAC3BW,QAAAA,IAD2B;AAE3BC,QAAAA,GAF2B;AAG3BU,QAAAA,KAAK,EAAEf,IAAI,CAACI,IAAL,CAAUW;AAHU,OAAD,CADrB,CAAT;AAOD,KA1BD,CA0BE,OAAOC,KAAP,EAAc;AACd,YAAMC,GAAG,GAAG,MAAM3B,gBAAgB,CAAC0B,KAAD,CAAlC;AACA,YAAM7B,GAAG,CAACO,yBAAyB,CAACuB,GAAD,CAA1B,CAAT;AACD;AACF;;AAjCH,CADqB,CAAvB;AAsCA,eAAe7B,OAAO,CAAC,CAACC,WAAW,CAACO,cAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport {\n  IReduxAction,\n  IResponse,\n  IDataResponse,\n  IPerformerGallery\n} from 'src/interfaces';\nimport { getResponseError } from 'src/lib';\nimport { galleryService } from 'src/services';\nimport {\n  getPerformerGalleries,\n  getPerformerGalleriesSuccess,\n  getPerformerGalleriesFail,\n  gettingPerformerGalleries\n} from './actions';\n\nconst galleriedSagas = [\n  {\n    on: getPerformerGalleries,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerGalleries());\n        const resp: IResponse<IDataResponse<any>> = yield galleryService.search(\n          action.payload,\n          false\n        );\n\n        const galleries = resp.data.data;\n        const ids = galleries.map((g: IPerformerGallery) => g._id);\n        const data = galleries.length && (galleries.length > 1 ? galleries.reduce((previousValue, currentValue, index) => {\n          if (index === 1) {\n            return { [previousValue._id]: previousValue, [currentValue._id]: currentValue };\n          }\n\n          const value = { ...previousValue };\n          value[currentValue._id] = currentValue;\n          return value;\n        }) : { [galleries[0]._id]: galleries[0] });\n\n        yield put(\n          getPerformerGalleriesSuccess({\n            data,\n            ids,\n            total: resp.data.total\n          })\n        );\n      } catch (error) {\n        const err = yield getResponseError(error);\n        yield put(getPerformerGalleriesFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(galleriedSagas)]);\n"]},"metadata":{},"sourceType":"module"}