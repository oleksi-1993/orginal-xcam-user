{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\src\\\\components\\\\messages\\\\ConversationList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport './ConversationList.less';\nimport { getConversations, setActiveConversation, getConversationDetail, receiveMessageSuccess, searchConversations, updateLastMessage } from '@redux/message/actions';\nimport { Event } from 'src/socket';\nimport { debounce } from 'lodash';\nimport { messageService } from '@services/message.service';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\n\nvar ConversationList = /*#__PURE__*/function (_PureComponent) {\n  _inherits(ConversationList, _PureComponent);\n\n  var _super = _createSuper(ConversationList);\n\n  function ConversationList(props) {\n    var _this;\n\n    _classCallCheck(this, ConversationList);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"conversationsRef\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      conversationPage: 1,\n      keyword: ''\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMessage\", /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n        var _this$props, conversation, currentPerformer, currentUser, getConversationDetailHandler, receiveMessageSuccessHandler, handleUpdateLastMessage, mapping, conversationId, text;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (message) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _this$props = _this.props, conversation = _this$props.conversation, currentPerformer = _this$props.currentPerformer, currentUser = _this$props.currentUser, getConversationDetailHandler = _this$props.getConversationDetail, receiveMessageSuccessHandler = _this$props.receiveMessageSuccess, handleUpdateLastMessage = _this$props.updateLastMessage;\n                mapping = conversation.mapping;\n                conversationId = message.conversationId, text = message.text;\n\n                if (!mapping[message.conversationId]) {\n                  getConversationDetailHandler({\n                    id: message.conversationId\n                  });\n                }\n\n                receiveMessageSuccessHandler(message);\n                handleUpdateLastMessage({\n                  conversationId: conversationId,\n                  lastMessage: text\n                });\n                _context.next = 10;\n                return messageService.readAllInConversation(conversationId, currentUser._id ? currentUser._id : currentPerformer._id);\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchConversation\", debounce( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n        var value, getConversationsHandler;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                value = e.target.value;\n                getConversationsHandler = _this.props.searchConversations;\n                _context2.next = 4;\n                return _this.setState({\n                  keyword: value,\n                  conversationPage: 0\n                });\n\n              case 4:\n                if (!value) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", getConversationsHandler({\n                  keyword: value,\n                  limit: 25,\n                  offset: 0,\n                  type: 'private'\n                }));\n\n              case 6:\n                return _context2.abrupt(\"return\", getConversationsHandler({\n                  limit: 25,\n                  offset: 0,\n                  type: 'private'\n                }));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }(), 500));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleScroll\", /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(event) {\n        var _this$props2, conversation, getConversationsHandler, _conversation$list, requesting, data, total, _this$state, conversationPage, keyword, canloadmore, ele;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _this$props2 = _this.props, conversation = _this$props2.conversation, getConversationsHandler = _this$props2.getConversations;\n                _conversation$list = conversation.list, requesting = _conversation$list.requesting, data = _conversation$list.data, total = _conversation$list.total;\n                _this$state = _this.state, conversationPage = _this$state.conversationPage, keyword = _this$state.keyword;\n                canloadmore = total > data.length;\n                ele = event.target;\n\n                if (canloadmore) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 7:\n                if (ele.scrollHeight - ele.scrollTop === ele.clientHeight && !requesting && canloadmore) {\n                  _this.setState({\n                    conversationPage: conversationPage + 1\n                  }, function () {\n                    getConversationsHandler({\n                      keyword: keyword,\n                      limit: 25,\n                      offset: conversationPage * 25,\n                      type: 'private'\n                    });\n                  });\n                }\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }());\n\n    _defineProperty(_assertThisInitialized(_this), \"setActive\", function (conversationId) {\n      var _this$props3 = _this.props,\n          setActiveConversationHandler = _this$props3.setActiveConversation,\n          currentPerformer = _this$props3.currentPerformer,\n          currentUser = _this$props3.currentUser;\n      setActiveConversationHandler({\n        conversationId: conversationId,\n        recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(ConversationList, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this$props4, getConversationsHandler, setActiveConversationHandler, toSource, toId, currentUser, currentPerformer, _this$state2, conversationPage, keyword;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n                _this$props4 = this.props, getConversationsHandler = _this$props4.getConversations, setActiveConversationHandler = _this$props4.setActiveConversation, toSource = _this$props4.toSource, toId = _this$props4.toId, currentUser = _this$props4.currentUser, currentPerformer = _this$props4.currentPerformer;\n                _this$state2 = this.state, conversationPage = _this$state2.conversationPage, keyword = _this$state2.keyword;\n                getConversationsHandler({\n                  limit: 25,\n                  offset: conversationPage * 25,\n                  type: 'private',\n                  keyword: keyword\n                });\n\n                if (toSource && toId) {\n                  setTimeout(function () {\n                    setActiveConversationHandler({\n                      source: toSource,\n                      sourceId: toId,\n                      recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n                    });\n                  }, 1000);\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var conversation = this.props.conversation;\n      var _conversation$list2 = conversation.list,\n          conversations = _conversation$list2.data,\n          requesting = _conversation$list2.requesting;\n      var mapping = conversation.mapping,\n          _conversation$activeC = conversation.activeConversation,\n          activeConversation = _conversation$activeC === void 0 ? {} : _conversation$activeC;\n      if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n      return __jsx(\"div\", {\n        className: \"conversation-list\",\n        ref: this.conversationsRef,\n        onScroll: this.handleScroll.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }\n      }, __jsx(Event, {\n        event: \"message_created\",\n        handler: this.onMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }), __jsx(\"h4\", {\n        className: \"text-center\",\n        style: {\n          fontSize: '22px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 9\n        }\n      }, \"Messenger\"), __jsx(ConversationSearch, {\n        onSearch: function onSearch(e) {\n          e.persist();\n\n          _this2.onSearchConversation(e);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 9\n        }\n      }), conversations.length > 0 && conversations.map(function (conversationId) {\n        return __jsx(ConversationListItem, {\n          key: conversationId,\n          data: mapping[conversationId],\n          setActive: _this2.setActive.bind(_this2),\n          selected: activeConversation._id === conversationId,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }\n        });\n      }), requesting && __jsx(\"div\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }\n      }, __jsx(\"img\", {\n        alt: \"loading\",\n        src: \"/loading-ico.gif\",\n        width: \"50px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }\n      })), !requesting && !conversations.length && __jsx(\"p\", {\n        className: \"text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 50\n        }\n      }, \"No conversation found.\"));\n    }\n  }]);\n\n  return ConversationList;\n}(PureComponent);\n\nvar mapStates = function mapStates(state) {\n  return {\n    conversation: state.conversation,\n    message: state.message,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current\n  };\n};\n\nvar mapDispatch = {\n  searchConversations: searchConversations,\n  getConversations: getConversations,\n  setActiveConversation: setActiveConversation,\n  getConversationDetail: getConversationDetail,\n  receiveMessageSuccess: receiveMessageSuccess,\n  updateLastMessage: updateLastMessage\n};\nexport default connect(mapStates, mapDispatch)(ConversationList);","map":{"version":3,"sources":["E:/programData/React/user/src/components/messages/ConversationList.tsx"],"names":["React","PureComponent","createRef","connect","getConversations","setActiveConversation","getConversationDetail","receiveMessageSuccess","searchConversations","updateLastMessage","Event","debounce","messageService","ConversationSearch","ConversationListItem","ConversationList","props","conversationPage","keyword","message","conversation","currentPerformer","currentUser","getConversationDetailHandler","receiveMessageSuccessHandler","handleUpdateLastMessage","mapping","conversationId","text","id","lastMessage","readAllInConversation","_id","e","value","target","getConversationsHandler","setState","limit","offset","type","event","list","requesting","data","total","state","canloadmore","length","ele","scrollHeight","scrollTop","clientHeight","setActiveConversationHandler","recipientId","conversationsRef","toSource","toId","setTimeout","source","sourceId","conversations","activeConversation","handleScroll","bind","onMessage","fontSize","persist","onSearchConversation","map","setActive","mapStates","user","current","performer","mapDispatch"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,yBAAP;AACA,SACEC,gBADF,EAEEC,qBAFF,EAGEC,qBAHF,EAIEC,qBAJF,EAKEC,mBALF,EAMEC,iBANF,QAOO,wBAPP;AAQA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;;IAiCMC,gB;;;;;AAGJ,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB;;AAAA,4DAIX;AACNC,MAAAA,gBAAgB,EAAE,CADZ;AAENC,MAAAA,OAAO,EAAE;AAFH,KAJW;;AAAA;AAAA,0EAkCP,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACLA,OADK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,8BAWN,MAAKH,KAXC,EAKRI,YALQ,eAKRA,YALQ,EAMRC,gBANQ,eAMRA,gBANQ,EAORC,WAPQ,eAORA,WAPQ,EAQeC,4BARf,eAQRjB,qBARQ,EASekB,4BATf,eASRjB,qBATQ,EAUWkB,uBAVX,eAURhB,iBAVQ;AAYFiB,gBAAAA,OAZE,GAYUN,YAZV,CAYFM,OAZE;AAaFC,gBAAAA,cAbE,GAauBR,OAbvB,CAaFQ,cAbE,EAacC,IAbd,GAauBT,OAbvB,CAacS,IAbd;;AAcV,oBAAI,CAACF,OAAO,CAACP,OAAO,CAACQ,cAAT,CAAZ,EAAsC;AACpCJ,kBAAAA,4BAA4B,CAAC;AAC3BM,oBAAAA,EAAE,EAAEV,OAAO,CAACQ;AADe,mBAAD,CAA5B;AAGD;;AACDH,gBAAAA,4BAA4B,CAACL,OAAD,CAA5B;AACAM,gBAAAA,uBAAuB,CAAC;AAAEE,kBAAAA,cAAc,EAAdA,cAAF;AAAkBG,kBAAAA,WAAW,EAAEF;AAA/B,iBAAD,CAAvB;AApBU;AAAA,uBAqBJhB,cAAc,CAACmB,qBAAf,CAAqCJ,cAArC,EAAqDL,WAAW,CAACU,GAAZ,GAAkBV,WAAW,CAACU,GAA9B,GAAoCX,gBAAgB,CAACW,GAA1G,CArBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAlCO;;AAAA;AAAA;AAAA;AAAA;;AAAA,2EA0DIrB,QAAQ;AAAA,2EAAC,kBAAOsB,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACtBC,gBAAAA,KADsB,GACZD,CAAC,CAACE,MADU,CACtBD,KADsB;AAEDE,gBAAAA,uBAFC,GAE2B,MAAKpB,KAFhC,CAEtBR,mBAFsB;AAAA;AAAA,uBAGxB,MAAK6B,QAAL,CAAc;AAAEnB,kBAAAA,OAAO,EAAEgB,KAAX;AAAkBjB,kBAAAA,gBAAgB,EAAE;AAApC,iBAAd,CAHwB;;AAAA;AAAA,qBAI1BiB,KAJ0B;AAAA;AAAA;AAAA;;AAAA,kDAKrBE,uBAAuB,CAAC;AAC7BlB,kBAAAA,OAAO,EAAEgB,KADoB;AACbI,kBAAAA,KAAK,EAAE,EADM;AACFC,kBAAAA,MAAM,EAAE,CADN;AACSC,kBAAAA,IAAI,EAAE;AADf,iBAAD,CALF;;AAAA;AAAA,kDASvBJ,uBAAuB,CAAC;AAAEE,kBAAAA,KAAK,EAAE,EAAT;AAAaC,kBAAAA,MAAM,EAAE,CAArB;AAAwBC,kBAAAA,IAAI,EAAE;AAA9B,iBAAD,CATA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAD;;AAAA;AAAA;AAAA;AAAA,SAU5B,GAV4B,CA1DZ;;AAAA;AAAA,2EAsEJ,kBAAOC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,+BACuD,MAAKzB,KAD5D,EACLI,YADK,gBACLA,YADK,EAC2BgB,uBAD3B,gBACShC,gBADT;AAAA,qCAEuBgB,YAAY,CAACsB,IAFpC,EAELC,UAFK,sBAELA,UAFK,EAEOC,IAFP,sBAEOA,IAFP,EAEaC,KAFb,sBAEaA,KAFb;AAAA,8BAGyB,MAAKC,KAH9B,EAGL7B,gBAHK,eAGLA,gBAHK,EAGaC,OAHb,eAGaA,OAHb;AAIP6B,gBAAAA,WAJO,GAIOF,KAAK,GAAGD,IAAI,CAACI,MAJpB;AAKPC,gBAAAA,GALO,GAKDR,KAAK,CAACN,MALL;;AAAA,oBAMRY,WANQ;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOb,oBAAIE,GAAG,CAACC,YAAJ,GAAmBD,GAAG,CAACE,SAAvB,KAAqCF,GAAG,CAACG,YAAzC,IAAyD,CAACT,UAA1D,IAAwEI,WAA5E,EAAyF;AACvF,wBAAKV,QAAL,CAAc;AAAEpB,oBAAAA,gBAAgB,EAAEA,gBAAgB,GAAG;AAAvC,mBAAd,EAA0D,YAAM;AAC9DmB,oBAAAA,uBAAuB,CAAC;AACtBlB,sBAAAA,OAAO,EAAPA,OADsB;AACboB,sBAAAA,KAAK,EAAE,EADM;AACFC,sBAAAA,MAAM,EAAEtB,gBAAgB,GAAG,EADzB;AAC6BuB,sBAAAA,IAAI,EAAE;AADnC,qBAAD,CAAvB;AAGD,mBAJD;AAKD;;AAbY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAtEI;;AAAA;AAAA;AAAA;AAAA;;AAAA,gEAsFP,UAACb,cAAD,EAAyB;AACnC,yBAII,MAAKX,KAJT;AAAA,UACyBqC,4BADzB,gBACEhD,qBADF;AAAA,UAEEgB,gBAFF,gBAEEA,gBAFF;AAAA,UAGEC,WAHF,gBAGEA,WAHF;AAKA+B,MAAAA,4BAA4B,CAAC;AAAE1B,QAAAA,cAAc,EAAdA,cAAF;AAAkB2B,QAAAA,WAAW,EAAEhC,WAAW,CAACU,GAAZ,GAAkBV,WAAW,CAACU,GAA9B,GAAoCX,gBAAgB,CAACW;AAApF,OAAD,CAA5B;AACD,KA7FkB;;AAAA;AAElB;;;;;wFAOD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACE,oBAAI,CAAC,KAAKuB,gBAAV,EAA4B,KAAKA,gBAAL,gBAAwBrD,SAAS,EAAjC;AAD9B,+BASM,KAAKc,KATX,EAGsBoB,uBAHtB,gBAGIhC,gBAHJ,EAI2BiD,4BAJ3B,gBAIIhD,qBAJJ,EAKImD,QALJ,gBAKIA,QALJ,EAMIC,IANJ,gBAMIA,IANJ,EAOInC,WAPJ,gBAOIA,WAPJ,EAQID,gBARJ,gBAQIA,gBARJ;AAAA,+BAUwC,KAAKyB,KAV7C,EAUU7B,gBAVV,gBAUUA,gBAVV,EAU4BC,OAV5B,gBAU4BA,OAV5B;AAWEkB,gBAAAA,uBAAuB,CAAC;AACtBE,kBAAAA,KAAK,EAAE,EADe;AACXC,kBAAAA,MAAM,EAAEtB,gBAAgB,GAAG,EADhB;AACoBuB,kBAAAA,IAAI,EAAE,SAD1B;AACqCtB,kBAAAA,OAAO,EAAPA;AADrC,iBAAD,CAAvB;;AAGA,oBAAIsC,QAAQ,IAAIC,IAAhB,EAAsB;AACpBC,kBAAAA,UAAU,CAAC,YAAM;AACfL,oBAAAA,4BAA4B,CAAC;AAC3BM,sBAAAA,MAAM,EAAEH,QADmB;AAE3BI,sBAAAA,QAAQ,EAAEH,IAFiB;AAG3BH,sBAAAA,WAAW,EAAEhC,WAAW,CAACU,GAAZ,GAAkBV,WAAW,CAACU,GAA9B,GAAoCX,gBAAgB,CAACW;AAHvC,qBAAD,CAA5B;AAKD,mBANS,EAMP,IANO,CAAV;AAOD;;AAtBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAsFA,kBAAS;AAAA;;AACP,UAAQZ,YAAR,GAAyB,KAAKJ,KAA9B,CAAQI,YAAR;AACA,gCAA4CA,YAAY,CAACsB,IAAzD;AAAA,UAAcmB,aAAd,uBAAQjB,IAAR;AAAA,UAA6BD,UAA7B,uBAA6BA,UAA7B;AACA,UAAQjB,OAAR,GAA6CN,YAA7C,CAAQM,OAAR;AAAA,kCAA6CN,YAA7C,CAAiB0C,kBAAjB;AAAA,UAAiBA,kBAAjB,sCAAsC,EAAtC;AACA,UAAI,CAAC,KAAKP,gBAAV,EAA4B,KAAKA,gBAAL,gBAAwBrD,SAAS,EAAjC;AAC5B,aACE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAmC,QAAA,GAAG,EAAE,KAAKqD,gBAA7C;AAA+D,QAAA,QAAQ,EAAE,KAAKQ,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,KAAD;AAAO,QAAA,KAAK,EAAC,iBAAb;AAA+B,QAAA,OAAO,EAAE,KAAKC,SAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAI,QAAA,SAAS,EAAC,aAAd;AAA4B,QAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,EAGE,MAAC,kBAAD;AACE,QAAA,QAAQ,EAAE,kBAACjC,CAAD,EAAO;AACfA,UAAAA,CAAC,CAACkC,OAAF;;AACA,UAAA,MAAI,CAACC,oBAAL,CAA0BnC,CAA1B;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EASG4B,aAAa,CAACb,MAAd,GAAuB,CAAvB,IACIa,aAAa,CAACQ,GAAd,CAAkB,UAAC1C,cAAD;AAAA,eACnB,MAAC,oBAAD;AACE,UAAA,GAAG,EAAEA,cADP;AAEE,UAAA,IAAI,EAAED,OAAO,CAACC,cAAD,CAFf;AAGE,UAAA,SAAS,EAAE,MAAI,CAAC2C,SAAL,CAAeN,IAAf,CAAoB,MAApB,CAHb;AAIE,UAAA,QAAQ,EAAEF,kBAAkB,CAAC9B,GAAnB,KAA2BL,cAJvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADmB;AAAA,OAAlB,CAVP,EAkBGgB,UAAU,IACX;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAC,SAAT;AAAmB,QAAA,GAAG,EAAC,kBAAvB;AAA0C,QAAA,KAAK,EAAC,MAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAnBF,EAuBG,CAACA,UAAD,IAAe,CAACkB,aAAa,CAACb,MAA9B,IAAwC;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAvB3C,CADF;AA2BD;;;;EAlI4B/C,a;;AAqI/B,IAAMsE,SAAS,GAAG,SAAZA,SAAY,CAACzB,KAAD;AAAA,SAAiB;AACjC1B,IAAAA,YAAY,EAAE0B,KAAK,CAAC1B,YADa;AAEjCD,IAAAA,OAAO,EAAE2B,KAAK,CAAC3B,OAFkB;AAGjCG,IAAAA,WAAW,EAAEwB,KAAK,CAAC0B,IAAN,CAAWC,OAHS;AAIjCpD,IAAAA,gBAAgB,EAAEyB,KAAK,CAAC4B,SAAN,CAAgBD;AAJD,GAAjB;AAAA,CAAlB;;AAOA,IAAME,WAAW,GAAG;AAClBnE,EAAAA,mBAAmB,EAAnBA,mBADkB;AAElBJ,EAAAA,gBAAgB,EAAhBA,gBAFkB;AAGlBC,EAAAA,qBAAqB,EAArBA,qBAHkB;AAIlBC,EAAAA,qBAAqB,EAArBA,qBAJkB;AAKlBC,EAAAA,qBAAqB,EAArBA,qBALkB;AAMlBE,EAAAA,iBAAiB,EAAjBA;AANkB,CAApB;AAQA,eAAeN,OAAO,CAACoE,SAAD,EAAYI,WAAZ,CAAP,CAAgC5D,gBAAhC,CAAf","sourcesContent":["import React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport './ConversationList.less';\nimport {\n  getConversations,\n  setActiveConversation,\n  getConversationDetail,\n  receiveMessageSuccess,\n  searchConversations,\n  updateLastMessage\n} from '@redux/message/actions';\nimport { Event } from 'src/socket';\nimport { debounce } from 'lodash';\nimport { IUser, IPerformer } from 'src/interfaces';\nimport { messageService } from '@services/message.service';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\n\ninterface IProps {\n  searchConversations: Function;\n  getConversations: Function;\n  setActiveConversation: Function;\n  getConversationDetail: Function;\n  receiveMessageSuccess: Function;\n  updateLastMessage: Function;\n  conversation: {\n    list: {\n      requesting: boolean;\n      error: any;\n      data: any[];\n      total: number;\n      success: boolean;\n    };\n    mapping: Record<string, any>;\n    activeConversation: Record<string, any>;\n  };\n  toSource: string;\n  toId: string;\n  message: {\n    conversationMap: {\n\n    },\n    sendMessage: {\n\n    }\n  },\n  currentUser: IUser;\n  currentPerformer: IPerformer\n}\nclass ConversationList extends PureComponent<IProps> {\n  conversationsRef: any;\n\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    conversationPage: 1,\n    keyword: ''\n  }\n\n  async componentDidMount() {\n    if (!this.conversationsRef) this.conversationsRef = createRef();\n    const {\n      getConversations: getConversationsHandler,\n      setActiveConversation: setActiveConversationHandler,\n      toSource,\n      toId,\n      currentUser,\n      currentPerformer\n    } = this.props;\n    const { conversationPage, keyword } = this.state;\n    getConversationsHandler({\n      limit: 25, offset: conversationPage * 25, type: 'private', keyword\n    });\n    if (toSource && toId) {\n      setTimeout(() => {\n        setActiveConversationHandler({\n          source: toSource,\n          sourceId: toId,\n          recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n        });\n      }, 1000);\n    }\n  }\n\n  onMessage = async (message: { conversationId: string | number; text: any }) => {\n    if (!message) {\n      return;\n    }\n    const {\n      conversation,\n      currentPerformer,\n      currentUser,\n      getConversationDetail: getConversationDetailHandler,\n      receiveMessageSuccess: receiveMessageSuccessHandler,\n      updateLastMessage: handleUpdateLastMessage\n    } = this.props;\n    const { mapping } = conversation;\n    const { conversationId, text } = message;\n    if (!mapping[message.conversationId]) {\n      getConversationDetailHandler({\n        id: message.conversationId\n      });\n    }\n    receiveMessageSuccessHandler(message);\n    handleUpdateLastMessage({ conversationId, lastMessage: text });\n    await messageService.readAllInConversation(conversationId, currentUser._id ? currentUser._id : currentPerformer._id);\n  };\n\n  onSearchConversation = debounce(async (e) => {\n    const { value } = e.target;\n    const { searchConversations: getConversationsHandler } = this.props;\n    await this.setState({ keyword: value, conversationPage: 0 });\n    if (value) {\n      return getConversationsHandler({\n        keyword: value, limit: 25, offset: 0, type: 'private'\n      });\n    }\n    return getConversationsHandler({ limit: 25, offset: 0, type: 'private' });\n  }, 500);\n\n  handleScroll = async (event: { target: any; }) => {\n    const { conversation, getConversations: getConversationsHandler } = this.props;\n    const { requesting, data, total } = conversation.list;\n    const { conversationPage, keyword } = this.state;\n    const canloadmore = total > data.length;\n    const ele = event.target;\n    if (!canloadmore) return;\n    if (ele.scrollHeight - ele.scrollTop === ele.clientHeight && !requesting && canloadmore) {\n      this.setState({ conversationPage: conversationPage + 1 }, () => {\n        getConversationsHandler({\n          keyword, limit: 25, offset: conversationPage * 25, type: 'private'\n        });\n      });\n    }\n  }\n\n  setActive = (conversationId: any) => {\n    const {\n      setActiveConversation: setActiveConversationHandler,\n      currentPerformer,\n      currentUser\n    } = this.props;\n    setActiveConversationHandler({ conversationId, recipientId: currentUser._id ? currentUser._id : currentPerformer._id });\n  };\n\n  render() {\n    const { conversation } = this.props;\n    const { data: conversations, requesting } = conversation.list;\n    const { mapping, activeConversation = {} } = conversation;\n    if (!this.conversationsRef) this.conversationsRef = createRef();\n    return (\n      <div className=\"conversation-list\" ref={this.conversationsRef} onScroll={this.handleScroll.bind(this)}>\n        <Event event=\"message_created\" handler={this.onMessage} />\n        <h4 className=\"text-center\" style={{ fontSize: '22px' }}>Messenger</h4>\n        <ConversationSearch\n          onSearch={(e) => {\n            e.persist();\n            this.onSearchConversation(e);\n          }}\n        />\n        {conversations.length > 0\n          && conversations.map((conversationId) => (\n            <ConversationListItem\n              key={conversationId}\n              data={mapping[conversationId]}\n              setActive={this.setActive.bind(this)}\n              selected={activeConversation._id === conversationId}\n            />\n          ))}\n        {requesting && (\n        <div className=\"text-center\">\n          <img alt=\"loading\" src=\"/loading-ico.gif\" width=\"50px\" />\n        </div>\n        )}\n        {!requesting && !conversations.length && <p className=\"text-center\">No conversation found.</p>}\n      </div>\n    );\n  }\n}\n\nconst mapStates = (state: any) => ({\n  conversation: state.conversation,\n  message: state.message,\n  currentUser: state.user.current,\n  currentPerformer: state.performer.current\n});\n\nconst mapDispatch = {\n  searchConversations,\n  getConversations,\n  setActiveConversation,\n  getConversationDetail,\n  receiveMessageSuccess,\n  updateLastMessage\n};\nexport default connect(mapStates, mapDispatch)(ConversationList);\n"]},"metadata":{},"sourceType":"module"}