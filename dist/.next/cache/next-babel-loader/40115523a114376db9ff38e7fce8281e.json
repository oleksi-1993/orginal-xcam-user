{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge, findIndex } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, sendStreamMessage, sendStreamMessageSuccess, sendStreamMessageFail, receiveStreamMessageSuccess, loadMoreStreamMessagesSuccess, loadStreamMessagesSuccess, resetStreamMessage, resetAllStreamMessage, deleteMessageSuccess, resetStreamConversation } from './actions';\nconst initialMessageState = {\n  activeConversation: {},\n  sendMessage: {\n    sending: false\n  },\n  receiveMessage: {},\n  conversationMap: {}\n};\nconst streamMessageReducer = [{\n  on: getStreamConversation,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: _objectSpread(_objectSpread({}, state.activeConversation), {}, {\n        fetching: true\n      })\n    });\n  }\n\n}, {\n  on: getStreamConversationSuccess,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {\n        fetching: false,\n        data: data.payload.data\n      }\n    });\n  }\n\n}, {\n  on: fetchingStreamMessage,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId\n    } = data.payload;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadStreamMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse()],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadMoreStreamMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse(), ...(conversationMap[conversationId].items || [])],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: sendStreamMessage,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true,\n        success: false,\n        data: null\n      }\n    });\n  }\n\n}, {\n  on: sendStreamMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n\n}, {\n  on: sendStreamMessageFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n\n}, {\n  on: receiveStreamMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      conversationId\n    } = data.payload;\n\n    if (!nextState.conversationMap[conversationId] || !nextState.conversationMap[conversationId].items) {\n      nextState.conversationMap[conversationId] = {\n        items: []\n      };\n    }\n\n    nextState.conversationMap[conversationId].items = [...nextState.conversationMap[conversationId].items, data.payload];\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n\n}, {\n  on: resetStreamConversation,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: resetStreamMessage,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false\n      },\n      receiveMessage: {},\n      conversationMap: {}\n    });\n  }\n\n}, {\n  on: resetAllStreamMessage,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      conversationId\n    } = data.payload;\n    nextState.conversationMap[conversationId] = {\n      items: []\n    };\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: deleteMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      conversationId,\n      _id\n    } = data.payload;\n    const i = findIndex(nextState.conversationMap[conversationId].items, item => item && item._id === _id);\n\n    if (nextState.conversationMap[conversationId].items && nextState.conversationMap[conversationId].items[i]) {\n      nextState.conversationMap[conversationId].items[i].text = 'Message deleted';\n      nextState.conversationMap[conversationId].items[i].isDeleted = true;\n    }\n\n    return _objectSpread({}, nextState);\n  }\n\n}];\nexport default merge({}, createReducers('streamMessage', [streamMessageReducer], initialMessageState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/stream-chat/reducers.ts"],"names":["merge","findIndex","createReducers","getStreamConversation","getStreamConversationSuccess","fetchingStreamMessage","sendStreamMessage","sendStreamMessageSuccess","sendStreamMessageFail","receiveStreamMessageSuccess","loadMoreStreamMessagesSuccess","loadStreamMessagesSuccess","resetStreamMessage","resetAllStreamMessage","deleteMessageSuccess","resetStreamConversation","initialMessageState","activeConversation","sendMessage","sending","receiveMessage","conversationMap","streamMessageReducer","on","reducer","state","fetching","data","payload","conversationId","items","total","reverse","success","nextState","error","_id","i","item","text","isDeleted"],"mappings":"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","sourcesContent":["import { merge, findIndex } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction } from 'src/interfaces';\nimport {\n  getStreamConversation,\n  getStreamConversationSuccess,\n  fetchingStreamMessage,\n  sendStreamMessage,\n  sendStreamMessageSuccess,\n  sendStreamMessageFail,\n  receiveStreamMessageSuccess,\n  loadMoreStreamMessagesSuccess,\n  loadStreamMessagesSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage,\n  deleteMessageSuccess,\n  resetStreamConversation\n} from './actions';\n\nconst initialMessageState = {\n  activeConversation: {\n  },\n  sendMessage: {\n    sending: false\n  },\n  receiveMessage: {},\n  conversationMap: {}\n};\n\nconst streamMessageReducer = [\n  {\n    on: getStreamConversation,\n    reducer(state: any) {\n      return {\n        ...state,\n        activeConversation: { ...state.activeConversation, fetching: true }\n      };\n    }\n  },\n  {\n    on: getStreamConversationSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        activeConversation: {\n          fetching: false,\n          data: data.payload.data\n        }\n      };\n    }\n  },\n  {\n    on: fetchingStreamMessage,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId } = data.payload;\n      conversationMap[conversationId] = {\n        ...conversationMap[conversationId],\n        fetching: true\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadStreamMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [...items.reverse()],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadMoreStreamMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [\n          ...items.reverse(),\n          ...conversationMap[conversationId].items || []\n        ],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: sendStreamMessage,\n    reducer(state: any) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: true,\n          success: false,\n          data: null\n        }\n      };\n    }\n  },\n  {\n    on: sendStreamMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false,\n          success: true,\n          data: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: sendStreamMessageFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: false,\n          success: false,\n          error: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: receiveStreamMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { conversationId } = data.payload;\n      if (!nextState.conversationMap[conversationId] || !nextState.conversationMap[conversationId].items) {\n        nextState.conversationMap[conversationId] = {\n          items: []\n        };\n      }\n\n      nextState.conversationMap[conversationId].items = [...nextState.conversationMap[conversationId].items, data.payload];\n      return {\n        ...nextState,\n        receiveMessage: data.payload\n      };\n    }\n  },\n  {\n    on: resetStreamConversation,\n    reducer(state) {\n      return {\n        ...state,\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: resetStreamMessage,\n    reducer(state: any) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false\n        },\n        receiveMessage: {},\n        conversationMap: {}\n      };\n    }\n  },\n  {\n    on: resetAllStreamMessage,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { conversationId } = data.payload;\n      nextState.conversationMap[conversationId] = {\n        items: []\n      };\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: deleteMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { conversationId, _id } = data.payload;\n      const i = findIndex(nextState.conversationMap[conversationId].items, (item: any) => item && item._id === _id);\n      if (nextState.conversationMap[conversationId].items && nextState.conversationMap[conversationId].items[i]) {\n        nextState.conversationMap[conversationId].items[i].text = 'Message deleted';\n        nextState.conversationMap[conversationId].items[i].isDeleted = true;\n      }\n      return {\n        ...nextState\n      };\n    }\n  }\n];\n\nexport default merge(\n  {},\n  createReducers('streamMessage', [streamMessageReducer], initialMessageState)\n);\n"]},"metadata":{},"sourceType":"module"}