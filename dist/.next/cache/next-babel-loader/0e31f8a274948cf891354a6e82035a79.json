{"ast":null,"code":"var _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\src\\\\components\\\\messages\\\\MessageList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport '../stream-chat/MessageList.less';\nimport { loadMoreMessages } from '@redux/message/actions';\nimport Compose from './Compose';\nimport Message from './Message';\n\nclass MessageList extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"messagesRef\", void 0);\n\n    _defineProperty(this, \"state\", {\n      offset: 1,\n      onloadmore: false\n    });\n\n    _defineProperty(this, \"renderMessages\", () => {\n      const {\n        message,\n        currentUser,\n        currentPerformer\n      } = this.props;\n      const messages = message.items;\n      let i = 0;\n      const messageCount = messages.length;\n      const tempMessages = [];\n\n      while (i < messageCount) {\n        const previous = messages[i - 1];\n        const current = messages[i];\n        const next = messages[i + 1];\n        const isMine = current.senderId === (currentUser && currentUser._id || currentPerformer && currentPerformer._id);\n        const currentMoment = moment(current.createdAt);\n        let prevBySameAuthor = false;\n        let nextBySameAuthor = false;\n        let startsSequence = true;\n        let endsSequence = true;\n        let showTimestamp = true;\n\n        if (previous) {\n          const previousMoment = moment(previous.createdAt);\n          const previousDuration = moment.duration(currentMoment.diff(previousMoment));\n          prevBySameAuthor = previous.senderId === current.senderId;\n\n          if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n            startsSequence = false;\n          }\n\n          if (previousDuration.as('hours') < 1) {\n            showTimestamp = false;\n          }\n        }\n\n        if (next) {\n          const nextMoment = moment(next.createdAt);\n          const nextDuration = moment.duration(nextMoment.diff(currentMoment));\n          nextBySameAuthor = next.senderId === current.senderId;\n\n          if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n            endsSequence = false;\n          }\n        }\n\n        if (current._id) {\n          tempMessages.push(__jsx(Message, {\n            key: i,\n            isMine: isMine,\n            startsSequence: startsSequence,\n            endsSequence: endsSequence,\n            showTimestamp: showTimestamp,\n            data: current,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 11\n            }\n          }));\n        } // Proceed to the next message.\n\n\n        i += 1;\n      }\n\n      this.scrollToBottom();\n      return tempMessages;\n    });\n  }\n\n  async componentDidMount() {\n    if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n  }\n\n  async componentDidUpdate(prevProps) {\n    const {\n      conversation,\n      message\n    } = this.props;\n    const {\n      onloadmore\n    } = this.state;\n    const messages = message.items;\n\n    if (prevProps && prevProps.conversation && prevProps.conversation._id !== conversation._id) {\n      this.setOffset();\n    }\n\n    if (messages !== prevProps.message.items) {\n      if (onloadmore) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({\n          onloadmore: false\n        });\n      } else {\n        this.scrollToBottom();\n      }\n    }\n  }\n\n  async handleScroll(conversation, event) {\n    const {\n      message,\n      loadMoreMessages: dispatchLoadMoreMessages\n    } = this.props;\n    const {\n      fetching,\n      items,\n      total\n    } = message;\n    const {\n      offset\n    } = this.state;\n    const canloadmore = total > items.length;\n    const ele = event.target;\n    if (!canloadmore) return;\n\n    if (ele.scrollTop === 0 && conversation._id && !fetching && canloadmore) {\n      await this.setState({\n        offset: offset + 1,\n        onloadmore: true\n      });\n      dispatchLoadMoreMessages({\n        conversationId: conversation._id,\n        limit: 20,\n        offset: (offset - 1) * 20\n      });\n    }\n  }\n\n  async setOffset() {\n    this.setState({\n      offset: 1\n    });\n  }\n\n  scrollToBottom() {\n    const {\n      onloadmore\n    } = this.state;\n\n    if (onloadmore) {\n      return;\n    }\n\n    if (this.messagesRef && this.messagesRef.current) {\n      const ele = this.messagesRef.current;\n      window.setTimeout(() => {\n        ele.scrollTop = ele.scrollHeight;\n      }, 100);\n    }\n  }\n\n  render() {\n    const {\n      conversation,\n      message\n    } = this.props;\n    const {\n      fetching\n    } = message;\n    if (!this.messagesRef) this.messagesRef = /*#__PURE__*/createRef();\n    return __jsx(\"div\", {\n      className: \"message-list custom\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, conversation && conversation._id ? __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"message-list-container\",\n      ref: this.messagesRef,\n      onScroll: this.handleScroll.bind(this, conversation),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, fetching && __jsx(\"p\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 28\n      }\n    }, \"fetching...\"), this.renderMessages()), __jsx(Compose, {\n      conversation: conversation,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    })) : __jsx(\"div\", {\n      className: \"start-conversation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, \"Click conversation to start\")));\n  }\n\n}\n\nconst mapStates = state => {\n  const {\n    conversationMap\n  } = state.message;\n  const {\n    activeConversation\n  } = state.conversation;\n  const messages = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].items || [] : [];\n  const totalMessages = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].total || 0 : 0;\n  const fetching = conversationMap[activeConversation._id] ? conversationMap[activeConversation._id].fetching || false : false;\n  return {\n    message: {\n      items: messages,\n      total: totalMessages,\n      fetching\n    },\n    conversation: activeConversation,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current\n  };\n};\n\nconst mapDispatch = {\n  loadMoreMessages\n};\nexport default connect(mapStates, mapDispatch)(MessageList);","map":{"version":3,"sources":["E:/programData/React/user/src/components/messages/MessageList.tsx"],"names":["React","PureComponent","createRef","connect","moment","loadMoreMessages","Compose","Message","MessageList","offset","onloadmore","message","currentUser","currentPerformer","props","messages","items","i","messageCount","length","tempMessages","previous","current","next","isMine","senderId","_id","currentMoment","createdAt","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","scrollToBottom","componentDidMount","messagesRef","componentDidUpdate","prevProps","conversation","state","setOffset","setState","handleScroll","event","dispatchLoadMoreMessages","fetching","total","canloadmore","ele","target","scrollTop","conversationId","limit","window","setTimeout","scrollHeight","render","bind","renderMessages","mapStates","conversationMap","activeConversation","totalMessages","user","performer","mapDispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent, Fragment, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport moment from 'moment';\nimport '../stream-chat/MessageList.less';\nimport { loadMoreMessages } from '@redux/message/actions';\nimport { IPerformer } from 'src/interfaces';\nimport Compose from './Compose';\nimport Message from './Message';\n\ninterface IProps {\n  loadMoreMessages: Function;\n  message: any;\n  conversation: any;\n  currentUser: any;\n  currentPerformer: IPerformer;\n}\n\nclass MessageList extends PureComponent<IProps> {\n  messagesRef: any;\n\n  state = {\n    offset: 1,\n    onloadmore: false\n  };\n\n  async componentDidMount() {\n    if (!this.messagesRef) this.messagesRef = createRef();\n  }\n\n  async componentDidUpdate(prevProps: IProps) {\n    const { conversation, message } = this.props;\n    const { onloadmore } = this.state;\n    const messages = message.items;\n    if (\n      prevProps\n      && prevProps.conversation\n      && prevProps.conversation._id !== conversation._id\n    ) {\n      this.setOffset();\n    }\n\n    if (messages !== prevProps.message.items) {\n      if (onloadmore) {\n        // eslint-disable-next-line react/no-did-update-set-state\n        this.setState({ onloadmore: false });\n      } else {\n        this.scrollToBottom();\n      }\n    }\n  }\n\n  async handleScroll(conversation, event) {\n    const { message, loadMoreMessages: dispatchLoadMoreMessages } = this.props;\n    const { fetching, items, total } = message;\n    const { offset } = this.state;\n    const canloadmore = total > items.length;\n    const ele = event.target;\n    if (!canloadmore) return;\n    if (ele.scrollTop === 0 && conversation._id && !fetching && canloadmore) {\n      await this.setState({ offset: offset + 1, onloadmore: true });\n      dispatchLoadMoreMessages({\n        conversationId: conversation._id,\n        limit: 20,\n        offset: (offset - 1) * 20\n      });\n    }\n  }\n\n  async setOffset() {\n    this.setState({ offset: 1 });\n  }\n\n  renderMessages = () => {\n    const { message, currentUser, currentPerformer } = this.props;\n    const messages = message.items;\n    let i = 0;\n    const messageCount = messages.length;\n    const tempMessages = [];\n    while (i < messageCount) {\n      const previous = messages[i - 1];\n      const current = messages[i];\n      const next = messages[i + 1];\n      const isMine = current.senderId\n        === ((currentUser && currentUser._id)\n          || (currentPerformer && currentPerformer._id));\n      const currentMoment = moment(current.createdAt);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        const previousMoment = moment(previous.createdAt);\n        const previousDuration = moment.duration(\n          currentMoment.diff(previousMoment)\n        );\n        prevBySameAuthor = previous.senderId === current.senderId;\n\n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        const nextMoment = moment(next.createdAt);\n        const nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.senderId === current.senderId;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n      if (current._id) {\n        tempMessages.push(\n          <Message\n            key={i}\n            isMine={isMine}\n            startsSequence={startsSequence}\n            endsSequence={endsSequence}\n            showTimestamp={showTimestamp}\n            data={current}\n          />\n        );\n      }\n      // Proceed to the next message.\n      i += 1;\n    }\n    this.scrollToBottom();\n    return tempMessages;\n  };\n\n  scrollToBottom() {\n    const { onloadmore } = this.state;\n    if (onloadmore) {\n      return;\n    }\n    if (this.messagesRef && this.messagesRef.current) {\n      const ele = this.messagesRef.current;\n      window.setTimeout(() => {\n        ele.scrollTop = ele.scrollHeight;\n      }, 100);\n    }\n  }\n\n  render() {\n    const { conversation, message } = this.props;\n    const { fetching } = message;\n    if (!this.messagesRef) this.messagesRef = createRef();\n    return (\n      <div className=\"message-list custom\">\n        {conversation && conversation._id ? (\n          <>\n            <div\n              className=\"message-list-container\"\n              ref={this.messagesRef}\n              onScroll={this.handleScroll.bind(this, conversation)}\n            >\n              {fetching && <p className=\"text-center\">fetching...</p>}\n              {this.renderMessages()}\n            </div>\n\n            <Compose conversation={conversation} />\n          </>\n        ) : (\n          <div className=\"start-conversation\">\n            <p>Click conversation to start</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStates = (state: any) => {\n  const { conversationMap } = state.message;\n  const { activeConversation } = state.conversation;\n  const messages = conversationMap[activeConversation._id]\n    ? conversationMap[activeConversation._id].items || []\n    : [];\n  const totalMessages = conversationMap[activeConversation._id]\n    ? conversationMap[activeConversation._id].total || 0\n    : 0;\n  const fetching = conversationMap[activeConversation._id]\n    ? conversationMap[activeConversation._id].fetching || false\n    : false;\n  return {\n    message: {\n      items: messages,\n      total: totalMessages,\n      fetching\n    },\n    conversation: activeConversation,\n    currentUser: state.user.current,\n    currentPerformer: state.performer.current\n  };\n};\n\nconst mapDispatch = { loadMoreMessages };\nexport default connect(mapStates, mapDispatch)(MessageList);\n"]},"metadata":{},"sourceType":"module"}