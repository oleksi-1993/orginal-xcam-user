{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { videoService } from 'src/services';\nimport { getResponseError } from 'src/lib';\nimport { getPerformersVideos, getPerformersVideosFail, getPerformersVideosSuccess, gettingPerformerVideos } from './actions';\nvar videosSagas = [{\n  on: getPerformersVideos,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, videos, ids, data, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(gettingPerformerVideos());\n\n          case 3:\n            _context.next = 5;\n            return videoService.search(action.payload);\n\n          case 5:\n            resp = _context.sent;\n            videos = resp.data.data;\n            ids = videos.map(function (v) {\n              return v._id;\n            });\n            data = videos.length && (videos.length > 1 ? videos.reduce(function (previousValue, currentValue, index) {\n              if (index === 1) {\n                var _ref;\n\n                return _ref = {}, _defineProperty(_ref, previousValue._id, previousValue), _defineProperty(_ref, currentValue._id, currentValue), _ref;\n              }\n\n              var value = _objectSpread({}, previousValue);\n\n              value[currentValue._id] = currentValue;\n              return value;\n            }) : _defineProperty({}, videos[0]._id, videos[0]));\n            _context.next = 11;\n            return put(getPerformersVideosSuccess({\n              total: resp.data.total,\n              data: data,\n              ids: ids\n            }));\n\n          case 11:\n            _context.next = 18;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            err = getResponseError(_context.t0);\n            _context.next = 18;\n            return put(getPerformersVideosFail(err));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 13]]);\n  })\n}];\nexport default flatten([createSagas(videosSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/videos/sagas.ts"],"names":["put","flatten","createSagas","videoService","getResponseError","getPerformersVideos","getPerformersVideosFail","getPerformersVideosSuccess","gettingPerformerVideos","videosSagas","on","worker","action","search","payload","resp","videos","data","ids","map","v","_id","length","reduce","previousValue","currentValue","index","value","total","err"],"mappings":";;;;;;;AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SACEC,mBADF,EAEEC,uBAFF,EAGEC,0BAHF,EAIEC,sBAJF,QAKO,WALP;AAOA,IAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,EAAE,EAAEL,mBADN;AAEIM,EAAAA,MAFJ,wDAEWC,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMZ,GAAG,CAACQ,sBAAsB,EAAvB,CAAT;;AAJN;AAAA;AAKkD,mBAAML,YAAY,CAACU,MAAb,CAChDD,MAAM,CAACE,OADyC,CAAN;;AALlD;AAKYC,YAAAA,IALZ;AAQYC,YAAAA,MARZ,GAQqBD,IAAI,CAACE,IAAL,CAAUA,IAR/B;AASYC,YAAAA,GATZ,GASkBF,MAAM,CAACG,GAAP,CAAW,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACC,GAAT;AAAA,aAAX,CATlB;AAUYJ,YAAAA,IAVZ,GAUmBD,MAAM,CAACM,MAAP,KAAkBN,MAAM,CAACM,MAAP,GAAgB,CAAhB,GAAoBN,MAAM,CAACO,MAAP,CAAc,UAACC,aAAD,EAAgBC,YAAhB,EAA8BC,KAA9B,EAAwC;AACvG,kBAAIA,KAAK,KAAK,CAAd,EAAiB;AAAA;;AACf,wDAAUF,aAAa,CAACH,GAAxB,EAA8BG,aAA9B,yBAA8CC,YAAY,CAACJ,GAA3D,EAAiEI,YAAjE;AACD;;AAED,kBAAME,KAAK,qBAAQH,aAAR,CAAX;;AACAG,cAAAA,KAAK,CAACF,YAAY,CAACJ,GAAd,CAAL,GAA0BI,YAA1B;AACA,qBAAOE,KAAP;AACD,aARkD,CAApB,uBAQvBX,MAAM,CAAC,CAAD,CAAN,CAAUK,GARa,EAQPL,MAAM,CAAC,CAAD,CARC,CAAlB,CAVnB;AAAA;AAoBM,mBAAMhB,GAAG,CACPO,0BAA0B,CAAC;AACzBqB,cAAAA,KAAK,EAAEb,IAAI,CAACE,IAAL,CAAUW,KADQ;AAEzBX,cAAAA,IAAI,EAAJA,IAFyB;AAGzBC,cAAAA,GAAG,EAAHA;AAHyB,aAAD,CADnB,CAAT;;AApBN;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BYW,YAAAA,GA5BZ,GA4BkBzB,gBAAgB,aA5BlC;AAAA;AA6BM,mBAAMJ,GAAG,CAACM,uBAAuB,CAACuB,GAAD,CAAxB,CAAT;;AA7BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADkB,CAApB;AAoCA,eAAe5B,OAAO,CAAC,CAACC,WAAW,CAACO,WAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { IReduxAction, IResponse, IDataResponse } from 'src/interfaces';\nimport { videoService } from 'src/services';\nimport { getResponseError } from 'src/lib';\nimport {\n  getPerformersVideos,\n  getPerformersVideosFail,\n  getPerformersVideosSuccess,\n  gettingPerformerVideos\n} from './actions';\n\nconst videosSagas = [\n  {\n    on: getPerformersVideos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerVideos());\n        const resp: IResponse<IDataResponse<any>> = yield videoService.search(\n          action.payload\n        );\n        const videos = resp.data.data;\n        const ids = videos.map((v) => v._id);\n        const data = videos.length && (videos.length > 1 ? videos.reduce((previousValue, currentValue, index) => {\n          if (index === 1) {\n            return { [previousValue._id]: previousValue, [currentValue._id]: currentValue };\n          }\n\n          const value = { ...previousValue };\n          value[currentValue._id] = currentValue;\n          return value;\n        }) : { [videos[0]._id]: videos[0] });\n\n        yield put(\n          getPerformersVideosSuccess({\n            total: resp.data.total,\n            data,\n            ids\n          })\n        );\n      } catch (e) {\n        const err = getResponseError(e);\n        yield put(getPerformersVideosFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(videosSagas)]);\n"]},"metadata":{},"sourceType":"module"}