{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport { createSagas } from '@lib/redux';\nimport { flatten, omit } from 'lodash';\nimport { put, all, select } from 'redux-saga/effects';\nimport { performerCategories, performerService, videoService, productService, galleryService, earningService, payoutRequestService } from 'src/services';\nimport { photoService } from '@services/photo.service';\nimport { getPerformerCategoriesSuccess, getPerformerCategoriesFail, getPerformerCategories, searchPerformer, searchPerformerFail, searchPerformerSuccess, setPerformerSearching, updatePerformerProfile, updatePerformerProfileFail, updatePerformerProfileSuccess, setupdatingPerformerProfile, getPerformerDetails, getPerformerDetailsSuccess, getPerformerDetailsFail, setGettingPerformerDetails, getMyVideos, getMyVideosFail, getMyVideosSuccess, setgettingMyVideos, getMyProducts, getMyProductsSuccess, getMyProductsFail, setGettingMyProducts, getEarning, getEarningFail, getEarningSuccess, setGettingEarning, getMyPhotos, getMyPhotosSuccess, getMyPhotosFail, setgettingMyPhotos, getMyGalleries, getMyGalleriesSuccess, getMyGalleriesFail, setgettingMyGalleries, updatePaymentInfo, updateDirectDeposit, updateBitpay, updatePaxum, updateStreamingStatus, updateDefaultPrice, getPayoutRequest, setGettingPayoutRequest, getPayoutRequestSuccess, getPayoutRequestFail } from './actions';\nconst performerSaga = [{\n  on: getPerformerCategories,\n\n  *worker(data) {\n    try {\n      const resp = yield performerCategories.getList(data.payload);\n      yield put(getPerformerCategoriesSuccess(resp.data));\n    } catch (err) {\n      const error = yield Promise.resolve(err);\n      yield put(getPerformerCategoriesFail(error));\n    }\n  }\n\n}, {\n  on: searchPerformer,\n\n  *worker(action) {\n    try {\n      yield put(setPerformerSearching());\n      const resp = yield performerService.search(action.payload);\n      const currentPerformer = yield select(state => state.performer.current);\n      const data = resp.data.data.filter(p => p._id !== currentPerformer._id);\n      const total = currentPerformer !== null && currentPerformer !== void 0 && currentPerformer._id ? resp.data.total - 1 : resp.data.total;\n      yield put(searchPerformerSuccess({\n        data,\n        total\n      }));\n    } catch (err) {\n      const error = yield Promise.resolve(err);\n      yield put(searchPerformerFail(error));\n    }\n  }\n\n}, {\n  on: updatePerformerProfile,\n\n  *worker(data) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateMe(data.payload);\n      yield put(updatePerformerProfileSuccess(resp.data)); // if this is current user, reload user info?\n    } catch (e) {\n      // TODO - alert error\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: getPerformerDetails,\n\n  *worker(data) {\n    try {\n      yield put(setGettingPerformerDetails());\n      const [performerResponse, performerProductReponse, performerVideoResponse, performerGalleryResponse, relatedPerformerResponse] = yield all([performerService.details(data.payload.username), productService.search({\n        performerId: data.payload._id,\n        status: 'active'\n      }), videoService.search({\n        performerId: data.payload._id,\n        status: 'active'\n      }), galleryService.search({\n        performerId: data.payload._id,\n        status: 'active'\n      }, false), performerService.search({\n        status: 'active',\n        excludedId: data.payload._id,\n        limit: 12\n      })]);\n      const products = {};\n      const videos = {};\n      const galleries = {};\n      performerProductReponse.data.data.forEach(p => products[p._id] = p);\n      performerVideoResponse.data.data.forEach(v => videos[v._id] = v);\n      performerGalleryResponse.data.data.forEach(g => galleries[g._id] = g);\n      yield put(getPerformerDetailsSuccess({\n        performer: _objectSpread(_objectSpread({}, performerResponse.data), {}, {\n          products: performerProductReponse.data.data.map(p => p._id),\n          videos: performerVideoResponse.data.data.map(v => v._id),\n          galleries: performerGalleryResponse.data.data.map(g => g._id),\n          relatedPerformers: relatedPerformerResponse.data.data\n        }),\n        // photos,\n        videos,\n        products,\n        galleries\n      }));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getPerformerDetailsFail(err));\n    }\n  }\n\n}, {\n  on: getMyProducts,\n\n  *worker(action) {\n    try {\n      yield put(setGettingMyProducts());\n      const resp = yield performerService.myProduct(action.payload);\n      yield put(getMyProductsSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyProductsFail(err));\n    }\n  }\n\n}, {\n  on: getEarning,\n\n  *worker(action) {\n    try {\n      yield put(setGettingEarning());\n      let difDateQuery = false;\n      const earning = yield select(state => state.performer.earning);\n      const {\n        fromDate,\n        toDate\n      } = action.payload;\n      const query = omit(action.payload, ['fromDate', 'toDate']);\n\n      if (fromDate && toDate) {\n        query.fromDate = fromDate;\n        query.toDate = toDate;\n      }\n\n      if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n      const [resp, stats] = yield all([earningService.search(query), earning.stats && !difDateQuery ? earning.stats : earningService.stats(query)]);\n      yield put(getEarningSuccess(_objectSpread(_objectSpread({}, query), {}, {\n        stats,\n        data: resp.data\n      })));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getEarningFail(err));\n    }\n  }\n\n}, {\n  on: getPayoutRequest,\n\n  *worker(action) {\n    try {\n      yield put(setGettingPayoutRequest());\n      const [resp] = yield all([payoutRequestService.search(action.payload)]);\n      yield put(getPayoutRequestSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getPayoutRequestFail(err));\n    }\n  }\n\n}, {\n  on: getMyVideos,\n\n  *worker(action) {\n    try {\n      yield put(setgettingMyVideos());\n      const resp = yield videoService.myVideos(action.payload);\n      yield put(getMyVideosSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyVideosFail(err));\n    }\n  }\n\n}, {\n  on: getMyPhotos,\n\n  *worker(action) {\n    try {\n      yield put(setgettingMyPhotos());\n      const resp = yield photoService.myPhotos(action.payload);\n      yield put(getMyPhotosSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyPhotosFail(err));\n    }\n  }\n\n}, {\n  on: getMyGalleries,\n\n  *worker(action) {\n    try {\n      yield put(setgettingMyGalleries());\n      const resp = yield galleryService.search(action.payload);\n      yield put(getMyGalleriesSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMyGalleriesFail(err));\n    }\n  }\n\n}, {\n  on: updatePaymentInfo,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updatePaymentInfo(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateDirectDeposit,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateDirectDepost(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateBitpay,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateBitpay(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updatePaxum,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updatePaxum(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateStreamingStatus,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateStreamingStatus({\n        status: action.payload\n      });\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}, {\n  on: updateDefaultPrice,\n\n  *worker(action) {\n    try {\n      yield put(setupdatingPerformerProfile());\n      const resp = yield performerService.updateDefaultPrice(action.payload);\n      yield put(updatePerformerProfileSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updatePerformerProfileFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(performerSaga)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/performer/sagas.ts"],"names":["createSagas","flatten","omit","put","all","select","performerCategories","performerService","videoService","productService","galleryService","earningService","payoutRequestService","photoService","getPerformerCategoriesSuccess","getPerformerCategoriesFail","getPerformerCategories","searchPerformer","searchPerformerFail","searchPerformerSuccess","setPerformerSearching","updatePerformerProfile","updatePerformerProfileFail","updatePerformerProfileSuccess","setupdatingPerformerProfile","getPerformerDetails","getPerformerDetailsSuccess","getPerformerDetailsFail","setGettingPerformerDetails","getMyVideos","getMyVideosFail","getMyVideosSuccess","setgettingMyVideos","getMyProducts","getMyProductsSuccess","getMyProductsFail","setGettingMyProducts","getEarning","getEarningFail","getEarningSuccess","setGettingEarning","getMyPhotos","getMyPhotosSuccess","getMyPhotosFail","setgettingMyPhotos","getMyGalleries","getMyGalleriesSuccess","getMyGalleriesFail","setgettingMyGalleries","updatePaymentInfo","updateDirectDeposit","updateBitpay","updatePaxum","updateStreamingStatus","updateDefaultPrice","getPayoutRequest","setGettingPayoutRequest","getPayoutRequestSuccess","getPayoutRequestFail","performerSaga","on","worker","data","resp","getList","payload","err","error","Promise","resolve","action","search","currentPerformer","state","performer","current","filter","p","_id","total","updateMe","e","performerResponse","performerProductReponse","performerVideoResponse","performerGalleryResponse","relatedPerformerResponse","details","username","performerId","status","excludedId","limit","products","videos","galleries","forEach","v","g","map","relatedPerformers","myProduct","difDateQuery","earning","fromDate","toDate","query","stats","myVideos","myPhotos","updateDirectDepost"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport { createSagas } from '@lib/redux';\nimport { flatten, omit } from 'lodash';\nimport { put, all, select } from 'redux-saga/effects';\nimport {\n  IReduxAction,\n  IResponse,\n  IPerformSearch,\n  IPerformer,\n  IPerformerPaymentInfoUpdate,\n  IDataResponse,\n  IProduct,\n  IVideo,\n  IPerformerDirectDeposit,\n  IPerformerBitpay,\n  IPerformerPaxum,\n  IPerformerGallery,\n  IPerformerDefaultPrice\n} from 'src/interfaces';\nimport {\n  performerCategories,\n  performerService,\n  videoService,\n  productService,\n  galleryService,\n  earningService,\n  payoutRequestService\n} from 'src/services';\nimport { IPhoto } from 'src/interfaces/photo';\nimport { photoService } from '@services/photo.service';\nimport {\n  getPerformerCategoriesSuccess,\n  getPerformerCategoriesFail,\n  getPerformerCategories,\n  searchPerformer,\n  searchPerformerFail,\n  searchPerformerSuccess,\n  setPerformerSearching,\n  updatePerformerProfile,\n  updatePerformerProfileFail,\n  updatePerformerProfileSuccess,\n  setupdatingPerformerProfile,\n  getPerformerDetails,\n  getPerformerDetailsSuccess,\n  getPerformerDetailsFail,\n  setGettingPerformerDetails,\n  getMyVideos,\n  getMyVideosFail,\n  getMyVideosSuccess,\n  setgettingMyVideos,\n  getMyProducts,\n  getMyProductsSuccess,\n  getMyProductsFail,\n  setGettingMyProducts,\n  getEarning,\n  getEarningFail,\n  getEarningSuccess,\n  setGettingEarning,\n  getMyPhotos,\n  getMyPhotosSuccess,\n  getMyPhotosFail,\n  setgettingMyPhotos,\n  getMyGalleries,\n  getMyGalleriesSuccess,\n  getMyGalleriesFail,\n  setgettingMyGalleries,\n  updatePaymentInfo,\n  updateDirectDeposit,\n  updateBitpay,\n  updatePaxum,\n  updateStreamingStatus,\n  updateDefaultPrice,\n  getPayoutRequest,\n  setGettingPayoutRequest,\n  getPayoutRequestSuccess,\n  getPayoutRequestFail\n} from './actions';\n\nconst performerSaga = [\n  {\n    on: getPerformerCategories,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp: IResponse<any> = yield performerCategories.getList(\n          data.payload\n        );\n\n        yield put(getPerformerCategoriesSuccess(resp.data));\n      } catch (err) {\n        const error = yield Promise.resolve(err);\n        yield put(getPerformerCategoriesFail(error));\n      }\n    }\n  },\n  {\n    on: searchPerformer,\n    * worker(action: IReduxAction<IPerformSearch>) {\n      try {\n        yield put(setPerformerSearching());\n        const resp: IResponse<IDataResponse<\n          IPerformer\n        >> = yield performerService.search(action.payload);\n        const currentPerformer = yield select(\n          (state) => state.performer.current\n        );\n        const data = resp.data.data.filter((p) => p._id !== currentPerformer._id);\n        const total = currentPerformer?._id ? resp.data.total - 1 : resp.data.total;\n        yield put(searchPerformerSuccess({ data, total }));\n      } catch (err) {\n        const error = yield Promise.resolve(err);\n        yield put(searchPerformerFail(error));\n      }\n    }\n  },\n  {\n    on: updatePerformerProfile,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateMe(\n          data.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n        // if this is current user, reload user info?\n      } catch (e) {\n        // TODO - alert error\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: getPerformerDetails,\n    * worker(data: IReduxAction<IPerformer>) {\n      try {\n        yield put(setGettingPerformerDetails());\n        const [\n          performerResponse,\n          performerProductReponse,\n          performerVideoResponse,\n          performerGalleryResponse,\n          relatedPerformerResponse\n        ]: [\n          IResponse<IPerformer>,\n          IResponse<IDataResponse<IProduct>>,\n          IResponse<IDataResponse<IVideo>>,\n          IResponse<IDataResponse<IPerformerGallery>>,\n          IResponse<IDataResponse<IPerformer>>\n        ] = yield all([\n          performerService.details(data.payload.username),\n          productService.search({\n            performerId: data.payload._id,\n            status: 'active'\n          }),\n          videoService.search({\n            performerId: data.payload._id,\n            status: 'active'\n          }),\n          galleryService.search(\n            {\n              performerId: data.payload._id,\n              status: 'active'\n            },\n            false\n          ),\n          performerService.search({ status: 'active', excludedId: data.payload._id, limit: 12 })\n        ]);\n        const products: Record<string, IProduct> = {};\n        const videos: Record<string, IVideo> = {};\n        const galleries: Record<string, IPerformerGallery> = {};\n        performerProductReponse.data.data.forEach((p) => (products[p._id] = p));\n        performerVideoResponse.data.data.forEach((v) => (videos[v._id] = v));\n        performerGalleryResponse.data.data.forEach(\n          (g) => (galleries[g._id] = g)\n        );\n        yield put(\n          getPerformerDetailsSuccess({\n            performer: {\n              ...performerResponse.data,\n              products: performerProductReponse.data.data.map((p) => p._id),\n              videos: performerVideoResponse.data.data.map((v) => v._id),\n              galleries: performerGalleryResponse.data.data.map((g) => g._id),\n              relatedPerformers: relatedPerformerResponse.data.data\n            },\n            // photos,\n            videos,\n            products,\n            galleries\n          })\n        );\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPerformerDetailsFail(err));\n      }\n    }\n  },\n  {\n    on: getMyProducts,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingMyProducts());\n        const resp: IResponse<IDataResponse<\n          IProduct\n        >> = yield performerService.myProduct(action.payload);\n        yield put(getMyProductsSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyProductsFail(err));\n      }\n    }\n  },\n  {\n    on: getEarning,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingEarning());\n        let difDateQuery = false;\n        const earning = yield select((state) => state.performer.earning);\n        const { fromDate, toDate } = action.payload;\n        const query = omit(action.payload, ['fromDate', 'toDate']);\n        if (fromDate && toDate) {\n          query.fromDate = fromDate;\n          query.toDate = toDate;\n        }\n\n        if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n\n        const [resp, stats] = yield all([\n          earningService.search(query),\n          earning.stats && !difDateQuery\n            ? earning.stats\n            : earningService.stats(query)\n        ]);\n        yield put(getEarningSuccess({ ...query, stats, data: resp.data }));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getEarningFail(err));\n      }\n    }\n  },\n  {\n    on: getPayoutRequest,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingPayoutRequest());\n        const [resp] = yield all([payoutRequestService.search(action.payload)]);\n        yield put(getPayoutRequestSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPayoutRequestFail(err));\n      }\n    }\n  },\n  {\n    on: getMyVideos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setgettingMyVideos());\n        const resp: IResponse<IDataResponse<\n          IVideo\n        >> = yield videoService.myVideos(action.payload);\n        yield put(getMyVideosSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyVideosFail(err));\n      }\n    }\n  },\n  {\n    on: getMyPhotos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setgettingMyPhotos());\n        const resp: IResponse<IDataResponse<\n          IPhoto\n        >> = yield photoService.myPhotos(action.payload);\n        yield put(getMyPhotosSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyPhotosFail(err));\n      }\n    }\n  },\n  {\n    on: getMyGalleries,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setgettingMyGalleries());\n        const resp: IResponse<IDataResponse<\n          IPhoto\n        >> = yield galleryService.search(action.payload);\n        yield put(getMyGalleriesSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyGalleriesFail(err));\n      }\n    }\n  },\n  {\n    on: updatePaymentInfo,\n    * worker(action: IReduxAction<IPerformerPaymentInfoUpdate>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updatePaymentInfo(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateDirectDeposit,\n    * worker(action: IReduxAction<IPerformerDirectDeposit>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateDirectDepost(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateBitpay,\n    * worker(action: IReduxAction<IPerformerBitpay>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateBitpay(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updatePaxum,\n    * worker(action: IReduxAction<IPerformerPaxum>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updatePaxum(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateStreamingStatus,\n    * worker(action: IReduxAction<string>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateStreamingStatus(\n          { status: action.payload }\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateDefaultPrice,\n    * worker(action: IReduxAction<IPerformerDefaultPrice>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateDefaultPrice(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(performerSaga)]);\n"]},"metadata":{},"sourceType":"module"}