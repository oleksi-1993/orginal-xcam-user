{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getResponseError } from 'src/lib';\nimport { createSagas } from '@lib/redux';\nimport { productService } from '@services/product.service';\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { getPerformerProducts, getPerformerProductsSuccess, getPerformerProductsFail, gettingPerformerProduct } from './actions';\nconst productSagas = [{\n  on: getPerformerProducts,\n\n  *worker(action) {\n    try {\n      yield put(gettingPerformerProduct());\n      const resp = yield productService.search(action.payload);\n      const products = resp.data.data;\n      const ids = products.map(p => p._id);\n      const data = products.length && (products.length > 1 ? products.reduce((previousValue, currentValue, index) => {\n        if (index === 1) {\n          return {\n            [previousValue._id]: previousValue,\n            [currentValue._id]: currentValue\n          };\n        }\n\n        const value = _objectSpread({}, previousValue);\n\n        value[currentValue._id] = currentValue;\n        return value;\n      }) : {\n        [products[0]._id]: products[0]\n      });\n      yield put(getPerformerProductsSuccess({\n        data,\n        total: resp.data.total,\n        ids\n      }));\n    } catch (error) {\n      const err = getResponseError(error);\n      yield put(getPerformerProductsFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(productSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/products/sagas.ts"],"names":["getResponseError","createSagas","productService","flatten","put","getPerformerProducts","getPerformerProductsSuccess","getPerformerProductsFail","gettingPerformerProduct","productSagas","on","worker","action","resp","search","payload","products","data","ids","map","p","_id","length","reduce","previousValue","currentValue","index","value","total","error","err"],"mappings":";;;;;;AAAA,SAASA,gBAAT,QAAiC,SAAjC;AAEA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SACEC,oBADF,EAEEC,2BAFF,EAGEC,wBAHF,EAIEC,uBAJF,QAKO,WALP;AAOA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAEL,oBADN;;AAEE,GAAEM,MAAF,CAASC,MAAT,EAAoC;AAClC,QAAI;AACF,YAAMR,GAAG,CAACI,uBAAuB,EAAxB,CAAT;AACA,YAAMK,IAAuC,GAAG,MAAMX,cAAc,CAACY,MAAf,CAAsBF,MAAM,CAACG,OAA7B,CAAtD;AACA,YAAMC,QAAQ,GAAGH,IAAI,CAACI,IAAL,CAAUA,IAA3B;AACA,YAAMC,GAAG,GAAGF,QAAQ,CAACG,GAAT,CAAcC,CAAD,IAAOA,CAAC,CAACC,GAAtB,CAAZ;AACA,YAAMJ,IAAI,GAAGD,QAAQ,CAACM,MAAT,KAAoBN,QAAQ,CAACM,MAAT,GAAkB,CAAlB,GAAsBN,QAAQ,CAACO,MAAT,CAAgB,CAACC,aAAD,EAAgBC,YAAhB,EAA8BC,KAA9B,KAAwC;AAC7G,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,iBAAO;AAAE,aAACF,aAAa,CAACH,GAAf,GAAqBG,aAAvB;AAAsC,aAACC,YAAY,CAACJ,GAAd,GAAoBI;AAA1D,WAAP;AACD;;AAED,cAAME,KAAK,qBAAQH,aAAR,CAAX;;AACAG,QAAAA,KAAK,CAACF,YAAY,CAACJ,GAAd,CAAL,GAA0BI,YAA1B;AACA,eAAOE,KAAP;AACD,OARsD,CAAtB,GAQ5B;AAAE,SAACX,QAAQ,CAAC,CAAD,CAAR,CAAYK,GAAb,GAAmBL,QAAQ,CAAC,CAAD;AAA7B,OARQ,CAAb;AAUA,YAAMZ,GAAG,CAACE,2BAA2B,CAAC;AACpCW,QAAAA,IADoC;AAEpCW,QAAAA,KAAK,EAAEf,IAAI,CAACI,IAAL,CAAUW,KAFmB;AAGpCV,QAAAA;AAHoC,OAAD,CAA5B,CAAT;AAKD,KApBD,CAoBE,OAAOW,KAAP,EAAc;AACd,YAAMC,GAAG,GAAG9B,gBAAgB,CAAC6B,KAAD,CAA5B;AACA,YAAMzB,GAAG,CAACG,wBAAwB,CAACuB,GAAD,CAAzB,CAAT;AACD;AACF;;AA3BH,CADmB,CAArB;AAgCA,eAAe3B,OAAO,CAAC,CAACF,WAAW,CAACQ,YAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { getResponseError } from 'src/lib';\nimport { IResponse } from 'src/services/api-request';\nimport { createSagas } from '@lib/redux';\nimport { IReduxAction, IDataResponse, IProduct } from 'src/interfaces';\nimport { productService } from '@services/product.service';\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport {\n  getPerformerProducts,\n  getPerformerProductsSuccess,\n  getPerformerProductsFail,\n  gettingPerformerProduct\n} from './actions';\n\nconst productSagas = [\n  {\n    on: getPerformerProducts,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerProduct());\n        const resp:IResponse<IDataResponse<IProduct>> = yield productService.search(action.payload);\n        const products = resp.data.data;\n        const ids = products.map((p) => p._id);\n        const data = products.length && (products.length > 1 ? products.reduce((previousValue, currentValue, index) => {\n          if (index === 1) {\n            return { [previousValue._id]: previousValue, [currentValue._id]: currentValue };\n          }\n\n          const value = { ...previousValue };\n          value[currentValue._id] = currentValue;\n          return value;\n        }) : { [products[0]._id]: products[0] });\n\n        yield put(getPerformerProductsSuccess({\n          data,\n          total: resp.data.total,\n          ids\n        }));\n      } catch (error) {\n        const err = getResponseError(error);\n        yield put(getPerformerProductsFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(productSagas)]);\n"]},"metadata":{},"sourceType":"module"}