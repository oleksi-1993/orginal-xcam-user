{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { gettingPerformerVideos, getPerformersVideosFail, getPerformersVideosSuccess, addPerformerVideos } from './actions';\nconst initialState = {\n  ids: [],\n  data: {},\n  searching: false,\n  success: false,\n  error: null\n};\nconst videoReducers = [{\n  on: gettingPerformerVideos,\n\n  reducer() {\n    return _objectSpread(_objectSpread({}, initialState), {}, {\n      searching: true\n    });\n  }\n\n}, {\n  on: getPerformersVideosSuccess,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread(_objectSpread({}, state), action.payload), {}, {\n      searching: false,\n      success: true,\n      error: null\n    });\n  }\n\n}, {\n  on: getPerformersVideosFail,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      searching: false,\n      success: false,\n      error: action.payload\n    });\n  }\n\n}, {\n  on: addPerformerVideos,\n\n  reducer(state, action) {\n    const {\n      ids,\n      data\n    } = state;\n    const videos = action.payload;\n    videos.forEach(v => {\n      data[v._id] = v;\n      ids.push(v._id);\n    });\n    return _objectSpread({}, state);\n  }\n\n}];\nexport default merge({}, createReducers('videos', [videoReducers], initialState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/videos/reducers.ts"],"names":["createReducers","merge","gettingPerformerVideos","getPerformersVideosFail","getPerformersVideosSuccess","addPerformerVideos","initialState","ids","data","searching","success","error","videoReducers","on","reducer","state","action","payload","videos","forEach","v","_id","push"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,YAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,SACEC,sBADF,EAEEC,uBAFF,EAGEC,0BAHF,EAIEC,kBAJF,QAKO,WALP;AAOA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,GAAG,EAAE,EADc;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,SAAS,EAAE,KAHQ;AAInBC,EAAAA,OAAO,EAAE,KAJU;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAEX,sBADN;;AAEEY,EAAAA,OAAO,GAAG;AACR,2CACKR,YADL;AAEEG,MAAAA,SAAS,EAAE;AAFb;AAID;;AAPH,CADoB,EAUpB;AACEI,EAAAA,EAAE,EAAET,0BADN;;AAEEU,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAmC;AACxC,yDACKD,KADL,GAEKC,MAAM,CAACC,OAFZ;AAGER,MAAAA,SAAS,EAAE,KAHb;AAIEC,MAAAA,OAAO,EAAE,IAJX;AAKEC,MAAAA,KAAK,EAAE;AALT;AAOD;;AAVH,CAVoB,EAsBpB;AACEE,EAAAA,EAAE,EAAEV,uBADN;;AAEEW,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAmC;AACxC,2CACKD,KADL;AAEEN,MAAAA,SAAS,EAAE,KAFb;AAGEC,MAAAA,OAAO,EAAE,KAHX;AAIEC,MAAAA,KAAK,EAAEK,MAAM,CAACC;AAJhB;AAMD;;AATH,CAtBoB,EAiCpB;AACEJ,EAAAA,EAAE,EAAER,kBADN;;AAEES,EAAAA,OAAO,CAACC,KAAD,EAAQC,MAAR,EAAwC;AAC7C,UAAM;AAAET,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgBO,KAAtB;AACA,UAAMG,MAAM,GAAGF,MAAM,CAACC,OAAtB;AACAC,IAAAA,MAAM,CAACC,OAAP,CAAgBC,CAAD,IAAO;AACpBZ,MAAAA,IAAI,CAACY,CAAC,CAACC,GAAH,CAAJ,GAAcD,CAAd;AACAb,MAAAA,GAAG,CAACe,IAAJ,CAASF,CAAC,CAACC,GAAX;AACD,KAHD;AAIA,6BACKN,KADL;AAGD;;AAZH,CAjCoB,CAAtB;AAiDA,eAAed,KAAK,CAClB,EADkB,EAElBD,cAAc,CAAC,QAAD,EAAW,CAACY,aAAD,CAAX,EAA4BN,YAA5B,CAFI,CAApB","sourcesContent":["import { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { IReduxAction, IVideo } from 'src/interfaces';\nimport {\n  gettingPerformerVideos,\n  getPerformersVideosFail,\n  getPerformersVideosSuccess,\n  addPerformerVideos\n} from './actions';\n\nconst initialState = {\n  ids: [],\n  data: {},\n  searching: false,\n  success: false,\n  error: null\n};\n\nconst videoReducers = [\n  {\n    on: gettingPerformerVideos,\n    reducer() {\n      return {\n        ...initialState,\n        searching: true\n      };\n    }\n  },\n  {\n    on: getPerformersVideosSuccess,\n    reducer(state, action: IReduxAction<any>) {\n      return {\n        ...state,\n        ...action.payload,\n        searching: false,\n        success: true,\n        error: null\n      };\n    }\n  },\n  {\n    on: getPerformersVideosFail,\n    reducer(state, action: IReduxAction<any>) {\n      return {\n        ...state,\n        searching: false,\n        success: false,\n        error: action.payload\n      };\n    }\n  },\n  {\n    on: addPerformerVideos,\n    reducer(state, action: IReduxAction<IVideo[]>) {\n      const { ids, data } = state;\n      const videos = action.payload;\n      videos.forEach((v) => {\n        data[v._id] = v;\n        ids.push(v._id);\n      });\n      return {\n        ...state\n      };\n    }\n  }\n];\n\nexport default merge(\n  {},\n  createReducers('videos', [videoReducers], initialState)\n);\n"]},"metadata":{},"sourceType":"module"}