{"ast":null,"code":"import cookie from 'js-cookie';\nimport { APIRequest, TOKEN, ROLE } from './api-request';\nexport class AuthService extends APIRequest {\n  login(data) {\n    return this.post('/auth/users/login', data);\n  }\n\n  setAuthHeader(token, role) {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, {\n      expires: 365\n    });\n    cookie.set(ROLE, role, {\n      expires: 365\n    });\n    this.setAuthHeaderToken(token);\n  }\n\n  performerLogin(data) {\n    return this.post('/auth/performers/login', data);\n  }\n\n  studioLogin(data) {\n    return this.post('/auth/studio/login', data);\n  }\n\n  setToken(token) {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, {\n      expires: 365\n    });\n    this.setAuthHeaderToken(token);\n  }\n\n  getToken() {\n    const token = cookie.get(TOKEN);\n    return token || null;\n  }\n\n  getRole() {\n    const role = cookie.get(ROLE);\n    return role || null;\n  }\n\n  removeToken() {\n    cookie.remove(TOKEN);\n    cookie.remove(ROLE);\n  }\n\n  removeRemember() {\n    false && cookie.remove('rememberMe');\n  }\n\n  updatePassword(body) {\n    return this.put('/auth/users/me/password', body);\n  }\n\n  performersRegister(data) {\n    return this.register('/auth/performers/register', data);\n  }\n\n  userRegister(data) {\n    return this.post('/auth/users/register', data);\n  }\n\n  studioRegister(data) {\n    return this.register('/auth/studio/register', data);\n  }\n\n  forgotPassword(email, type) {\n    const data = {\n      email,\n      type\n    };\n    return this.post('/auth/users/forgot', data);\n  }\n\n  resendVerificationEmail(data) {\n    return this.post('/verification/resend-verification-email', data);\n  }\n\n}\nexport const authService = new AuthService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/auth.service.ts"],"names":["cookie","APIRequest","TOKEN","ROLE","AuthService","login","data","post","setAuthHeader","token","role","set","expires","setAuthHeaderToken","performerLogin","studioLogin","setToken","getToken","get","getRole","removeToken","remove","removeRemember","updatePassword","body","put","performersRegister","register","userRegister","studioRegister","forgotPassword","email","type","resendVerificationEmail","authService"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,WAAnB;AAOA,SACEC,UADF,EACcC,KADd,EACgCC,IADhC,QAEO,eAFP;AAIA,OAAO,MAAMC,WAAN,SAA0BH,UAA1B,CAAqC;AAC1CI,EAAAA,KAAK,CAACC,IAAD,EAAe;AAClB,WAAO,KAAKC,IAAL,CAAU,mBAAV,EAA+BD,IAA/B,CAAP;AACD;;AAEDE,EAAAA,aAAa,CAACC,KAAD,EAAgBC,IAAhB,EAA8B;AACzC;AACA;AACAV,IAAAA,MAAM,CAACW,GAAP,CAAWT,KAAX,EAAkBO,KAAlB,EAAyB;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAAzB;AACAZ,IAAAA,MAAM,CAACW,GAAP,CAAWR,IAAX,EAAiBO,IAAjB,EAAuB;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAvB;AACA,SAAKC,kBAAL,CAAwBJ,KAAxB;AACD;;AAEDK,EAAAA,cAAc,CAACR,IAAD,EAAwB;AACpC,WAAO,KAAKC,IAAL,CAAU,wBAAV,EAAoCD,IAApC,CAAP;AACD;;AAEDS,EAAAA,WAAW,CAACT,IAAD,EAAe;AACxB,WAAO,KAAKC,IAAL,CAAU,oBAAV,EAAgCD,IAAhC,CAAP;AACD;;AAEDU,EAAAA,QAAQ,CAACP,KAAD,EAAsB;AAC5B;AACA;AACAT,IAAAA,MAAM,CAACW,GAAP,CAAWT,KAAX,EAAkBO,KAAlB,EAAyB;AAAEG,MAAAA,OAAO,EAAE;AAAX,KAAzB;AACA,SAAKC,kBAAL,CAAwBJ,KAAxB;AACD;;AAEDQ,EAAAA,QAAQ,GAAW;AACjB,UAAMR,KAAK,GAAGT,MAAM,CAACkB,GAAP,CAAWhB,KAAX,CAAd;AACA,WAAOO,KAAK,IAAI,IAAhB;AACD;;AAEDU,EAAAA,OAAO,GAAW;AAChB,UAAMT,IAAI,GAAGV,MAAM,CAACkB,GAAP,CAAWf,IAAX,CAAb;AACA,WAAOO,IAAI,IAAI,IAAf;AACD;;AAEDU,EAAAA,WAAW,GAAS;AAClBpB,IAAAA,MAAM,CAACqB,MAAP,CAAcnB,KAAd;AACAF,IAAAA,MAAM,CAACqB,MAAP,CAAclB,IAAd;AACD;;AAEDmB,EAAAA,cAAc,GAAS;AACrB,aAAmBtB,MAAM,CAACqB,MAAP,CAAc,YAAd,CAAnB;AACD;;AAEDE,EAAAA,cAAc,CAACC,IAAD,EAA8C;AAC1D,WAAO,KAAKC,GAAL,CAAS,yBAAT,EAAoCD,IAApC,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAACpB,IAAD,EAAwC;AACxD,WAAO,KAAKqB,QAAL,CAAc,2BAAd,EAA2CrB,IAA3C,CAAP;AACD;;AAEDsB,EAAAA,YAAY,CAACtB,IAAD,EAAuD;AACjE,WAAO,KAAKC,IAAL,CAAU,sBAAV,EAAkCD,IAAlC,CAAP;AACD;;AAEDuB,EAAAA,cAAc,CAACvB,IAAD,EAAwC;AACpD,WAAO,KAAKqB,QAAL,CAAc,uBAAd,EAAuCrB,IAAvC,CAAP;AACD;;AAEDwB,EAAAA,cAAc,CAACC,KAAD,EAAgBC,IAAhB,EAA8B;AAC1C,UAAM1B,IAAI,GAAG;AACXyB,MAAAA,KADW;AAEXC,MAAAA;AAFW,KAAb;AAIA,WAAO,KAAKzB,IAAL,CAAU,oBAAV,EAAgCD,IAAhC,CAAP;AACD;;AAED2B,EAAAA,uBAAuB,CAAC3B,IAAD,EAAyC;AAC9D,WAAO,KAAKC,IAAL,CAAU,yCAAV,EAAqDD,IAArD,CAAP;AACD;;AAzEyC;AA4E5C,OAAO,MAAM4B,WAAW,GAAG,IAAI9B,WAAJ,EAApB","sourcesContent":["import cookie from 'js-cookie';\nimport {\n  ILogin,\n  IperformerLogin,\n  IRegisterFormData,\n  IUserRegisterFormData\n} from 'src/interfaces';\nimport {\n  APIRequest, TOKEN, IResponse, ROLE\n} from './api-request';\n\nexport class AuthService extends APIRequest {\n  login(data: ILogin) {\n    return this.post('/auth/users/login', data);\n  }\n\n  setAuthHeader(token: string, role: string) {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, { expires: 365 });\n    cookie.set(ROLE, role, { expires: 365 });\n    this.setAuthHeaderToken(token);\n  }\n\n  performerLogin(data: IperformerLogin) {\n    return this.post('/auth/performers/login', data);\n  }\n\n  studioLogin(data: ILogin) {\n    return this.post('/auth/studio/login', data);\n  }\n\n  setToken(token: string): void {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, { expires: 365 });\n    this.setAuthHeaderToken(token);\n  }\n\n  getToken(): string {\n    const token = cookie.get(TOKEN);\n    return token || null;\n  }\n\n  getRole(): string {\n    const role = cookie.get(ROLE);\n    return role || null;\n  }\n\n  removeToken(): void {\n    cookie.remove(TOKEN);\n    cookie.remove(ROLE);\n  }\n\n  removeRemember(): void {\n    process.browser && cookie.remove('rememberMe');\n  }\n\n  updatePassword(body: { password: string; source?: string }) {\n    return this.put('/auth/users/me/password', body);\n  }\n\n  performersRegister(data: IRegisterFormData): Promise<any> {\n    return this.register('/auth/performers/register', data);\n  }\n\n  userRegister(data: IUserRegisterFormData): Promise<IResponse<any>> {\n    return this.post('/auth/users/register', data);\n  }\n\n  studioRegister(data: IRegisterFormData): Promise<any> {\n    return this.register('/auth/studio/register', data);\n  }\n\n  forgotPassword(email: string, type: string) {\n    const data = {\n      email,\n      type\n    };\n    return this.post('/auth/users/forgot', data);\n  }\n\n  resendVerificationEmail(data: { email: string, source: string}) {\n    return this.post('/verification/resend-verification-email', data);\n  }\n}\n\nexport const authService = new AuthService();\n"]},"metadata":{},"sourceType":"module"}