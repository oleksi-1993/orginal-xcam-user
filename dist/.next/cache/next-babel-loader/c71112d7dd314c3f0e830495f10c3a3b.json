{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { logout } from '@redux/auth/actions';\nimport { updateCurrentUser, updateUserSuccess, updateUserFail, setUpdating, updateCurrentUserAvatar, updateCurrentUserBalance, setReducer, buyTokenSuccess, gettingFavoritePerformers, removeFavorite, getFavoritePerformersSuccess, getFavoritePerformersFailed, gettigPaymentTokenHistory, getPaymentTokenHistroyFail, getPaymentTokenHistroySuccess } from './actions';\nvar initialState = {\n  current: {\n    _id: null,\n    avatar: '/default-user-icon.png',\n    name: '',\n    email: ''\n  },\n  userUpdating: false,\n  updateUserSuccess: false,\n  updateUserError: null,\n  paymentTokenHistory: {\n    searching: false,\n    data: [],\n    total: 0,\n    error: null,\n    success: false\n  },\n  favourites: {\n    searching: false,\n    data: null,\n    total: 0,\n    error: null,\n    success: false\n  }\n};\nvar userReducers = [{\n  on: updateCurrentUser,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload\n    });\n  }\n}, {\n  on: updateCurrentUserAvatar,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        avatar: data.payload\n      })\n    });\n  }\n}, {\n  on: updateCurrentUserBalance,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        balance: state.current.balance + action.payload\n      })\n    });\n  }\n}, {\n  on: updateUserSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: data.payload,\n      updateUserSuccess: true,\n      userUpdating: false,\n      updateUserError: null\n    });\n  }\n}, {\n  on: updateUserFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      updateUserSuccess: false,\n      userUpdating: false,\n      updateUserError: data.payload\n    });\n  }\n}, {\n  on: setUpdating,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      userUpdating: true,\n      updateUserSuccess: false\n    });\n  }\n}, {\n  on: setReducer,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, data.payload.field, data.payload.data));\n  }\n}, {\n  on: buyTokenSuccess,\n  reducer: function reducer(state, data) {\n    var current = state.current;\n    current.balance += data.payload;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      current: _objectSpread(_objectSpread({}, state.current), {}, {\n        balance: current.balance\n      })\n    });\n  }\n}, {\n  on: gettingFavoritePerformers,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      favourites: _objectSpread(_objectSpread({}, state.favourites), {}, {\n        searching: true,\n        data: null,\n        total: 0,\n        error: null,\n        success: false\n      })\n    });\n  }\n}, {\n  on: getFavoritePerformersSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      favourites: _objectSpread(_objectSpread({}, state.favourites), {}, {\n        searching: false,\n        data: data.payload.data,\n        total: data.payload.total,\n        error: null,\n        success: true\n      })\n    });\n  }\n}, {\n  on: getFavoritePerformersFailed,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      favourites: _objectSpread(_objectSpread({}, state.favourites), {}, {\n        searching: false,\n        data: null,\n        total: 0,\n        error: data.payload.data,\n        success: false\n      })\n    });\n  }\n}, {\n  on: removeFavorite,\n  reducer: function reducer(state, action) {\n    var favourites = state.favourites;\n    favourites.data = favourites.data.filter(function (f) {\n      return f.performer._id !== action.payload;\n    });\n    return _objectSpread({}, state);\n  }\n}, {\n  on: gettigPaymentTokenHistory,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      paymentTokenHistory: _objectSpread(_objectSpread({}, state.paymentTokenHistory), {}, {\n        searching: true,\n        error: null,\n        success: false\n      })\n    });\n  }\n}, {\n  on: getPaymentTokenHistroySuccess,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      paymentTokenHistory: {\n        searching: false,\n        data: action.payload.data,\n        total: action.payload.total,\n        error: null,\n        success: true\n      }\n    });\n  }\n}, {\n  on: getPaymentTokenHistroyFail,\n  reducer: function reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      paymentTokenHistory: _objectSpread(_objectSpread({}, state.paymentTokenHistory), {}, {\n        searching: false,\n        error: action.payload,\n        success: false\n      })\n    });\n  }\n}, {\n  on: logout,\n  reducer: function reducer() {\n    return _objectSpread({}, initialState);\n  }\n}];\nexport default merge({}, createReducers('user', [userReducers], initialState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/user/reducers.ts"],"names":["merge","createReducers","logout","updateCurrentUser","updateUserSuccess","updateUserFail","setUpdating","updateCurrentUserAvatar","updateCurrentUserBalance","setReducer","buyTokenSuccess","gettingFavoritePerformers","removeFavorite","getFavoritePerformersSuccess","getFavoritePerformersFailed","gettigPaymentTokenHistory","getPaymentTokenHistroyFail","getPaymentTokenHistroySuccess","initialState","current","_id","avatar","name","email","userUpdating","updateUserError","paymentTokenHistory","searching","data","total","error","success","favourites","userReducers","on","reducer","state","payload","action","balance","field","filter","f","performer"],"mappings":"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","sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport {\n  IReduxAction,\n  IUser,\n  IReducerFieldUpdate,\n  IDataResponse,\n  IPerformer,\n  IFavourite\n} from 'src/interfaces';\nimport { logout } from '@redux/auth/actions';\nimport {\n  updateCurrentUser,\n  updateUserSuccess,\n  updateUserFail,\n  setUpdating,\n  updateCurrentUserAvatar,\n  updateCurrentUserBalance,\n  setReducer,\n  buyTokenSuccess,\n  gettingFavoritePerformers,\n  removeFavorite,\n  getFavoritePerformersSuccess,\n  getFavoritePerformersFailed,\n  gettigPaymentTokenHistory,\n  getPaymentTokenHistroyFail,\n  getPaymentTokenHistroySuccess\n} from './actions';\n\nconst initialState = {\n  current: {\n    _id: null,\n    avatar: '/default-user-icon.png',\n    name: '',\n    email: ''\n  },\n  userUpdating: false,\n  updateUserSuccess: false,\n  updateUserError: null,\n  paymentTokenHistory: {\n    searching: false,\n    data: [],\n    total: 0,\n    error: null,\n    success: false\n  },\n  favourites: {\n    searching: false,\n    data: null,\n    total: 0,\n    error: null,\n    success: false\n  }\n};\n\nconst userReducers = [\n  {\n    on: updateCurrentUser,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: data.payload\n      };\n    }\n  },\n  {\n    on: updateCurrentUserAvatar,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          avatar: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: updateCurrentUserBalance,\n    reducer(state, action: IReduxAction<number>) {\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          balance: state.current.balance + action.payload\n        }\n      };\n    }\n  },\n  {\n    on: updateUserSuccess,\n    reducer(state: any, data: IReduxAction<IUser>) {\n      return {\n        ...state,\n        current: data.payload,\n        updateUserSuccess: true,\n        userUpdating: false,\n        updateUserError: null\n      };\n    }\n  },\n  {\n    on: updateUserFail,\n    reducer(state, data) {\n      return {\n        ...state,\n        updateUserSuccess: false,\n        userUpdating: false,\n        updateUserError: data.payload\n      };\n    }\n  },\n  {\n    on: setUpdating,\n    reducer(state) {\n      return {\n        ...state,\n        userUpdating: true,\n        updateUserSuccess: false\n      };\n    }\n  },\n  {\n    on: setReducer,\n    reducer(state: any, data: IReduxAction<IReducerFieldUpdate<any>>) {\n      return {\n        ...state,\n        [data.payload.field]: data.payload.data\n      };\n    }\n  },\n  {\n    on: buyTokenSuccess,\n    reducer(state: any, data: any) {\n      const { current } = state;\n      current.balance += data.payload;\n      return {\n        ...state,\n        current: {\n          ...state.current,\n          balance: current.balance\n        }\n      };\n    }\n  },\n  {\n    on: gettingFavoritePerformers,\n    reducer(state) {\n      return {\n        ...state,\n        favourites: {\n          ...state.favourites,\n          searching: true,\n          data: null,\n          total: 0,\n          error: null,\n          success: false\n        }\n      };\n    }\n  },\n  {\n    on: getFavoritePerformersSuccess,\n    reducer(state: any, data: IReduxAction<IDataResponse<IPerformer>>) {\n      return {\n        ...state,\n        favourites: {\n          ...state.favourites,\n          searching: false,\n          data: data.payload.data,\n          total: data.payload.total,\n          error: null,\n          success: true\n        }\n      };\n    }\n  },\n  {\n    on: getFavoritePerformersFailed,\n    reducer(state: any, data: IReduxAction<IDataResponse<IPerformer>>) {\n      return {\n        ...state,\n        favourites: {\n          ...state.favourites,\n          searching: false,\n          data: null,\n          total: 0,\n          error: data.payload.data,\n          success: false\n        }\n      };\n    }\n  },\n  {\n    on: removeFavorite,\n    reducer(state, action: IReduxAction<string>) {\n      const { favourites } = state;\n      favourites.data = favourites.data.filter(\n        (f: IFavourite) => f.performer._id !== action.payload\n      );\n      return {\n        ...state\n      };\n    }\n  },\n  {\n    on: gettigPaymentTokenHistory,\n    reducer(state) {\n      return {\n        ...state,\n        paymentTokenHistory: {\n          ...state.paymentTokenHistory,\n          searching: true,\n          error: null,\n          success: false\n        }\n      };\n    }\n  },\n  {\n    on: getPaymentTokenHistroySuccess,\n    reducer(state, action: IReduxAction<IDataResponse<any>>) {\n      return {\n        ...state,\n        paymentTokenHistory: {\n          searching: false,\n          data: action.payload.data,\n          total: action.payload.total,\n          error: null,\n          success: true\n        }\n      };\n    }\n  },\n  {\n    on: getPaymentTokenHistroyFail,\n    reducer(state, action) {\n      return {\n        ...state,\n        paymentTokenHistory: {\n          ...state.paymentTokenHistory,\n          searching: false,\n          error: action.payload,\n          success: false\n        }\n      };\n    }\n  },\n  {\n    on: logout,\n    reducer() {\n      return {\n        ...initialState\n      };\n    }\n  }\n];\n\nexport default merge({}, createReducers('user', [userReducers], initialState));\n"]},"metadata":{},"sourceType":"module"}