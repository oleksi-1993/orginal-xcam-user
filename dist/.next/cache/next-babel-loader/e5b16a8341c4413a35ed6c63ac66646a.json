{"ast":null,"code":"import moment from 'moment';\nimport { message } from 'antd';\nimport { getResponseError } from 'src/lib';\nimport { APIRequest } from './api-request';\n\nclass StreamService extends APIRequest {\n  getSessionId(id, type) {\n    return this.get(`/streaming/session/${id}/${type}`);\n  }\n\n  goLive() {\n    return this.post('/streaming/live');\n  }\n\n  joinPublicChat(performerId) {\n    return this.post(`/streaming/join/${performerId}`);\n  }\n\n  requestPrivateChat(performerId) {\n    return this.post(`/streaming/private-chat/${performerId}`);\n  }\n\n  acceptPrivateChat(id) {\n    return this.get(`/streaming/private-chat/${id}`);\n  }\n\n  startGroupChat() {\n    return this.post('/streaming/group-chat');\n  }\n\n  joinGroupChat(id) {\n    return this.get(`/streaming/group-chat/${id}`);\n  }\n\n  generateOneTimeToken(data) {\n    return this.post('/streaming/token', data);\n  }\n\n  async getPublishToken(options, expireDate = moment().add(1, 'd').toDate().getTime()) {\n    try {\n      const {\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption\n      } = settings;\n\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'publish',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getSubscriberToken(options, expireDate = moment().add(1, 'd').toDate().getTime()) {\n    try {\n      const {\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption\n      } = settings;\n\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getLiveStreamOrVodURL(options, expireDate = moment().add(1, 'd').toDate().getTime(), _player = 'hls') {\n    // http://[IP_Address]/<Application_Name>/streams/streamID.mp4?token=tokenId\n    // http://[IP_Address]/<Application_Name>/streams/streamID.m3u8?token=tokenId\n    // http://[IP_Address]/<Application_Name>/play.html?name=streamID&playOrder=hls&token=tokenId\n    try {\n      // const src = `https://${viewerURL}:5443/${appName}/streams/${streamId}.m3u8${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n      // eslint-disable-next-line no-shadow\n      const {\n        appName,\n        settings,\n        streamId\n      } = options;\n      const {\n        secureOption,\n        viewerURL\n      } = settings;\n      const extension = _player === 'hls' ? 'm3u8' : 'mp4';\n\n      if (!viewerURL || !appName) {\n        return '';\n      }\n\n      let oneTimeToken = '';\n\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        oneTimeToken = resp.data.tokenId;\n      }\n\n      const {\n        protocol\n      } = window.location;\n      return `${protocol}//${viewerURL}/${appName}/streams/${streamId}.${extension}${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return '';\n    }\n  }\n\n}\n\nexport const streamService = new StreamService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/stream.service.tsx"],"names":["moment","message","getResponseError","APIRequest","StreamService","getSessionId","id","type","get","goLive","post","joinPublicChat","performerId","requestPrivateChat","acceptPrivateChat","startGroupChat","joinGroupChat","generateOneTimeToken","data","getPublishToken","options","expireDate","add","toDate","getTime","settings","streamId","secureOption","resp","tokenId","err","error","Promise","resolve","getSubscriberToken","getLiveStreamOrVodURL","_player","appName","viewerURL","extension","oneTimeToken","protocol","window","location","streamService"],"mappings":"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","sourcesContent":["import { IOneTimeToken, StreamSettings } from 'src/interfaces';\nimport moment from 'moment';\nimport { message } from 'antd';\nimport { getResponseError } from 'src/lib';\nimport { APIRequest } from './api-request';\n\nclass StreamService extends APIRequest {\n  getSessionId(id: string, type: string) {\n    return this.get(`/streaming/session/${id}/${type}`);\n  }\n\n  goLive() {\n    return this.post('/streaming/live');\n  }\n\n  joinPublicChat(performerId: string) {\n    return this.post(`/streaming/join/${performerId}`);\n  }\n\n  requestPrivateChat(performerId: string) {\n    return this.post(`/streaming/private-chat/${performerId}`);\n  }\n\n  acceptPrivateChat(id: string) {\n    return this.get(`/streaming/private-chat/${id}`);\n  }\n\n  startGroupChat() {\n    return this.post('/streaming/group-chat');\n  }\n\n  joinGroupChat(id: string) {\n    return this.get(`/streaming/group-chat/${id}`);\n  }\n\n  generateOneTimeToken(data: IOneTimeToken) {\n    return this.post('/streaming/token', data);\n  }\n\n  async getPublishToken(options: {\n    streamId: string,\n    settings: StreamSettings\n    }, expireDate = moment().add(1, 'd').toDate().getTime()): Promise<string> {\n    try {\n      const { settings, streamId } = options;\n      const { secureOption } = settings;\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'publish',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getSubscriberToken(options: {\n    streamId: string,\n    settings: StreamSettings\n    }, expireDate = moment().add(1, 'd').toDate().getTime()): Promise<string> {\n    try {\n      const { settings, streamId } = options;\n      const { secureOption } = settings;\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        return resp.data.tokenId;\n      }\n\n      return null;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return null;\n    }\n  }\n\n  async getLiveStreamOrVodURL(options: {\n    streamId: string,\n    settings: StreamSettings,\n    appName: string\n    }, expireDate = moment().add(1, 'd').toDate().getTime(), _player = 'hls') {\n    // http://[IP_Address]/<Application_Name>/streams/streamID.mp4?token=tokenId\n    // http://[IP_Address]/<Application_Name>/streams/streamID.m3u8?token=tokenId\n    // http://[IP_Address]/<Application_Name>/play.html?name=streamID&playOrder=hls&token=tokenId\n    try {\n      // const src = `https://${viewerURL}:5443/${appName}/streams/${streamId}.m3u8${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n      // eslint-disable-next-line no-shadow\n      const { appName, settings, streamId } = options;\n      const { secureOption, viewerURL } = settings;\n      const extension = _player === 'hls' ? 'm3u8' : 'mp4';\n      if (!viewerURL || !appName) {\n        return '';\n      }\n\n      let oneTimeToken = '';\n      if (secureOption) {\n        const resp = await this.generateOneTimeToken({\n          id: streamId,\n          type: 'play',\n          expireDate\n        });\n        oneTimeToken = resp.data.tokenId;\n      }\n\n      const { protocol } = window.location;\n      return `${protocol}//${viewerURL}/${appName}/streams/${streamId}.${extension}${oneTimeToken ? `?token=${oneTimeToken}` : ''}`;\n    } catch (err) {\n      const error = await Promise.resolve(err);\n      message.error(getResponseError(error));\n      return '';\n    }\n  }\n}\n\nexport const streamService = new StreamService();\n"]},"metadata":{},"sourceType":"module"}