{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { bannerService } from 'src/services';\nimport { getBanners, getBannersSuccess, getBannersFail } from './actions';\nvar bannerSagas = [{\n  on: getBanners,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return bannerService.search(data.payload);\n\n          case 3:\n            resp = _context.sent;\n            _context.next = 6;\n            return put(getBannersSuccess(resp.data));\n\n          case 6:\n            _context.next = 15;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 12;\n            return Promise.resolve(_context.t0);\n\n          case 12:\n            error = _context.sent;\n            _context.next = 15;\n            return put(getBannersFail(error));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}];\nexport default flatten([createSagas(bannerSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/banner/sagas.ts"],"names":["flatten","put","createSagas","bannerService","getBanners","getBannersSuccess","getBannersFail","bannerSagas","on","worker","data","search","payload","resp","Promise","resolve","error"],"mappings":";AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,cAAxC,QAA8D,WAA9D;AAEA,IAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,EAAE,EAAEJ,UADN;AAEIK,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAImB,mBAAMP,aAAa,CAACQ,MAAd,CAAqBD,IAAI,CAACE,OAA1B,CAAN;;AAJnB;AAIYC,YAAAA,IAJZ;AAAA;AAKM,mBAAMZ,GAAG,CAACI,iBAAiB,CAACQ,IAAI,CAACH,IAAN,CAAlB,CAAT;;AALN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOoB,mBAAMI,OAAO,CAACC,OAAR,aAAN;;AAPpB;AAOYC,YAAAA,KAPZ;AAAA;AAQM,mBAAMf,GAAG,CAACK,cAAc,CAACU,KAAD,CAAf,CAAT;;AARN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADkB,CAApB;AAeA,eAAehB,OAAO,CAAC,CAACE,WAAW,CAACK,WAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { bannerService } from 'src/services';\nimport { IReduxAction } from 'src/interfaces';\nimport { getBanners, getBannersSuccess, getBannersFail } from './actions';\n\nconst bannerSagas = [\n  {\n    on: getBanners,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield bannerService.search(data.payload);\n        yield put(getBannersSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(getBannersFail(error));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(bannerSagas)]);\n"]},"metadata":{},"sourceType":"module"}