{"ast":null,"code":"import { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { settingService } from 'src/services';\nimport { flatten } from 'lodash';\nimport { getCountries, updateSettings } from './actions';\nconst settingSagas = [{\n  on: getCountries,\n\n  *worker() {\n    try {\n      const countries = yield select(state => state.settings.countries);\n      if (countries && countries.length) return;\n      const resp = yield settingService.getCountries();\n      yield put(updateSettings({\n        countries: resp.data\n      }));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(e);\n    }\n  }\n\n}];\nexport default flatten([createSagas(settingSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/settings/sagas.ts"],"names":["put","select","createSagas","settingService","flatten","getCountries","updateSettings","settingSagas","on","worker","countries","state","settings","length","resp","data","e","console","log"],"mappings":"AAAA,SAASA,GAAT,EAAcC,MAAd,QAA4B,oBAA5B;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,WAA7C;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAEH,YADN;;AAEE,GAAEI,MAAF,GAAW;AACT,QAAI;AACF,YAAMC,SAAS,GAAG,MAAMT,MAAM,CAAEU,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeF,SAA3B,CAA9B;AACA,UAAIA,SAAS,IAAIA,SAAS,CAACG,MAA3B,EAAmC;AACnC,YAAMC,IAAoB,GAAG,MAAMX,cAAc,CAACE,YAAf,EAAnC;AACA,YAAML,GAAG,CAACM,cAAc,CAAC;AAAEI,QAAAA,SAAS,EAAEI,IAAI,CAACC;AAAlB,OAAD,CAAf,CAAT;AACD,KALD,CAKE,OAAOC,CAAP,EAAU;AACV;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;;AAZH,CADmB,CAArB;AAiBA,eAAeZ,OAAO,CAAC,CAACF,WAAW,CAACK,YAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { IResponse } from 'src/interfaces';\nimport { settingService } from 'src/services';\nimport { flatten } from 'lodash';\nimport { getCountries, updateSettings } from './actions';\n\nconst settingSagas = [\n  {\n    on: getCountries,\n    * worker() {\n      try {\n        const countries = yield select((state) => state.settings.countries);\n        if (countries && countries.length) return;\n        const resp: IResponse<any> = yield settingService.getCountries();\n        yield put(updateSettings({ countries: resp.data }));\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log(e);\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(settingSagas)]);\n"]},"metadata":{},"sourceType":"module"}