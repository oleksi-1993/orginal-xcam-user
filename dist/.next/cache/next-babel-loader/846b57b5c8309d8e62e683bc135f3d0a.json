{"ast":null,"code":"import { TOKEN } from 'src/services/api-request';\nimport { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport class VideoService extends APIRequest {\n  search(params) {\n    return this.get(this.buildUrl('/user/performer-assets/videos/search', params));\n  }\n\n  purchased(params) {\n    return this.get(this.buildUrl('/purchased-items/user/videos', params));\n  }\n\n  details(id, headers) {\n    return this.get(`/performer/performer-assets/videos/${id}/view`, headers);\n  }\n\n  myVideos(query) {\n    return this.get(this.buildUrl('/performer/performer-assets/videos/search', query));\n  }\n\n  removeMyVideo(id) {\n    return this.del(`/performer/performer-assets/videos/${id}`);\n  }\n\n  create(url, data, options = {\n    onProgress() {}\n\n  }) {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.video) {\n        const video = data.video.file.originFileObj;\n        formData.append('video', video, video.name);\n      }\n\n      if (data.trailer) {\n        const trailer = data.trailer.file.originFileObj;\n        formData.append('trailer', trailer, trailer.name);\n      }\n\n      if (data.thumbnail) {\n        const thumbnail = data.thumbnail.file.originFileObj;\n        formData.append('thumbnail', thumbnail, thumbnail.name);\n      }\n\n      Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  update(url, data, options = {\n    onProgress() {}\n\n  }) {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.video && data.video.file) {\n        const video = data.video.file.originFileObj;\n        formData.append('video', video, video.name);\n      }\n\n      if (data.trailer && data.trailer.file) {\n        const trailer = data.trailer.file.originFileObj;\n        formData.append('trailer', trailer, trailer.name);\n      }\n\n      if (data.thumbnail && data.thumbnail.file) {\n        const thumbnail = data.thumbnail.file.originFileObj;\n        formData.append('thumbnail', thumbnail, thumbnail.name);\n      }\n\n      Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  increaseView(id) {\n    return this.post(`/user/performer-assets/videos/${id}/inc-view`);\n  } // update(videoId, performerId, data) {\n  //   return this.put(`/performer/performer-assets/videos/${videoId}`, {\n  //     ...data,\n  //     performerId\n  //   });\n  // }\n\n\n  userFindVideoById(id, headers = {}) {\n    return this.get(`/user/performer-assets/videos/${id}`, headers);\n  }\n\n}\nexport const videoService = new VideoService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/video.service.ts"],"names":["TOKEN","omit","isUrl","cookie","APIRequest","getGlobalConfig","VideoService","search","params","get","buildUrl","purchased","details","id","headers","myVideos","query","removeMyVideo","del","create","url","data","options","onProgress","config","Promise","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentage","loaded","total","success","status","response","formData","FormData","video","file","originFileObj","append","name","trailer","thumbnail","Object","keys","forEach","v","responseType","open","NEXT_PUBLIC_API_ENDPOINT","token","setRequestHeader","send","update","increaseView","post","userFindVideoById","videoService"],"mappings":"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","sourcesContent":["import { IResponse, IPerformerVideoPayload } from 'src/interfaces';\nimport { TOKEN } from 'src/services/api-request';\nimport { omit } from 'lodash';\nimport { isUrl } from '@lib/string';\nimport cookie from 'js-cookie';\nimport { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class VideoService extends APIRequest {\n  search(params?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/user/performer-assets/videos/search', params)\n    );\n  }\n\n  purchased(params?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/purchased-items/user/videos', params)\n    );\n  }\n\n  details(id: string, headers?: { [key: string]: string }) {\n    return this.get(`/performer/performer-assets/videos/${id}/view`, headers);\n  }\n\n  myVideos(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/videos/search', query)\n    );\n  }\n\n  removeMyVideo(id: string) {\n    return this.del(`/performer/performer-assets/videos/${id}`);\n  }\n\n  create(\n    url: string,\n    data: IPerformerVideoPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.video) {\n        const video = data.video.file.originFileObj;\n        formData.append('video', video, video.name);\n      }\n\n      if (data.trailer) {\n        const trailer = data.trailer.file.originFileObj;\n        formData.append('trailer', trailer, trailer.name);\n      }\n\n      if (data.thumbnail) {\n        const thumbnail = data.thumbnail.file.originFileObj;\n        formData.append('thumbnail', thumbnail, thumbnail.name);\n      }\n\n      Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach(\n        (v) => {\n          formData.append(v, data[v]);\n        }\n      );\n\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  update(\n    url: string,\n    data: IPerformerVideoPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.video && data.video.file) {\n        const video = data.video.file.originFileObj;\n        formData.append('video', video, video.name);\n      }\n\n      if (data.trailer && data.trailer.file) {\n        const trailer = data.trailer.file.originFileObj;\n        formData.append('trailer', trailer, trailer.name);\n      }\n\n      if (data.thumbnail && data.thumbnail.file) {\n        const thumbnail = data.thumbnail.file.originFileObj;\n        formData.append('thumbnail', thumbnail, thumbnail.name);\n      }\n\n      Object.keys(omit(data, ['video', 'thumbnail', 'trailer'])).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  increaseView(id: string) {\n    return this.post(`/user/performer-assets/videos/${id}/inc-view`);\n  }\n\n  // update(videoId, performerId, data) {\n  //   return this.put(`/performer/performer-assets/videos/${videoId}`, {\n  //     ...data,\n  //     performerId\n  //   });\n  // }\n  userFindVideoById(id: string, headers = {}) {\n    return this.get(`/user/performer-assets/videos/${id}`, headers);\n  }\n}\n\nexport const videoService = new VideoService();\n"]},"metadata":{},"sourceType":"module"}