{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { getResponseError } from 'src/lib';\nimport { galleryService } from 'src/services';\nimport { getPerformerGalleries, getPerformerGalleriesSuccess, getPerformerGalleriesFail, gettingPerformerGalleries } from './actions';\nvar galleriedSagas = [{\n  on: getPerformerGalleries,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, galleries, ids, data, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(gettingPerformerGalleries());\n\n          case 3:\n            _context.next = 5;\n            return galleryService.search(action.payload, false);\n\n          case 5:\n            resp = _context.sent;\n            galleries = resp.data.data;\n            ids = galleries.map(function (g) {\n              return g._id;\n            });\n            data = galleries.length && (galleries.length > 1 ? galleries.reduce(function (previousValue, currentValue, index) {\n              if (index === 1) {\n                var _ref;\n\n                return _ref = {}, _defineProperty(_ref, previousValue._id, previousValue), _defineProperty(_ref, currentValue._id, currentValue), _ref;\n              }\n\n              var value = _objectSpread({}, previousValue);\n\n              value[currentValue._id] = currentValue;\n              return value;\n            }) : _defineProperty({}, galleries[0]._id, galleries[0]));\n            _context.next = 11;\n            return put(getPerformerGalleriesSuccess({\n              data: data,\n              ids: ids,\n              total: resp.data.total\n            }));\n\n          case 11:\n            _context.next = 20;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 17;\n            return getResponseError(_context.t0);\n\n          case 17:\n            err = _context.sent;\n            _context.next = 20;\n            return put(getPerformerGalleriesFail(err));\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 13]]);\n  })\n}];\nexport default flatten([createSagas(galleriedSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/galleries/sagas.ts"],"names":["put","flatten","createSagas","getResponseError","galleryService","getPerformerGalleries","getPerformerGalleriesSuccess","getPerformerGalleriesFail","gettingPerformerGalleries","galleriedSagas","on","worker","action","search","payload","resp","galleries","data","ids","map","g","_id","length","reduce","previousValue","currentValue","index","value","total","err"],"mappings":";;;;;;;AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAOA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SACEC,qBADF,EAEEC,4BAFF,EAGEC,yBAHF,EAIEC,yBAJF,QAKO,WALP;AAOA,IAAMC,cAAc,GAAG,CACrB;AACEC,EAAAA,EAAE,EAAEL,qBADN;AAEIM,EAAAA,MAFJ,wDAEWC,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMZ,GAAG,CAACQ,yBAAyB,EAA1B,CAAT;;AAJN;AAAA;AAKkD,mBAAMJ,cAAc,CAACS,MAAf,CAChDD,MAAM,CAACE,OADyC,EAEhD,KAFgD,CAAN;;AALlD;AAKYC,YAAAA,IALZ;AAUYC,YAAAA,SAVZ,GAUwBD,IAAI,CAACE,IAAL,CAAUA,IAVlC;AAWYC,YAAAA,GAXZ,GAWkBF,SAAS,CAACG,GAAV,CAAc,UAACC,CAAD;AAAA,qBAA0BA,CAAC,CAACC,GAA5B;AAAA,aAAd,CAXlB;AAYYJ,YAAAA,IAZZ,GAYmBD,SAAS,CAACM,MAAV,KAAqBN,SAAS,CAACM,MAAV,GAAmB,CAAnB,GAAuBN,SAAS,CAACO,MAAV,CAAiB,UAACC,aAAD,EAAgBC,YAAhB,EAA8BC,KAA9B,EAAwC;AAChH,kBAAIA,KAAK,KAAK,CAAd,EAAiB;AAAA;;AACf,wDAAUF,aAAa,CAACH,GAAxB,EAA8BG,aAA9B,yBAA8CC,YAAY,CAACJ,GAA3D,EAAiEI,YAAjE;AACD;;AAED,kBAAME,KAAK,qBAAQH,aAAR,CAAX;;AACAG,cAAAA,KAAK,CAACF,YAAY,CAACJ,GAAd,CAAL,GAA0BI,YAA1B;AACA,qBAAOE,KAAP;AACD,aARwD,CAAvB,uBAQ1BX,SAAS,CAAC,CAAD,CAAT,CAAaK,GARa,EAQPL,SAAS,CAAC,CAAD,CARF,CAArB,CAZnB;AAAA;AAsBM,mBAAMhB,GAAG,CACPM,4BAA4B,CAAC;AAC3BW,cAAAA,IAAI,EAAJA,IAD2B;AAE3BC,cAAAA,GAAG,EAAHA,GAF2B;AAG3BU,cAAAA,KAAK,EAAEb,IAAI,CAACE,IAAL,CAAUW;AAHU,aAAD,CADrB,CAAT;;AAtBN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA8BkB,mBAAMzB,gBAAgB,aAAtB;;AA9BlB;AA8BY0B,YAAAA,GA9BZ;AAAA;AA+BM,mBAAM7B,GAAG,CAACO,yBAAyB,CAACsB,GAAD,CAA1B,CAAT;;AA/BN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADqB,CAAvB;AAsCA,eAAe5B,OAAO,CAAC,CAACC,WAAW,CAACO,cAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport {\n  IReduxAction,\n  IResponse,\n  IDataResponse,\n  IPerformerGallery\n} from 'src/interfaces';\nimport { getResponseError } from 'src/lib';\nimport { galleryService } from 'src/services';\nimport {\n  getPerformerGalleries,\n  getPerformerGalleriesSuccess,\n  getPerformerGalleriesFail,\n  gettingPerformerGalleries\n} from './actions';\n\nconst galleriedSagas = [\n  {\n    on: getPerformerGalleries,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerGalleries());\n        const resp: IResponse<IDataResponse<any>> = yield galleryService.search(\n          action.payload,\n          false\n        );\n\n        const galleries = resp.data.data;\n        const ids = galleries.map((g: IPerformerGallery) => g._id);\n        const data = galleries.length && (galleries.length > 1 ? galleries.reduce((previousValue, currentValue, index) => {\n          if (index === 1) {\n            return { [previousValue._id]: previousValue, [currentValue._id]: currentValue };\n          }\n\n          const value = { ...previousValue };\n          value[currentValue._id] = currentValue;\n          return value;\n        }) : { [galleries[0]._id]: galleries[0] });\n\n        yield put(\n          getPerformerGalleriesSuccess({\n            data,\n            ids,\n            total: resp.data.total\n          })\n        );\n      } catch (error) {\n        const err = yield getResponseError(error);\n        yield put(getPerformerGalleriesFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(galleriedSagas)]);\n"]},"metadata":{},"sourceType":"module"}