{"ast":null,"code":"/* eslint-disable prefer-spread */\nimport { getGlobalConfig } from '@services/config';\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\n\nexport var warning = function warning() {\n  var config = getGlobalConfig(); // debug on development and staging.\n\n  if (config.NODE_ENV === 'production') return;\n  /* eslint-disable no-console */\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error.apply(console, args);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(args.join(' '));\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n\n};\nexport var debug = function debug() {\n  var config = getGlobalConfig(); // debug on development and staging.\n\n  if (config.NODE_ENV === 'production') return;\n  /* eslint-disable no-console */\n\n  if (typeof console !== 'undefined' && typeof console.debug === 'function') {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    console.debug.apply(console, args);\n  }\n};","map":{"version":3,"sources":["E:/programData/React/user/src/socket/utils.ts"],"names":["getGlobalConfig","warning","config","NODE_ENV","args","console","error","apply","Error","join","e","debug"],"mappings":"AAAA;AAEA,SAASA,eAAT,QAAgC,kBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAa;AAClC,MAAMC,MAAM,GAAGF,eAAe,EAA9B,CADkC,CAElC;;AACA,MAAIE,MAAM,CAACC,QAAP,KAAoB,YAAxB,EAAsC;AAEtC;;AALkC,oCAATC,IAAS;AAATA,IAAAA,IAAS;AAAA;;AAMlC,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACC,KAAf,KAAyB,UAA/D,EAA2E;AACzED,IAAAA,OAAO,CAACC,KAAR,CAAcC,KAAd,CAAoBF,OAApB,EAA6BD,IAA7B;AACD;AACD;;;AACA,MAAI;AACF;AACA;AACA;AAEA,UAAM,IAAII,KAAJ,CAAUJ,IAAI,CAACK,IAAL,CAAU,GAAV,CAAV,CAAN;AACA;AACD,GAPD,CAOE,OAAOC,CAAP,EAAU,CAAE;AACd;;AACD,CAnBM;AAqBP,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAa;AAChC,MAAMT,MAAM,GAAGF,eAAe,EAA9B,CADgC,CAEhC;;AACA,MAAIE,MAAM,CAACC,QAAP,KAAoB,YAAxB,EAAsC;AAEtC;;AACA,MAAI,OAAOE,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACM,KAAf,KAAyB,UAA/D,EAA2E;AAAA,uCANpDP,IAMoD;AANpDA,MAAAA,IAMoD;AAAA;;AACzEC,IAAAA,OAAO,CAACM,KAAR,CAAcJ,KAAd,CAAoBF,OAApB,EAA6BD,IAA7B;AACD;AACF,CATM","sourcesContent":["/* eslint-disable prefer-spread */\n\nimport { getGlobalConfig } from '@services/config';\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport const warning = (...args) => {\n  const config = getGlobalConfig();\n  // debug on development and staging.\n  if (config.NODE_ENV === 'production') return;\n\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error.apply(console, args);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n\n    throw new Error(args.join(' '));\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n};\n\nexport const debug = (...args) => {\n  const config = getGlobalConfig();\n  // debug on development and staging.\n  if (config.NODE_ENV === 'production') return;\n\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.debug === 'function') {\n    console.debug.apply(console, args);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}