{"ast":null,"code":"var _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\src\\\\components\\\\messages\\\\ConversationList.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport './ConversationList.less';\nimport { getConversations, setActiveConversation, getConversationDetail, receiveMessageSuccess, searchConversations, updateLastMessage } from '@redux/message/actions';\nimport { Event } from 'src/socket';\nimport { debounce } from 'lodash';\nimport { messageService } from '@services/message.service';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\n\nclass ConversationList extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"conversationsRef\", void 0);\n\n    _defineProperty(this, \"state\", {\n      conversationPage: 1,\n      keyword: ''\n    });\n\n    _defineProperty(this, \"onMessage\", async message => {\n      if (!message) {\n        return;\n      }\n\n      const {\n        conversation,\n        currentPerformer,\n        currentUser,\n        getConversationDetail: getConversationDetailHandler,\n        receiveMessageSuccess: receiveMessageSuccessHandler,\n        updateLastMessage: handleUpdateLastMessage\n      } = this.props;\n      const {\n        mapping\n      } = conversation;\n      const {\n        conversationId,\n        text\n      } = message;\n\n      if (!mapping[message.conversationId]) {\n        getConversationDetailHandler({\n          id: message.conversationId\n        });\n      }\n\n      receiveMessageSuccessHandler(message);\n      handleUpdateLastMessage({\n        conversationId,\n        lastMessage: text\n      });\n      await messageService.readAllInConversation(conversationId, currentUser._id ? currentUser._id : currentPerformer._id);\n    });\n\n    _defineProperty(this, \"onSearchConversation\", debounce(async e => {\n      const {\n        value\n      } = e.target;\n      const {\n        searchConversations: getConversationsHandler\n      } = this.props;\n      await this.setState({\n        keyword: value,\n        conversationPage: 0\n      });\n\n      if (value) {\n        return getConversationsHandler({\n          keyword: value,\n          limit: 25,\n          offset: 0,\n          type: 'private'\n        });\n      }\n\n      return getConversationsHandler({\n        limit: 25,\n        offset: 0,\n        type: 'private'\n      });\n    }, 500));\n\n    _defineProperty(this, \"handleScroll\", async event => {\n      const {\n        conversation,\n        getConversations: getConversationsHandler\n      } = this.props;\n      const {\n        requesting,\n        data,\n        total\n      } = conversation.list;\n      const {\n        conversationPage,\n        keyword\n      } = this.state;\n      const canloadmore = total > data.length;\n      const ele = event.target;\n      if (!canloadmore) return;\n\n      if (ele.scrollHeight - ele.scrollTop === ele.clientHeight && !requesting && canloadmore) {\n        this.setState({\n          conversationPage: conversationPage + 1\n        }, () => {\n          getConversationsHandler({\n            keyword,\n            limit: 25,\n            offset: conversationPage * 25,\n            type: 'private'\n          });\n        });\n      }\n    });\n\n    _defineProperty(this, \"setActive\", conversationId => {\n      const {\n        setActiveConversation: setActiveConversationHandler,\n        currentPerformer,\n        currentUser\n      } = this.props;\n      setActiveConversationHandler({\n        conversationId,\n        recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n      });\n    });\n  }\n\n  async componentDidMount() {\n    if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n    const {\n      getConversations: getConversationsHandler,\n      setActiveConversation: setActiveConversationHandler,\n      toSource,\n      toId,\n      currentUser,\n      currentPerformer\n    } = this.props;\n    const {\n      conversationPage,\n      keyword\n    } = this.state;\n    getConversationsHandler({\n      limit: 25,\n      offset: conversationPage * 25,\n      type: 'private',\n      keyword\n    });\n\n    if (toSource && toId) {\n      setTimeout(() => {\n        setActiveConversationHandler({\n          source: toSource,\n          sourceId: toId,\n          recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n        });\n      }, 1000);\n    }\n  }\n\n  render() {\n    const {\n      conversation\n    } = this.props;\n    const {\n      data: conversations,\n      requesting\n    } = conversation.list;\n    const {\n      mapping,\n      activeConversation = {}\n    } = conversation;\n    if (!this.conversationsRef) this.conversationsRef = /*#__PURE__*/createRef();\n    return __jsx(\"div\", {\n      className: \"conversation-list\",\n      ref: this.conversationsRef,\n      onScroll: this.handleScroll.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, __jsx(Event, {\n      event: \"message_created\",\n      handler: this.onMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), __jsx(\"h4\", {\n      className: \"text-center\",\n      style: {\n        fontSize: '22px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, \"Messenger\"), __jsx(ConversationSearch, {\n      onSearch: e => {\n        e.persist();\n        this.onSearchConversation(e);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }\n    }), conversations.length > 0 && conversations.map(conversationId => __jsx(ConversationListItem, {\n      key: conversationId,\n      data: mapping[conversationId],\n      setActive: this.setActive.bind(this),\n      selected: activeConversation._id === conversationId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    })), requesting && __jsx(\"div\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }\n    }, __jsx(\"img\", {\n      alt: \"loading\",\n      src: \"/loading-ico.gif\",\n      width: \"50px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    })), !requesting && !conversations.length && __jsx(\"p\", {\n      className: \"text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 50\n      }\n    }, \"No conversation found.\"));\n  }\n\n}\n\nconst mapStates = state => ({\n  conversation: state.conversation,\n  message: state.message,\n  currentUser: state.user.current,\n  currentPerformer: state.performer.current\n});\n\nconst mapDispatch = {\n  searchConversations,\n  getConversations,\n  setActiveConversation,\n  getConversationDetail,\n  receiveMessageSuccess,\n  updateLastMessage\n};\nexport default connect(mapStates, mapDispatch)(ConversationList);","map":{"version":3,"sources":["E:/programData/React/user/src/components/messages/ConversationList.tsx"],"names":["React","PureComponent","createRef","connect","getConversations","setActiveConversation","getConversationDetail","receiveMessageSuccess","searchConversations","updateLastMessage","Event","debounce","messageService","ConversationSearch","ConversationListItem","ConversationList","constructor","props","conversationPage","keyword","message","conversation","currentPerformer","currentUser","getConversationDetailHandler","receiveMessageSuccessHandler","handleUpdateLastMessage","mapping","conversationId","text","id","lastMessage","readAllInConversation","_id","e","value","target","getConversationsHandler","setState","limit","offset","type","event","requesting","data","total","list","state","canloadmore","length","ele","scrollHeight","scrollTop","clientHeight","setActiveConversationHandler","recipientId","componentDidMount","conversationsRef","toSource","toId","setTimeout","source","sourceId","render","conversations","activeConversation","handleScroll","bind","onMessage","fontSize","persist","onSearchConversation","map","setActive","mapStates","user","current","performer","mapDispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent, createRef } from 'react';\nimport { connect } from 'react-redux';\nimport './ConversationList.less';\nimport {\n  getConversations,\n  setActiveConversation,\n  getConversationDetail,\n  receiveMessageSuccess,\n  searchConversations,\n  updateLastMessage\n} from '@redux/message/actions';\nimport { Event } from 'src/socket';\nimport { debounce } from 'lodash';\nimport { IUser, IPerformer } from 'src/interfaces';\nimport { messageService } from '@services/message.service';\nimport ConversationSearch from './ConversationSearch';\nimport ConversationListItem from './ConversationListItem';\n\ninterface IProps {\n  searchConversations: Function;\n  getConversations: Function;\n  setActiveConversation: Function;\n  getConversationDetail: Function;\n  receiveMessageSuccess: Function;\n  updateLastMessage: Function;\n  conversation: {\n    list: {\n      requesting: boolean;\n      error: any;\n      data: any[];\n      total: number;\n      success: boolean;\n    };\n    mapping: Record<string, any>;\n    activeConversation: Record<string, any>;\n  };\n  toSource: string;\n  toId: string;\n  message: {\n    conversationMap: {\n\n    },\n    sendMessage: {\n\n    }\n  },\n  currentUser: IUser;\n  currentPerformer: IPerformer\n}\nclass ConversationList extends PureComponent<IProps> {\n  conversationsRef: any;\n\n  constructor(props) {\n    super(props);\n  }\n\n  state = {\n    conversationPage: 1,\n    keyword: ''\n  }\n\n  async componentDidMount() {\n    if (!this.conversationsRef) this.conversationsRef = createRef();\n    const {\n      getConversations: getConversationsHandler,\n      setActiveConversation: setActiveConversationHandler,\n      toSource,\n      toId,\n      currentUser,\n      currentPerformer\n    } = this.props;\n    const { conversationPage, keyword } = this.state;\n    getConversationsHandler({\n      limit: 25, offset: conversationPage * 25, type: 'private', keyword\n    });\n    if (toSource && toId) {\n      setTimeout(() => {\n        setActiveConversationHandler({\n          source: toSource,\n          sourceId: toId,\n          recipientId: currentUser._id ? currentUser._id : currentPerformer._id\n        });\n      }, 1000);\n    }\n  }\n\n  onMessage = async (message: { conversationId: string | number; text: any }) => {\n    if (!message) {\n      return;\n    }\n    const {\n      conversation,\n      currentPerformer,\n      currentUser,\n      getConversationDetail: getConversationDetailHandler,\n      receiveMessageSuccess: receiveMessageSuccessHandler,\n      updateLastMessage: handleUpdateLastMessage\n    } = this.props;\n    const { mapping } = conversation;\n    const { conversationId, text } = message;\n    if (!mapping[message.conversationId]) {\n      getConversationDetailHandler({\n        id: message.conversationId\n      });\n    }\n    receiveMessageSuccessHandler(message);\n    handleUpdateLastMessage({ conversationId, lastMessage: text });\n    await messageService.readAllInConversation(conversationId, currentUser._id ? currentUser._id : currentPerformer._id);\n  };\n\n  onSearchConversation = debounce(async (e) => {\n    const { value } = e.target;\n    const { searchConversations: getConversationsHandler } = this.props;\n    await this.setState({ keyword: value, conversationPage: 0 });\n    if (value) {\n      return getConversationsHandler({\n        keyword: value, limit: 25, offset: 0, type: 'private'\n      });\n    }\n    return getConversationsHandler({ limit: 25, offset: 0, type: 'private' });\n  }, 500);\n\n  handleScroll = async (event: { target: any; }) => {\n    const { conversation, getConversations: getConversationsHandler } = this.props;\n    const { requesting, data, total } = conversation.list;\n    const { conversationPage, keyword } = this.state;\n    const canloadmore = total > data.length;\n    const ele = event.target;\n    if (!canloadmore) return;\n    if (ele.scrollHeight - ele.scrollTop === ele.clientHeight && !requesting && canloadmore) {\n      this.setState({ conversationPage: conversationPage + 1 }, () => {\n        getConversationsHandler({\n          keyword, limit: 25, offset: conversationPage * 25, type: 'private'\n        });\n      });\n    }\n  }\n\n  setActive = (conversationId: any) => {\n    const {\n      setActiveConversation: setActiveConversationHandler,\n      currentPerformer,\n      currentUser\n    } = this.props;\n    setActiveConversationHandler({ conversationId, recipientId: currentUser._id ? currentUser._id : currentPerformer._id });\n  };\n\n  render() {\n    const { conversation } = this.props;\n    const { data: conversations, requesting } = conversation.list;\n    const { mapping, activeConversation = {} } = conversation;\n    if (!this.conversationsRef) this.conversationsRef = createRef();\n    return (\n      <div className=\"conversation-list\" ref={this.conversationsRef} onScroll={this.handleScroll.bind(this)}>\n        <Event event=\"message_created\" handler={this.onMessage} />\n        <h4 className=\"text-center\" style={{ fontSize: '22px' }}>Messenger</h4>\n        <ConversationSearch\n          onSearch={(e) => {\n            e.persist();\n            this.onSearchConversation(e);\n          }}\n        />\n        {conversations.length > 0\n          && conversations.map((conversationId) => (\n            <ConversationListItem\n              key={conversationId}\n              data={mapping[conversationId]}\n              setActive={this.setActive.bind(this)}\n              selected={activeConversation._id === conversationId}\n            />\n          ))}\n        {requesting && (\n        <div className=\"text-center\">\n          <img alt=\"loading\" src=\"/loading-ico.gif\" width=\"50px\" />\n        </div>\n        )}\n        {!requesting && !conversations.length && <p className=\"text-center\">No conversation found.</p>}\n      </div>\n    );\n  }\n}\n\nconst mapStates = (state: any) => ({\n  conversation: state.conversation,\n  message: state.message,\n  currentUser: state.user.current,\n  currentPerformer: state.performer.current\n});\n\nconst mapDispatch = {\n  searchConversations,\n  getConversations,\n  setActiveConversation,\n  getConversationDetail,\n  receiveMessageSuccess,\n  updateLastMessage\n};\nexport default connect(mapStates, mapDispatch)(ConversationList);\n"]},"metadata":{},"sourceType":"module"}