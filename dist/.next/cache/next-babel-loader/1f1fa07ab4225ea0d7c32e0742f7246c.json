{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { merge, findIndex } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, sendStreamMessage, sendStreamMessageSuccess, sendStreamMessageFail, receiveStreamMessageSuccess, loadMoreStreamMessagesSuccess, loadStreamMessagesSuccess, resetStreamMessage, resetAllStreamMessage, deleteMessageSuccess, resetStreamConversation } from './actions';\nvar initialMessageState = {\n  activeConversation: {},\n  sendMessage: {\n    sending: false\n  },\n  receiveMessage: {},\n  conversationMap: {}\n};\nvar streamMessageReducer = [{\n  on: getStreamConversation,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: _objectSpread(_objectSpread({}, state.activeConversation), {}, {\n        fetching: true\n      })\n    });\n  }\n}, {\n  on: getStreamConversationSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {\n        fetching: false,\n        data: data.payload.data\n      }\n    });\n  }\n}, {\n  on: fetchingStreamMessage,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var conversationId = data.payload.conversationId;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadStreamMessagesSuccess,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var _data$payload = data.payload,\n        conversationId = _data$payload.conversationId,\n        items = _data$payload.items,\n        total = _data$payload.total;\n    conversationMap[conversationId] = {\n      items: _toConsumableArray(items.reverse()),\n      total: total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: loadMoreStreamMessagesSuccess,\n  reducer: function reducer(state, data) {\n    var conversationMap = state.conversationMap;\n    var _data$payload2 = data.payload,\n        conversationId = _data$payload2.conversationId,\n        items = _data$payload2.items,\n        total = _data$payload2.total;\n    conversationMap[conversationId] = {\n      items: [].concat(_toConsumableArray(items.reverse()), _toConsumableArray(conversationMap[conversationId].items || [])),\n      total: total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n}, {\n  on: sendStreamMessage,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true,\n        success: false,\n        data: null\n      }\n    });\n  }\n}, {\n  on: sendStreamMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n}, {\n  on: sendStreamMessageFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n}, {\n  on: receiveStreamMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    var conversationId = data.payload.conversationId;\n\n    if (!nextState.conversationMap[conversationId] || !nextState.conversationMap[conversationId].items) {\n      nextState.conversationMap[conversationId] = {\n        items: []\n      };\n    }\n\n    nextState.conversationMap[conversationId].items = [].concat(_toConsumableArray(nextState.conversationMap[conversationId].items), [data.payload]);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n}, {\n  on: resetStreamConversation,\n  reducer: function reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: {}\n    });\n  }\n}, {\n  on: resetStreamMessage,\n  reducer: function reducer(state) {\n    var nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false\n      },\n      receiveMessage: {},\n      conversationMap: {}\n    });\n  }\n}, {\n  on: resetAllStreamMessage,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    var conversationId = data.payload.conversationId;\n    nextState.conversationMap[conversationId] = {\n      items: []\n    };\n    return _objectSpread({}, nextState);\n  }\n}, {\n  on: deleteMessageSuccess,\n  reducer: function reducer(state, data) {\n    var nextState = _objectSpread({}, state);\n\n    var _data$payload3 = data.payload,\n        conversationId = _data$payload3.conversationId,\n        _id = _data$payload3._id;\n    var i = findIndex(nextState.conversationMap[conversationId].items, function (item) {\n      return item && item._id === _id;\n    });\n\n    if (nextState.conversationMap[conversationId].items && nextState.conversationMap[conversationId].items[i]) {\n      nextState.conversationMap[conversationId].items[i].text = 'Message deleted';\n      nextState.conversationMap[conversationId].items[i].isDeleted = true;\n    }\n\n    return _objectSpread({}, nextState);\n  }\n}];\nexport default merge({}, createReducers('streamMessage', [streamMessageReducer], initialMessageState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/stream-chat/reducers.ts"],"names":["merge","findIndex","createReducers","getStreamConversation","getStreamConversationSuccess","fetchingStreamMessage","sendStreamMessage","sendStreamMessageSuccess","sendStreamMessageFail","receiveStreamMessageSuccess","loadMoreStreamMessagesSuccess","loadStreamMessagesSuccess","resetStreamMessage","resetAllStreamMessage","deleteMessageSuccess","resetStreamConversation","initialMessageState","activeConversation","sendMessage","sending","receiveMessage","conversationMap","streamMessageReducer","on","reducer","state","fetching","data","payload","conversationId","items","total","reverse","success","nextState","error","_id","i","item","text","isDeleted"],"mappings":"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","sourcesContent":["import { merge, findIndex } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction } from 'src/interfaces';\nimport {\n  getStreamConversation,\n  getStreamConversationSuccess,\n  fetchingStreamMessage,\n  sendStreamMessage,\n  sendStreamMessageSuccess,\n  sendStreamMessageFail,\n  receiveStreamMessageSuccess,\n  loadMoreStreamMessagesSuccess,\n  loadStreamMessagesSuccess,\n  resetStreamMessage,\n  resetAllStreamMessage,\n  deleteMessageSuccess,\n  resetStreamConversation\n} from './actions';\n\nconst initialMessageState = {\n  activeConversation: {\n  },\n  sendMessage: {\n    sending: false\n  },\n  receiveMessage: {},\n  conversationMap: {}\n};\n\nconst streamMessageReducer = [\n  {\n    on: getStreamConversation,\n    reducer(state: any) {\n      return {\n        ...state,\n        activeConversation: { ...state.activeConversation, fetching: true }\n      };\n    }\n  },\n  {\n    on: getStreamConversationSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        activeConversation: {\n          fetching: false,\n          data: data.payload.data\n        }\n      };\n    }\n  },\n  {\n    on: fetchingStreamMessage,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId } = data.payload;\n      conversationMap[conversationId] = {\n        ...conversationMap[conversationId],\n        fetching: true\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadStreamMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [...items.reverse()],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadMoreStreamMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [\n          ...items.reverse(),\n          ...conversationMap[conversationId].items || []\n        ],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: sendStreamMessage,\n    reducer(state: any) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: true,\n          success: false,\n          data: null\n        }\n      };\n    }\n  },\n  {\n    on: sendStreamMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false,\n          success: true,\n          data: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: sendStreamMessageFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: false,\n          success: false,\n          error: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: receiveStreamMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { conversationId } = data.payload;\n      if (!nextState.conversationMap[conversationId] || !nextState.conversationMap[conversationId].items) {\n        nextState.conversationMap[conversationId] = {\n          items: []\n        };\n      }\n\n      nextState.conversationMap[conversationId].items = [...nextState.conversationMap[conversationId].items, data.payload];\n      return {\n        ...nextState,\n        receiveMessage: data.payload\n      };\n    }\n  },\n  {\n    on: resetStreamConversation,\n    reducer(state) {\n      return {\n        ...state,\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: resetStreamMessage,\n    reducer(state: any) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false\n        },\n        receiveMessage: {},\n        conversationMap: {}\n      };\n    }\n  },\n  {\n    on: resetAllStreamMessage,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { conversationId } = data.payload;\n      nextState.conversationMap[conversationId] = {\n        items: []\n      };\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: deleteMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { conversationId, _id } = data.payload;\n      const i = findIndex(nextState.conversationMap[conversationId].items, (item: any) => item && item._id === _id);\n      if (nextState.conversationMap[conversationId].items && nextState.conversationMap[conversationId].items[i]) {\n        nextState.conversationMap[conversationId].items[i].text = 'Message deleted';\n        nextState.conversationMap[conversationId].items[i].isDeleted = true;\n      }\n      return {\n        ...nextState\n      };\n    }\n  }\n];\n\nexport default merge(\n  {},\n  createReducers('streamMessage', [streamMessageReducer], initialMessageState)\n);\n"]},"metadata":{},"sourceType":"module"}