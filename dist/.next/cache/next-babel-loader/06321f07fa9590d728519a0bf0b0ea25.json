{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, favouriteService, purchaseItemService } from '@services/index';\nimport { updateUser, updateUserSuccess, updateUserFail, setUpdating, getFavoritePerformers, getFavoritePerformersSuccess, getFavoritePerformersFailed, gettingFavoritePerformers, getPaymentTokenHistroy, getPaymentTokenHistroySuccess, getPaymentTokenHistroyFail, gettigPaymentTokenHistory } from './actions';\nconst userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n\n  *worker(data) {\n    try {\n      yield put(setUpdating());\n      const updated = yield userService.updateMe(data.payload);\n      yield put(updateUserSuccess(updated.data)); // if this is current user, reload user info?\n    } catch (e) {\n      // TODO - alert error\n      const err = yield Promise.resolve(e);\n      yield put(updateUserFail(err));\n    }\n  }\n\n}, {\n  on: getFavoritePerformers,\n\n  *worker(action) {\n    try {\n      yield put(gettingFavoritePerformers());\n      const resp = yield favouriteService.search(action.payload);\n      yield put(getFavoritePerformersSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getFavoritePerformersFailed(err));\n    }\n  }\n\n}, {\n  on: getPaymentTokenHistroy,\n\n  *worker(action) {\n    try {\n      yield put(gettigPaymentTokenHistory());\n      const resp = yield purchaseItemService.search(action.payload);\n      yield put(getPaymentTokenHistroySuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getPaymentTokenHistroyFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(userSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/user/sagas.ts"],"names":["flatten","put","createSagas","userService","favouriteService","purchaseItemService","updateUser","updateUserSuccess","updateUserFail","setUpdating","getFavoritePerformers","getFavoritePerformersSuccess","getFavoritePerformersFailed","gettingFavoritePerformers","getPaymentTokenHistroy","getPaymentTokenHistroySuccess","getPaymentTokenHistroyFail","gettigPaymentTokenHistory","userSagas","on","worker","data","updated","updateMe","payload","e","err","Promise","resolve","action","resp","search"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,mBAAxC,QAAmE,iBAAnE;AAIA,SACEC,UADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,qBALF,EAMEC,4BANF,EAOEC,2BAPF,EAQEC,yBARF,EASEC,sBATF,EAUEC,6BAVF,EAWEC,0BAXF,EAYEC,yBAZF,QAaO,WAbP;AAeA,MAAMC,SAAS,GAAG,CAChB;AACA;AACEC,EAAAA,EAAE,EAAEb,UADN;;AAEE,GAAEc,MAAF,CAASC,IAAT,EAAkC;AAChC,QAAI;AACF,YAAMpB,GAAG,CAACQ,WAAW,EAAZ,CAAT;AACA,YAAMa,OAAO,GAAG,MAAMnB,WAAW,CAACoB,QAAZ,CAAqBF,IAAI,CAACG,OAA1B,CAAtB;AACA,YAAMvB,GAAG,CAACM,iBAAiB,CAACe,OAAO,CAACD,IAAT,CAAlB,CAAT,CAHE,CAIF;AACD,KALD,CAKE,OAAOI,CAAP,EAAU;AACV;AACA,YAAMC,GAAG,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,CAAhB,CAAlB;AACA,YAAMxB,GAAG,CAACO,cAAc,CAACkB,GAAD,CAAf,CAAT;AACD;AACF;;AAbH,CAFgB,EAiBhB;AACEP,EAAAA,EAAE,EAAET,qBADN;;AAEE,GAAEU,MAAF,CAASS,MAAT,EAAoC;AAClC,QAAI;AACF,YAAM5B,GAAG,CAACY,yBAAyB,EAA1B,CAAT;AACA,YAAMiB,IAA0C,GAAG,MAAM1B,gBAAgB,CAAC2B,MAAjB,CAAwBF,MAAM,CAACL,OAA/B,CAAzD;AACA,YAAMvB,GAAG,CAACU,4BAA4B,CAACmB,IAAI,CAACT,IAAN,CAA7B,CAAT;AACD,KAJD,CAIE,OAAOI,CAAP,EAAU;AACV,YAAMC,GAAG,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,CAAhB,CAAlB;AACA,YAAMxB,GAAG,CAACW,2BAA2B,CAACc,GAAD,CAA5B,CAAT;AACD;AACF;;AAXH,CAjBgB,EA8BhB;AACEP,EAAAA,EAAE,EAAEL,sBADN;;AAEE,GAAEM,MAAF,CAASS,MAAT,EAAoC;AAClC,QAAI;AACF,YAAM5B,GAAG,CAACgB,yBAAyB,EAA1B,CAAT;AACA,YAAMa,IAA0C,GAAG,MAAMzB,mBAAmB,CAAC0B,MAApB,CAA2BF,MAAM,CAACL,OAAlC,CAAzD;AACA,YAAMvB,GAAG,CAACc,6BAA6B,CAACe,IAAI,CAACT,IAAN,CAA9B,CAAT;AACD,KAJD,CAIE,OAAOI,CAAP,EAAU;AACV,YAAMC,GAAG,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,CAAhB,CAAlB;AACA,YAAMxB,GAAG,CAACe,0BAA0B,CAACU,GAAD,CAA3B,CAAT;AACD;AACF;;AAXH,CA9BgB,CAAlB;AA6CA,eAAe1B,OAAO,CAAC,CAACE,WAAW,CAACgB,SAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, favouriteService, purchaseItemService } from '@services/index';\nimport {\n  IReduxAction, IResponse, IDataResponse, IPerformer\n} from 'src/interfaces';\nimport {\n  updateUser,\n  updateUserSuccess,\n  updateUserFail,\n  setUpdating,\n  getFavoritePerformers,\n  getFavoritePerformersSuccess,\n  getFavoritePerformersFailed,\n  gettingFavoritePerformers,\n  getPaymentTokenHistroy,\n  getPaymentTokenHistroySuccess,\n  getPaymentTokenHistroyFail,\n  gettigPaymentTokenHistory\n} from './actions';\n\nconst userSagas = [\n  // TODO - defind update current user or get from auth user info to reload current user data if needed\n  {\n    on: updateUser,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating());\n        const updated = yield userService.updateMe(data.payload);\n        yield put(updateUserSuccess(updated.data));\n        // if this is current user, reload user info?\n      } catch (e) {\n        // TODO - alert error\n        const err = yield Promise.resolve(e);\n        yield put(updateUserFail(err));\n      }\n    }\n  },\n  {\n    on: getFavoritePerformers,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingFavoritePerformers());\n        const resp: IResponse<IDataResponse<IPerformer>> = yield favouriteService.search(action.payload);\n        yield put(getFavoritePerformersSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getFavoritePerformersFailed(err));\n      }\n    }\n  },\n  {\n    on: getPaymentTokenHistroy,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettigPaymentTokenHistory());\n        const resp: IResponse<IDataResponse<IPerformer>> = yield purchaseItemService.search(action.payload);\n        yield put(getPaymentTokenHistroySuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPaymentTokenHistroyFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(userSagas)]);\n"]},"metadata":{},"sourceType":"module"}