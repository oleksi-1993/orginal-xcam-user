{"ast":null,"code":"var _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\pages\\\\account\\\\user\\\\account-settings\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { message, Tabs } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport UserProfile from '@components/user/profile';\nimport Head from 'next/head';\nimport { settingService } from 'src/services/setting.service';\nimport { userService } from 'src/services/user.service';\nimport { updateUser } from 'src/redux/user/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\nimport './index.less';\n\nclass UserProfilePage extends PureComponent {\n  static getInitialProps({\n    ctx\n  }) {\n    const {\n      query\n    } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      uploadedAvatar: '',\n      avatarUploading: false\n    };\n  }\n\n  componentDidMount() {\n    const {\n      action\n    } = this.props;\n    if (!action || action === 'account-information') this.getCountries();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      success,\n      updateUserError,\n      auth,\n      action\n    } = this.props;\n    const {\n      countries\n    } = this.state;\n\n    if (prevProps.success !== success && success) {\n      message.success('Update Profile Success.');\n    }\n\n    if (prevProps.updateUserError !== updateUserError && updateUserError) {\n      message.error(getResponseError(updateUserError));\n    }\n\n    if (prevProps.auth.updatePassword.success !== auth.updatePassword.success && auth.updatePassword.success) {\n      message.success('Update Password Success.');\n    }\n\n    if (prevProps.auth.updatePassword.error !== auth.updatePassword.error && auth.updatePassword.error) {\n      message.error(getResponseError(auth.updatePassword.error));\n    }\n\n    if (!countries.length && action === 'account-information') {\n      this.getCountries();\n    }\n  }\n\n  onFinish(data) {\n    const {\n      user,\n      updateUser: dispatchUpdateUser\n    } = this.props;\n    dispatchUpdateUser(_objectSpread(_objectSpread({}, user), data));\n  }\n\n  onChangeAvatar({\n    file\n  }) {\n    if (file.status === 'uploading') {\n      this.setState({\n        avatarUploading: true\n      });\n      return;\n    }\n\n    if (file.status === 'done') {\n      this.setState({\n        avatarUploading: false\n      });\n\n      if (file.response) {\n        this.setState({\n          uploadedAvatar: file.response.data.url\n        });\n      }\n    }\n  }\n\n  onTabsChange(key) {\n    Router.push({\n      pathname: '/account/user/account-settings',\n      query: {\n        action: key\n      }\n    }, `/account/user/account-settings?action=${key}`, {\n      shallow: false\n    });\n  }\n\n  onPasswordChange(data) {\n    const {\n      updatePassword: dispatchUpdatePassword\n    } = this.props;\n    dispatchUpdatePassword(data);\n  }\n\n  async getCountries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({\n        countries: countries.data\n      });\n    } catch (error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  render() {\n    const {\n      user,\n      action,\n      auth,\n      userUpdating\n    } = this.props;\n    const {\n      countries,\n      uploadedAvatar,\n      avatarUploading\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, `${user.username} Profile`)), __jsx(\"div\", {\n      className: \"account-setting-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }\n    }, __jsx(PageHeader, {\n      title: \"Account Settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }\n    }), __jsx(Tabs, {\n      activeKey: action || 'account-information',\n      style: {\n        padding: '0 24px'\n      },\n      size: \"large\",\n      onChange: this.onTabsChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, __jsx(Tabs.TabPane, {\n      tab: \"Account Information\",\n      key: \"account-information\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, __jsx(UserProfile, _extends({}, user, {\n      onFinish: this.onFinish.bind(this),\n      countries: countries,\n      onChangeAvatar: this.onChangeAvatar.bind(this),\n      uploadAvatarUrl: userService.getAvatarUploadUrl(),\n      uploadedAvatar: uploadedAvatar,\n      avatarUploading: avatarUploading,\n      loading: userUpdating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }))), __jsx(Tabs.TabPane, {\n      key: \"change-password\",\n      tab: \"Change Password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, __jsx(PasswordChange, _extends({\n      onFinish: this.onPasswordChange.bind(this)\n    }, auth.updatePassword, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }))))));\n  }\n\n}\n\n_defineProperty(UserProfilePage, \"authenticate\", true);\n\n_defineProperty(UserProfilePage, \"layout\", 'primary');\n\nconst mapStateToProps = state => ({\n  user: state.user.current,\n  userUpdating: state.user.userUpdating,\n  success: state.user.updateUserSuccess,\n  updateUserError: state.user.updateUserError,\n  auth: state.auth\n});\n\nconst mapDispatch = {\n  updateUser,\n  updatePassword\n};\nexport default connect(mapStateToProps, mapDispatch)(UserProfilePage);","map":{"version":3,"sources":["E:/programData/React/user/pages/account/user/account-settings/index.tsx"],"names":["React","PureComponent","message","Tabs","PageHeader","connect","UserProfile","Head","settingService","userService","updateUser","updatePassword","getResponseError","Router","PasswordChange","UserProfilePage","getInitialProps","ctx","query","action","constructor","props","state","countries","uploadedAvatar","avatarUploading","componentDidMount","getCountries","componentDidUpdate","prevProps","success","updateUserError","auth","error","length","onFinish","data","user","dispatchUpdateUser","onChangeAvatar","file","status","setState","response","url","onTabsChange","key","push","pathname","shallow","onPasswordChange","dispatchUpdatePassword","render","userUpdating","username","padding","bind","getAvatarUploadUrl","mapStateToProps","current","updateUserSuccess","mapDispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  message, Tabs\n} from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport {\n  IUser,\n  ICountries,\n  IUserUpdateFormData,\n  IUpdatePasswordFormData\n} from 'src/interfaces';\nimport UserProfile from '@components/user/profile';\nimport Head from 'next/head';\nimport { settingService } from 'src/services/setting.service';\nimport { userService } from 'src/services/user.service';\nimport { updateUser } from 'src/redux/user/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\n\nimport './index.less';\n\ninterface IProps {\n  user: IUser;\n  action: string;\n  auth: any;\n  updateUser(data: IUserUpdateFormData): Function;\n  updatePassword(data: IUpdatePasswordFormData): Function;\n  userUpdating: boolean;\n  success: boolean;\n  updateUserError: any;\n}\n\ninterface IStates {\n  countries: ICountries[];\n  avatarUploading: boolean;\n  uploadedAvatar: string;\n}\n\nclass UserProfilePage extends PureComponent<IProps, IStates> {\n  static authenticate = true;\n\n  static layout = 'primary';\n\n  static getInitialProps({ ctx }) {\n    const { query } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      countries: [],\n      uploadedAvatar: '',\n      avatarUploading: false\n    };\n  }\n\n  componentDidMount() {\n    const { action } = this.props;\n    if (!action || action === 'account-information') this.getCountries();\n  }\n\n  componentDidUpdate(prevProps: IProps) {\n    const {\n      success, updateUserError, auth, action\n    } = this.props;\n    const { countries } = this.state;\n    if (prevProps.success !== success && success) {\n      message.success('Update Profile Success.');\n    }\n\n    if (prevProps.updateUserError !== updateUserError && updateUserError) {\n      message.error(getResponseError(updateUserError));\n    }\n\n    if (\n      prevProps.auth.updatePassword.success !== auth.updatePassword.success\n      && auth.updatePassword.success\n    ) {\n      message.success('Update Password Success.');\n    }\n\n    if (\n      prevProps.auth.updatePassword.error !== auth.updatePassword.error\n      && auth.updatePassword.error\n    ) {\n      message.error(getResponseError(auth.updatePassword.error));\n    }\n\n    if (!countries.length && action === 'account-information') {\n      this.getCountries();\n    }\n  }\n\n  onFinish(data: any) {\n    const { user, updateUser: dispatchUpdateUser } = this.props;\n    dispatchUpdateUser({ ...user, ...data });\n  }\n\n  onChangeAvatar({ file }) {\n    if (file.status === 'uploading') {\n      this.setState({ avatarUploading: true });\n      return;\n    }\n\n    if (file.status === 'done') {\n      this.setState({ avatarUploading: false });\n      if (file.response) {\n        this.setState({\n          uploadedAvatar: file.response.data.url\n        });\n      }\n    }\n  }\n\n  onTabsChange(key: string) {\n    Router.push(\n      { pathname: '/account/user/account-settings', query: { action: key } },\n      `/account/user/account-settings?action=${key}`,\n      { shallow: false }\n    );\n  }\n\n  onPasswordChange(data: IUpdatePasswordFormData) {\n    const { updatePassword: dispatchUpdatePassword } = this.props;\n    dispatchUpdatePassword(data);\n  }\n\n  async getCountries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({ countries: countries.data });\n    } catch (error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  render() {\n    const {\n      user, action, auth, userUpdating\n    } = this.props;\n    const { countries, uploadedAvatar, avatarUploading } = this.state;\n\n    return (\n      <>\n        <Head>\n          <title>{`${user.username} Profile`}</title>\n        </Head>\n        <div className=\"account-setting-page\">\n          <PageHeader title=\"Account Settings\" />\n          <Tabs\n            activeKey={action || 'account-information'}\n            style={{ padding: '0 24px' }}\n            size=\"large\"\n            onChange={this.onTabsChange.bind(this)}\n          >\n            <Tabs.TabPane tab=\"Account Information\" key=\"account-information\">\n              <UserProfile\n                {...user}\n                onFinish={this.onFinish.bind(this)}\n                countries={countries}\n                onChangeAvatar={this.onChangeAvatar.bind(this)}\n                uploadAvatarUrl={userService.getAvatarUploadUrl()}\n                uploadedAvatar={uploadedAvatar}\n                avatarUploading={avatarUploading}\n                loading={userUpdating}\n              />\n            </Tabs.TabPane>\n            {/* <Tabs.TabPane key=\"timezone\" tab=\"Timezone\">\n              <h3>\n                Sometimes the timezone is very important so make sure you alway\n                set up it correctly. We will contact you taking into\n                consideration the time zone and so may the performer do!\n              </h3>\n              <Form\n                onFinish={this.onFinish.bind(this)}\n                layout=\"vertical\"\n                initialValues={{ timezone: user.timezone }}\n                {...formItemLayout}\n              >\n                <Form.Item\n                  name=\"timezone\"\n                  key=\"timezone\"\n                  label=\"Timezone\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input your timezone!'\n                    }\n                  ]}\n                >\n                  <Timezones autoFocus />\n                </Form.Item>\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Save Changes\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Tabs.TabPane> */}\n            <Tabs.TabPane key=\"change-password\" tab=\"Change Password\">\n              <PasswordChange\n                onFinish={this.onPasswordChange.bind(this)}\n                {...auth.updatePassword}\n              />\n            </Tabs.TabPane>\n          </Tabs>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.current,\n  userUpdating: state.user.userUpdating,\n  success: state.user.updateUserSuccess,\n  updateUserError: state.user.updateUserError,\n  auth: state.auth\n});\nconst mapDispatch = { updateUser, updatePassword };\nexport default connect(mapStateToProps, mapDispatch)(UserProfilePage);\n"]},"metadata":{},"sourceType":"module"}