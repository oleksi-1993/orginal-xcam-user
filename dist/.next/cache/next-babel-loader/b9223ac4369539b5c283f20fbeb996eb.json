{"ast":null,"code":"var _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\src\\\\components\\\\messages\\\\Compose.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { sendMessage, sentFileSuccess } from '@redux/message/actions';\nimport { SendOutlined } from '@ant-design/icons';\nimport { Input } from 'antd'; // import { ImageMessageUpload } from '@components/messages/uploadPhoto';\n// import { authService } from '@services/index';\n\nimport Emotions from './emotions';\nimport '../stream-chat/Compose.less';\n\nclass Compose extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"uploadRef\", void 0);\n\n    _defineProperty(this, \"_input\", void 0);\n\n    _defineProperty(this, \"state\", {\n      text: ''\n    });\n\n    _defineProperty(this, \"onKeyDown\", evt => {\n      if (evt.keyCode === 13) {\n        this.send();\n      }\n    });\n\n    _defineProperty(this, \"onChange\", evt => {\n      this.setState({\n        text: evt.target.value\n      });\n    });\n\n    _defineProperty(this, \"onEmojiClick\", emojiObject => {\n      const {\n        text\n      } = this.state;\n      this.setMessage(text + emojiObject.emoji);\n    });\n\n    _defineProperty(this, \"onPhotoUploaded\", data => {\n      const {\n        sentFileSuccess: handleSendFile\n      } = this.props;\n\n      if (!data || !data.response) {\n        return;\n      }\n\n      const imageUrl = data.response.data && data.response.data.imageUrl || data.base64;\n      handleSendFile(_objectSpread(_objectSpread({}, data.response.data), {\n        imageUrl\n      }));\n    });\n\n    this.uploadRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    if (!this.uploadRef) this.uploadRef = /*#__PURE__*/React.createRef();\n    if (!this._input) this._input = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidUpdate(previousProps) {\n    const {\n      sendMessageStatus\n    } = this.props;\n\n    if (sendMessageStatus.success !== previousProps.sendMessageStatus.success) {\n      this.setMessage('');\n      this._input && this._input.focus();\n    }\n  }\n\n  setMessage(msg) {\n    this.setState({\n      text: msg\n    });\n  }\n\n  send() {\n    const {\n      text\n    } = this.state;\n    if (!text) return;\n    const {\n      conversation,\n      sendMessage: handleSend\n    } = this.props;\n    handleSend({\n      conversationId: conversation._id,\n      data: {\n        text\n      }\n    });\n  }\n\n  render() {\n    const {\n      text\n    } = this.state;\n    const {\n      sendMessageStatus: status,\n      conversation\n    } = this.props; // const uploadHeaders = {\n    //   authorization: authService.getToken()\n    // };\n\n    if (!this.uploadRef) this.uploadRef = /*#__PURE__*/React.createRef();\n    if (!this._input) this._input = /*#__PURE__*/React.createRef();\n    return __jsx(\"div\", {\n      className: \"compose\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }, __jsx(Input, {\n      value: text,\n      className: \"compose-input\",\n      placeholder: \"Type a message\",\n      onKeyDown: this.onKeyDown,\n      onChange: this.onChange,\n      disabled: status.sending || !conversation._id,\n      ref: c => this._input = c,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"grp-icons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, __jsx(SendOutlined, {\n      onClick: this.send.bind(this),\n      disabled: status.sending,\n      style: {\n        fontSize: '25px',\n        marginRight: '10px',\n        color: '#fe26b3'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      className: \"grp-emotions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }\n    }, __jsx(\"img\", {\n      src: \"/emotion-ico.png\",\n      width: \"25px\",\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }), __jsx(Emotions, {\n      onEmojiClick: this.onEmojiClick.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nconst mapStates = state => ({\n  sendMessageStatus: state.message.sendMessage,\n  currentUser: state.user.current\n});\n\nconst mapDispatch = {\n  sendMessage,\n  sentFileSuccess\n};\nexport default connect(mapStates, mapDispatch)(Compose);","map":{"version":3,"sources":["E:/programData/React/user/src/components/messages/Compose.tsx"],"names":["React","PureComponent","connect","sendMessage","sentFileSuccess","SendOutlined","Input","Emotions","Compose","constructor","props","text","evt","keyCode","send","setState","target","value","emojiObject","state","setMessage","emoji","data","handleSendFile","response","imageUrl","base64","uploadRef","createRef","componentDidMount","_input","componentDidUpdate","previousProps","sendMessageStatus","success","focus","msg","conversation","handleSend","conversationId","_id","render","status","onKeyDown","onChange","sending","c","bind","fontSize","marginRight","color","onEmojiClick","mapStates","message","currentUser","user","current","mapDispatch"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport React, { PureComponent } from 'react';\nimport { connect } from 'react-redux';\nimport { sendMessage, sentFileSuccess } from '@redux/message/actions';\nimport { SendOutlined } from '@ant-design/icons';\nimport { Input } from 'antd';\n// import { ImageMessageUpload } from '@components/messages/uploadPhoto';\n// import { authService } from '@services/index';\nimport Emotions from './emotions';\nimport '../stream-chat/Compose.less';\n\ninterface IProps {\n  sendMessage: Function;\n  sentFileSuccess: Function;\n  sendMessageStatus: any;\n  conversation: any;\n  currentUser: any\n}\n\nclass Compose extends PureComponent<IProps> {\n  uploadRef: any;\n\n  _input: any;\n\n  constructor(props) {\n    super(props);\n    this.uploadRef = React.createRef();\n  }\n\n  state = { text: '' };\n\n  componentDidMount() {\n    if (!this.uploadRef) this.uploadRef = React.createRef();\n    if (!this._input) this._input = React.createRef();\n  }\n\n  componentDidUpdate(previousProps: IProps) {\n    const { sendMessageStatus } = this.props;\n    if (sendMessageStatus.success !== previousProps.sendMessageStatus.success) {\n      this.setMessage('');\n      this._input && this._input.focus();\n    }\n  }\n\n  setMessage(msg: string) {\n    this.setState({ text: msg });\n  }\n\n  onKeyDown = (evt) => {\n    if (evt.keyCode === 13) {\n      this.send();\n    }\n  };\n\n  onChange = (evt) => {\n    this.setState({ text: evt.target.value });\n  };\n\n  onEmojiClick = (emojiObject) => {\n    const { text } = this.state;\n    this.setMessage(text + emojiObject.emoji);\n  }\n\n  onPhotoUploaded = (data: any) => {\n    const { sentFileSuccess: handleSendFile } = this.props;\n    if (!data || !data.response) {\n      return;\n    }\n    const imageUrl = (data.response.data && data.response.data.imageUrl) || data.base64;\n    handleSendFile({ ...data.response.data, ...{ imageUrl } });\n  }\n\n  send() {\n    const { text } = this.state;\n    if (!text) return;\n    const { conversation, sendMessage: handleSend } = this.props;\n    handleSend({\n      conversationId: conversation._id,\n      data: {\n        text\n      }\n    });\n  }\n\n  render() {\n    const { text } = this.state;\n    const { sendMessageStatus: status, conversation } = this.props;\n    // const uploadHeaders = {\n    //   authorization: authService.getToken()\n    // };\n    if (!this.uploadRef) this.uploadRef = React.createRef();\n    if (!this._input) this._input = React.createRef();\n    return (\n      <div className=\"compose\">\n        <Input\n          value={text}\n          className=\"compose-input\"\n          placeholder=\"Type a message\"\n          onKeyDown={this.onKeyDown}\n          onChange={this.onChange}\n          disabled={status.sending || !conversation._id}\n          ref={(c) => this._input = c}\n        />\n        <div className=\"grp-icons\">\n          <SendOutlined onClick={this.send.bind(this)} disabled={status.sending} style={{ fontSize: '25px', marginRight: '10px', color: '#fe26b3' }} />\n          <div className=\"grp-emotions\">\n            <img src=\"/emotion-ico.png\" width=\"25px\" alt=\"\" />\n            <Emotions onEmojiClick={this.onEmojiClick.bind(this)} />\n          </div>\n        </div>\n\n        {/* <div className=\"grp-icons\">\n          <div className=\"grp-file-icon\">\n            <ImageMessageUpload\n              headers={uploadHeaders}\n              uploadUrl={messageService.getMessageUploadUrl()}\n              onUploaded={this.onPhotoUploaded}\n              options={{ fieldName: 'message-photo' }}\n              messageData={{\n                text: 'sent a photo',\n                conversationId: conversation && conversation._id,\n                recipientId: conversation && conversation.recipientInfo && conversation.recipientInfo._id,\n                recipientType: currentUser && currentUser._id ? 'performer' : 'user'\n              }}\n            />\n          </div>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nconst mapStates = (state: any) => ({\n  sendMessageStatus: state.message.sendMessage,\n  currentUser: state.user.current\n});\n\nconst mapDispatch = { sendMessage, sentFileSuccess };\nexport default connect(mapStates, mapDispatch)(Compose);\n"]},"metadata":{},"sourceType":"module"}