{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, favouriteService, purchaseItemService } from '@services/index';\nimport { updateUser, updateUserSuccess, updateUserFail, setUpdating, getFavoritePerformers, getFavoritePerformersSuccess, getFavoritePerformersFailed, gettingFavoritePerformers, getPaymentTokenHistroy, getPaymentTokenHistroySuccess, getPaymentTokenHistroyFail, gettigPaymentTokenHistory } from './actions';\nvar userSagas = [// TODO - defind update current user or get from auth user info to reload current user data if needed\n{\n  on: updateUser,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(setUpdating());\n\n          case 3:\n            _context.next = 5;\n            return userService.updateMe(data.payload);\n\n          case 5:\n            updated = _context.sent;\n            _context.next = 8;\n            return put(updateUserSuccess(updated.data));\n\n          case 8:\n            _context.next = 17;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 14;\n            return Promise.resolve(_context.t0);\n\n          case 14:\n            err = _context.sent;\n            _context.next = 17;\n            return put(updateUserFail(err));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getFavoritePerformers,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return put(gettingFavoritePerformers());\n\n          case 3:\n            _context2.next = 5;\n            return favouriteService.search(action.payload);\n\n          case 5:\n            resp = _context2.sent;\n            _context2.next = 8;\n            return put(getFavoritePerformersSuccess(resp.data));\n\n          case 8:\n            _context2.next = 17;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 14;\n            return Promise.resolve(_context2.t0);\n\n          case 14:\n            err = _context2.sent;\n            _context2.next = 17;\n            return put(getFavoritePerformersFailed(err));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getPaymentTokenHistroy,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return put(gettigPaymentTokenHistory());\n\n          case 3:\n            _context3.next = 5;\n            return purchaseItemService.search(action.payload);\n\n          case 5:\n            resp = _context3.sent;\n            _context3.next = 8;\n            return put(getPaymentTokenHistroySuccess(resp.data));\n\n          case 8:\n            _context3.next = 17;\n            break;\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 14;\n            return Promise.resolve(_context3.t0);\n\n          case 14:\n            err = _context3.sent;\n            _context3.next = 17;\n            return put(getPaymentTokenHistroyFail(err));\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(userSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/user/sagas.ts"],"names":["flatten","put","createSagas","userService","favouriteService","purchaseItemService","updateUser","updateUserSuccess","updateUserFail","setUpdating","getFavoritePerformers","getFavoritePerformersSuccess","getFavoritePerformersFailed","gettingFavoritePerformers","getPaymentTokenHistroy","getPaymentTokenHistroySuccess","getPaymentTokenHistroyFail","gettigPaymentTokenHistory","userSagas","on","worker","data","updateMe","payload","updated","Promise","resolve","err","action","search","resp"],"mappings":";AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,mBAAxC,QAAmE,iBAAnE;AAIA,SACEC,UADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,qBALF,EAMEC,4BANF,EAOEC,2BAPF,EAQEC,yBARF,EASEC,sBATF,EAUEC,6BAVF,EAWEC,0BAXF,EAYEC,yBAZF,QAaO,WAbP;AAeA,IAAMC,SAAS,GAAG,CAChB;AACA;AACEC,EAAAA,EAAE,EAAEb,UADN;AAEIc,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMpB,GAAG,CAACQ,WAAW,EAAZ,CAAT;;AAJN;AAAA;AAKsB,mBAAMN,WAAW,CAACmB,QAAZ,CAAqBD,IAAI,CAACE,OAA1B,CAAN;;AALtB;AAKYC,YAAAA,OALZ;AAAA;AAMM,mBAAMvB,GAAG,CAACM,iBAAiB,CAACiB,OAAO,CAACH,IAAT,CAAlB,CAAT;;AANN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUkB,mBAAMI,OAAO,CAACC,OAAR,aAAN;;AAVlB;AAUYC,YAAAA,GAVZ;AAAA;AAWM,mBAAM1B,GAAG,CAACO,cAAc,CAACmB,GAAD,CAAf,CAAT;;AAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFgB,EAiBhB;AACER,EAAAA,EAAE,EAAET,qBADN;AAEIU,EAAAA,MAFJ,wDAEWQ,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAM3B,GAAG,CAACY,yBAAyB,EAA1B,CAAT;;AAJN;AAAA;AAKyD,mBAAMT,gBAAgB,CAACyB,MAAjB,CAAwBD,MAAM,CAACL,OAA/B,CAAN;;AALzD;AAKYO,YAAAA,IALZ;AAAA;AAMM,mBAAM7B,GAAG,CAACU,4BAA4B,CAACmB,IAAI,CAACT,IAAN,CAA7B,CAAT;;AANN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQkB,mBAAMI,OAAO,CAACC,OAAR,cAAN;;AARlB;AAQYC,YAAAA,GARZ;AAAA;AASM,mBAAM1B,GAAG,CAACW,2BAA2B,CAACe,GAAD,CAA5B,CAAT;;AATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAjBgB,EA8BhB;AACER,EAAAA,EAAE,EAAEL,sBADN;AAEIM,EAAAA,MAFJ,wDAEWQ,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAM3B,GAAG,CAACgB,yBAAyB,EAA1B,CAAT;;AAJN;AAAA;AAKyD,mBAAMZ,mBAAmB,CAACwB,MAApB,CAA2BD,MAAM,CAACL,OAAlC,CAAN;;AALzD;AAKYO,YAAAA,IALZ;AAAA;AAMM,mBAAM7B,GAAG,CAACc,6BAA6B,CAACe,IAAI,CAACT,IAAN,CAA9B,CAAT;;AANN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAQkB,mBAAMI,OAAO,CAACC,OAAR,cAAN;;AARlB;AAQYC,YAAAA,GARZ;AAAA;AASM,mBAAM1B,GAAG,CAACe,0BAA0B,CAACW,GAAD,CAA3B,CAAT;;AATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA9BgB,CAAlB;AA6CA,eAAe3B,OAAO,CAAC,CAACE,WAAW,CAACgB,SAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { userService, favouriteService, purchaseItemService } from '@services/index';\nimport {\n  IReduxAction, IResponse, IDataResponse, IPerformer\n} from 'src/interfaces';\nimport {\n  updateUser,\n  updateUserSuccess,\n  updateUserFail,\n  setUpdating,\n  getFavoritePerformers,\n  getFavoritePerformersSuccess,\n  getFavoritePerformersFailed,\n  gettingFavoritePerformers,\n  getPaymentTokenHistroy,\n  getPaymentTokenHistroySuccess,\n  getPaymentTokenHistroyFail,\n  gettigPaymentTokenHistory\n} from './actions';\n\nconst userSagas = [\n  // TODO - defind update current user or get from auth user info to reload current user data if needed\n  {\n    on: updateUser,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdating());\n        const updated = yield userService.updateMe(data.payload);\n        yield put(updateUserSuccess(updated.data));\n        // if this is current user, reload user info?\n      } catch (e) {\n        // TODO - alert error\n        const err = yield Promise.resolve(e);\n        yield put(updateUserFail(err));\n      }\n    }\n  },\n  {\n    on: getFavoritePerformers,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingFavoritePerformers());\n        const resp: IResponse<IDataResponse<IPerformer>> = yield favouriteService.search(action.payload);\n        yield put(getFavoritePerformersSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getFavoritePerformersFailed(err));\n      }\n    }\n  },\n  {\n    on: getPaymentTokenHistroy,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettigPaymentTokenHistory());\n        const resp: IResponse<IDataResponse<IPerformer>> = yield purchaseItemService.search(action.payload);\n        yield put(getPaymentTokenHistroySuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPaymentTokenHistroyFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(userSagas)]);\n"]},"metadata":{},"sourceType":"module"}