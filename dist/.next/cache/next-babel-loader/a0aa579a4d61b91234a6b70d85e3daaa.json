{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { gettingPerformerPhotos, getPerformerPhotosSuccess, getPerformerPhotosFail } from './actions';\nconst initialPhotosState = {\n  error: null,\n  data: {},\n  total: 0,\n  success: false,\n  searching: false\n};\nconst photoReducers = [{\n  on: gettingPerformerPhotos,\n\n  reducer() {\n    return _objectSpread(_objectSpread({}, initialPhotosState), {}, {\n      searching: true\n    });\n  }\n\n}, {\n  on: getPerformerPhotosSuccess,\n\n  reducer(_, action) {\n    return {\n      error: null,\n      data: action.payload.data,\n      total: action.payload.total,\n      success: true,\n      searching: false\n    };\n  }\n\n}, {\n  on: getPerformerPhotosFail,\n\n  reducer(_, action) {\n    return {\n      data: null,\n      error: action.payload,\n      success: false,\n      searching: false\n    };\n  }\n\n}];\nexport default merge({}, createReducers('photos', [photoReducers], initialPhotosState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/photos/reducers.ts"],"names":["createReducers","merge","gettingPerformerPhotos","getPerformerPhotosSuccess","getPerformerPhotosFail","initialPhotosState","error","data","total","success","searching","photoReducers","on","reducer","_","action","payload"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,YAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,SACEC,sBADF,EAEEC,yBAFF,EAGEC,sBAHF,QAIO,WAJP;AAMA,MAAMC,kBAAkB,GAAG;AACzBC,EAAAA,KAAK,EAAE,IADkB;AAEzBC,EAAAA,IAAI,EAAE,EAFmB;AAGzBC,EAAAA,KAAK,EAAE,CAHkB;AAIzBC,EAAAA,OAAO,EAAE,KAJgB;AAKzBC,EAAAA,SAAS,EAAE;AALc,CAA3B;AAOA,MAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAEV,sBADN;;AAEEW,EAAAA,OAAO,GAAG;AACR,2CACKR,kBADL;AAEEK,MAAAA,SAAS,EAAE;AAFb;AAID;;AAPH,CADoB,EAUpB;AACEE,EAAAA,EAAE,EAAET,yBADN;;AAEEU,EAAAA,OAAO,CAACC,CAAD,EAAIC,MAAJ,EAAiD;AACtD,WAAO;AACLT,MAAAA,KAAK,EAAE,IADF;AAELC,MAAAA,IAAI,EAAEQ,MAAM,CAACC,OAAP,CAAeT,IAFhB;AAGLC,MAAAA,KAAK,EAAEO,MAAM,CAACC,OAAP,CAAeR,KAHjB;AAILC,MAAAA,OAAO,EAAE,IAJJ;AAKLC,MAAAA,SAAS,EAAE;AALN,KAAP;AAOD;;AAVH,CAVoB,EAsBpB;AACEE,EAAAA,EAAE,EAAER,sBADN;;AAEES,EAAAA,OAAO,CAACC,CAAD,EAAIC,MAAJ,EAA8C;AACnD,WAAO;AACLR,MAAAA,IAAI,EAAE,IADD;AAELD,MAAAA,KAAK,EAAES,MAAM,CAACC,OAFT;AAGLP,MAAAA,OAAO,EAAE,KAHJ;AAILC,MAAAA,SAAS,EAAE;AAJN,KAAP;AAMD;;AATH,CAtBoB,CAAtB;AAkCA,eAAeT,KAAK,CAClB,EADkB,EAElBD,cAAc,CAAC,QAAD,EAAW,CAACW,aAAD,CAAX,EAA4BN,kBAA5B,CAFI,CAApB","sourcesContent":["import { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { IReduxAction, IPhoto, IDataResponse } from 'src/interfaces';\nimport {\n  gettingPerformerPhotos,\n  getPerformerPhotosSuccess,\n  getPerformerPhotosFail\n} from './actions';\n\nconst initialPhotosState = {\n  error: null,\n  data: {},\n  total: 0,\n  success: false,\n  searching: false\n};\nconst photoReducers = [\n  {\n    on: gettingPerformerPhotos,\n    reducer() {\n      return {\n        ...initialPhotosState,\n        searching: true\n      };\n    }\n  },\n  {\n    on: getPerformerPhotosSuccess,\n    reducer(_, action: IReduxAction<IDataResponse<IPhoto>>) {\n      return {\n        error: null,\n        data: action.payload.data,\n        total: action.payload.total,\n        success: true,\n        searching: false\n      };\n    }\n  },\n  {\n    on: getPerformerPhotosFail,\n    reducer(_, action: IReduxAction<IDataResponse<any>>) {\n      return {\n        data: null,\n        error: action.payload,\n        success: false,\n        searching: false\n      };\n    }\n  }\n];\nexport default merge(\n  {},\n  createReducers('photos', [photoReducers], initialPhotosState)\n);\n"]},"metadata":{},"sourceType":"module"}