{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport fetch from 'isomorphic-unfetch';\nimport { omit } from 'lodash';\nimport cookie from 'js-cookie';\nimport { isUrl } from '@lib/string';\nimport { getGlobalConfig } from './config';\nexport var TOKEN = 'token';\nexport var ROLE = 'role';\nexport var PERFORMER_ROLE = 'performer';\nexport var USER_ROLE = 'user';\nexport var STUDIO_ROLE = 'studio';\nexport var SORT = {\n  descend: 'desc',\n  ascend: 'asc'\n};\nexport var APIRequest = /*#__PURE__*/function () {\n  function APIRequest() {\n    _classCallCheck(this, APIRequest);\n  }\n\n  _createClass(APIRequest, [{\n    key: \"setAuthHeaderToken\",\n    value: function setAuthHeaderToken(token) {\n      APIRequest.token = token;\n    }\n    /**\n     * Parses the JSON returned by a network request\n     *\n     * @param  {object} response A response from a network request\n     *\n     * @return {object}          The parsed JSON from the request\n     */\n\n  }, {\n    key: \"parseJSON\",\n    value: function parseJSON(response) {\n      if (response.status === 204 || response.status === 205) {\n        return null;\n      }\n\n      return response.json();\n    }\n    /**\n     * Checks if a network request came back fine, and throws an error if not\n     *\n     * @param  {object} response   A response from a network request\n     *\n     * @return {object|undefined} Returns either the response, or throws an error\n     */\n\n  }, {\n    key: \"checkStatus\",\n    value: function () {\n      var _checkStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(response) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(response.status >= 200 && response.status < 300)) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", response);\n\n              case 2:\n                if (!(response.status === 413)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                throw new Error('Request Entity Too Large');\n\n              case 4:\n                if (!(response.status === 403)) {\n                  _context.next = 8;\n                  break;\n                }\n\n                if (!true) {\n                  _context.next = 8;\n                  break;\n                }\n\n                window.location.href = '/';\n                throw new Error('Forbidden in the action!');\n\n              case 8:\n                throw response.clone().json();\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function checkStatus(_x) {\n        return _checkStatus.apply(this, arguments);\n      }\n\n      return checkStatus;\n    }()\n  }, {\n    key: \"request\",\n    value: function request(url, method, body, headers) {\n      var verb = (method || 'get').toUpperCase();\n\n      var updatedHeader = _objectSpread({\n        'Content-Type': 'application/json',\n        // TODO - check me\n        Authorization: APIRequest.token || (true ? cookie.get(TOKEN) : '')\n      }, headers || {});\n\n      var config = getGlobalConfig();\n      return fetch(isUrl(url) ? url : \"\".concat(config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT).concat(url), {\n        method: verb,\n        headers: updatedHeader,\n        body: body ? JSON.stringify(body) : null\n      }).then(this.checkStatus).then(this.parseJSON);\n    }\n  }, {\n    key: \"buildUrl\",\n    value: function buildUrl(baseUrl, params) {\n      if (!params) {\n        return baseUrl;\n      }\n\n      var queryString = Object.keys(params).map(function (k) {\n        return \"\".concat(encodeURIComponent(k), \"=\").concat(encodeURIComponent(params[k]));\n      }).join('&');\n      return \"\".concat(baseUrl, \"?\").concat(queryString);\n    }\n  }, {\n    key: \"get\",\n    value: function get(url, headers) {\n      return this.request(url, 'get', null, headers);\n    }\n  }, {\n    key: \"post\",\n    value: function post(url, data, headers) {\n      return this.request(url, 'post', data, headers);\n    }\n  }, {\n    key: \"put\",\n    value: function put(url, data, headers) {\n      return this.request(url, 'put', data, headers);\n    }\n  }, {\n    key: \"del\",\n    value: function del(url, data, headers) {\n      return this.request(url, 'delete', data, headers);\n    }\n  }, {\n    key: \"upload\",\n    value: function upload(url, files) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {},\n        method: 'POST'\n      };\n      var config = getGlobalConfig();\n      var uploadUrl = isUrl(url) ? url : \"\".concat(config.NEXT_PUBLIC_API_ENDPOINT).concat(url);\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData();\n        files.forEach(function (f) {\n          return formData.append(f.fieldname, f.file, f.file.name);\n        });\n        options.customData && Object.keys(options.customData).forEach(function (fieldname) {\n          return typeof options.customData[fieldname] !== 'undefined' && formData.append(fieldname, options.customData[fieldname]);\n        });\n        req.responseType = 'json';\n        req.open(options.method || 'POST', uploadUrl);\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }, {\n    key: \"register\",\n    value: function register(url, data) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n        onProgress: function onProgress() {}\n      };\n      var config = getGlobalConfig();\n      return new Promise(function (resolve, reject) {\n        var req = new XMLHttpRequest();\n        req.upload.addEventListener('progress', function (event) {\n          if (event.lengthComputable) {\n            options.onProgress({\n              percentage: event.loaded / event.total * 100\n            });\n          }\n        });\n        req.addEventListener('load', function () {\n          var success = req.status >= 200 && req.status < 300;\n          var response = req.response;\n\n          if (!success) {\n            return reject(response);\n          }\n\n          return resolve(response);\n        });\n        req.upload.addEventListener('error', function () {\n          reject(req.response);\n        });\n        var formData = new FormData(); // formData.append('file', file, file.name);\n\n        if (data.documentVerification) {\n          var documentVerificationFile = data.documentVerification.file.originFileObj;\n          formData.append('documentVerification', documentVerificationFile, documentVerificationFile.name);\n        }\n\n        if (data.idVerification) {\n          var idVerificationDile = data.idVerification.file.originFileObj;\n          formData.append('idVerification', idVerificationDile, idVerificationDile.name);\n        }\n\n        Object.keys(omit(data, ['documentVerification', 'idVerification'])).forEach(function (v) {\n          formData.append(v, data[v]);\n        });\n        req.responseType = 'json';\n        req.open('POST', isUrl(url) ? url : \"\".concat(config.NEXT_PUBLIC_API_ENDPOINT).concat(url));\n        var token = cookie.get(TOKEN);\n\n        if (token) {\n          req.setRequestHeader('Authorization', token);\n        }\n\n        req.send(formData);\n      });\n    }\n  }]);\n\n  return APIRequest;\n}();\n\n_defineProperty(APIRequest, \"token\", '');","map":{"version":3,"sources":["E:/programData/React/user/src/services/api-request.ts"],"names":["fetch","omit","cookie","isUrl","getGlobalConfig","TOKEN","ROLE","PERFORMER_ROLE","USER_ROLE","STUDIO_ROLE","SORT","descend","ascend","APIRequest","token","response","status","json","Error","window","location","href","clone","url","method","body","headers","verb","toUpperCase","updatedHeader","Authorization","get","config","API_ENDPOINT","NEXT_PUBLIC_API_ENDPOINT","JSON","stringify","then","checkStatus","parseJSON","baseUrl","params","queryString","Object","keys","map","k","encodeURIComponent","join","request","data","files","options","onProgress","uploadUrl","Promise","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentage","loaded","total","success","formData","FormData","forEach","f","append","fieldname","file","name","customData","responseType","open","setRequestHeader","send","documentVerification","documentVerificationFile","originFileObj","idVerification","idVerificationDile","v"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { omit } from 'lodash';\nimport cookie from 'js-cookie';\nimport { isUrl } from '@lib/string';\nimport { IRegisterFormData } from 'src/interfaces';\nimport { getGlobalConfig } from './config';\n\nexport interface IResponse<T> {\n  status: number;\n  data: T;\n}\n\nexport const TOKEN = 'token';\nexport const ROLE = 'role';\nexport const PERFORMER_ROLE = 'performer';\nexport const USER_ROLE = 'user';\nexport const STUDIO_ROLE = 'studio';\nexport const SORT = { descend: 'desc', ascend: 'asc' };\n\nexport abstract class APIRequest {\n  static token: string = '';\n\n  setAuthHeaderToken(token: string) {\n    APIRequest.token = token;\n  }\n\n  /**\n   * Parses the JSON returned by a network request\n   *\n   * @param  {object} response A response from a network request\n   *\n   * @return {object}          The parsed JSON from the request\n   */\n  private parseJSON(response: Response) {\n    if (response.status === 204 || response.status === 205) {\n      return null;\n    }\n    return response.json();\n  }\n\n  /**\n   * Checks if a network request came back fine, and throws an error if not\n   *\n   * @param  {object} response   A response from a network request\n   *\n   * @return {object|undefined} Returns either the response, or throws an error\n   */\n  private async checkStatus(response: Response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    }\n\n    if (response.status === 413) {\n      throw new Error('Request Entity Too Large');\n    }\n\n    if (response.status === 403) {\n      if (process.browser) {\n        window.location.href = '/';\n        throw new Error('Forbidden in the action!');\n      }\n    }\n    // const error = new Error(response.statusText) as any;\n    // error.response = response;\n    // throw error;\n    throw response.clone().json();\n  }\n\n  request(\n    url: string,\n    method?: string,\n    body?: any,\n    headers?: { [key: string]: string }\n  ): Promise<IResponse<any>> {\n    const verb = (method || 'get').toUpperCase();\n    const updatedHeader = {\n      'Content-Type': 'application/json',\n      // TODO - check me\n      Authorization:\n        APIRequest.token || (process.browser ? cookie.get(TOKEN) : ''),\n      ...(headers || {})\n    };\n    const config = getGlobalConfig();\n\n    return fetch(isUrl(url) ? url : `${config.API_ENDPOINT || config.NEXT_PUBLIC_API_ENDPOINT}${url}`, {\n      method: verb,\n      headers: updatedHeader,\n      body: body ? JSON.stringify(body) : null\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  buildUrl(baseUrl: string, params?: { [key: string]: string | number | boolean }) {\n    if (!params) {\n      return baseUrl;\n    }\n\n    const queryString = Object.keys(params)\n      .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(params[k])}`)\n      .join('&');\n    return `${baseUrl}?${queryString}`;\n  }\n\n  get(url: string, headers?: { [key: string]: string }) {\n    return this.request(url, 'get', null, headers);\n  }\n\n  post(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, 'post', data, headers);\n  }\n\n  put(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, 'put', data, headers);\n  }\n\n  del(url: string, data?: any, headers?: { [key: string]: string }) {\n    return this.request(url, 'delete', data, headers);\n  }\n\n  upload(\n    url: string,\n    files: {\n      file: File;\n      fieldname: string;\n    }[],\n    options: {\n      onProgress: Function;\n      customData?: Record<string, any>;\n      method?: string;\n    } = {\n      onProgress() {},\n      method: 'POST'\n    }\n  ) {\n    const config = getGlobalConfig();\n    const uploadUrl = isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`;\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      files.forEach((f) => formData.append(f.fieldname, f.file, f.file.name));\n      options.customData\n        && Object.keys(options.customData).forEach(\n          (fieldname) => typeof options.customData[fieldname] !== 'undefined'\n            && formData.append(fieldname, options.customData[fieldname])\n        );\n\n      req.responseType = 'json';\n      req.open(options.method || 'POST', uploadUrl);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  register(\n    url: string,\n    data: IRegisterFormData,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ) {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.documentVerification) {\n        const documentVerificationFile = data.documentVerification.file.originFileObj;\n        formData.append(\n          'documentVerification',\n          documentVerificationFile,\n          documentVerificationFile.name\n        );\n      }\n\n      if (data.idVerification) {\n        const idVerificationDile = data.idVerification.file.originFileObj;\n        formData.append(\n          'idVerification',\n          idVerificationDile,\n          idVerificationDile.name\n        );\n      }\n\n      Object.keys(\n        omit(data, ['documentVerification', 'idVerification'])\n      ).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}