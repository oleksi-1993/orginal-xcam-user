{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable no-return-assign */\nimport { createSagas } from '@lib/redux';\nimport { flatten, omit } from 'lodash';\nimport { put, all, select } from 'redux-saga/effects';\nimport { performerCategories, performerService, videoService, productService, galleryService, earningService, payoutRequestService } from 'src/services';\nimport { photoService } from '@services/photo.service';\nimport { getPerformerCategoriesSuccess, getPerformerCategoriesFail, getPerformerCategories, searchPerformer, searchPerformerFail, searchPerformerSuccess, setPerformerSearching, updatePerformerProfile, updatePerformerProfileFail, updatePerformerProfileSuccess, setupdatingPerformerProfile, getPerformerDetails, getPerformerDetailsSuccess, getPerformerDetailsFail, setGettingPerformerDetails, getMyVideos, getMyVideosFail, getMyVideosSuccess, setgettingMyVideos, getMyProducts, getMyProductsSuccess, getMyProductsFail, setGettingMyProducts, getEarning, getEarningFail, getEarningSuccess, setGettingEarning, getMyPhotos, getMyPhotosSuccess, getMyPhotosFail, setgettingMyPhotos, getMyGalleries, getMyGalleriesSuccess, getMyGalleriesFail, setgettingMyGalleries, updatePaymentInfo, updateDirectDeposit, updateBitpay, updatePaxum, updateStreamingStatus, updateDefaultPrice, getPayoutRequest, setGettingPayoutRequest, getPayoutRequestSuccess, getPayoutRequestFail } from './actions';\nvar performerSaga = [{\n  on: getPerformerCategories,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return performerCategories.getList(data.payload);\n\n          case 3:\n            resp = _context.sent;\n            _context.next = 6;\n            return put(getPerformerCategoriesSuccess(resp.data));\n\n          case 6:\n            _context.next = 15;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 12;\n            return Promise.resolve(_context.t0);\n\n          case 12:\n            error = _context.sent;\n            _context.next = 15;\n            return put(getPerformerCategoriesFail(error));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: searchPerformer,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, currentPerformer, data, total, error;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return put(setPerformerSearching());\n\n          case 3:\n            _context2.next = 5;\n            return performerService.search(action.payload);\n\n          case 5:\n            resp = _context2.sent;\n            _context2.next = 8;\n            return select(function (state) {\n              return state.performer.current;\n            });\n\n          case 8:\n            currentPerformer = _context2.sent;\n            data = resp.data.data.filter(function (p) {\n              return p._id !== currentPerformer._id;\n            });\n            total = currentPerformer !== null && currentPerformer !== void 0 && currentPerformer._id ? resp.data.total - 1 : resp.data.total;\n            _context2.next = 13;\n            return put(searchPerformerSuccess({\n              data: data,\n              total: total\n            }));\n\n          case 13:\n            _context2.next = 22;\n            break;\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 19;\n            return Promise.resolve(_context2.t0);\n\n          case 19:\n            error = _context2.sent;\n            _context2.next = 22;\n            return put(searchPerformerFail(error));\n\n          case 22:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 15]]);\n  })\n}, {\n  on: updatePerformerProfile,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return put(setupdatingPerformerProfile());\n\n          case 3:\n            _context3.next = 5;\n            return performerService.updateMe(data.payload);\n\n          case 5:\n            resp = _context3.sent;\n            _context3.next = 8;\n            return put(updatePerformerProfileSuccess(resp.data));\n\n          case 8:\n            _context3.next = 17;\n            break;\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 14;\n            return Promise.resolve(_context3.t0);\n\n          case 14:\n            err = _context3.sent;\n            _context3.next = 17;\n            return put(updatePerformerProfileFail(err));\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getPerformerDetails,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var _yield$all, _yield$all2, performerResponse, performerProductReponse, performerVideoResponse, performerGalleryResponse, relatedPerformerResponse, products, videos, galleries, err;\n\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return put(setGettingPerformerDetails());\n\n          case 3:\n            _context4.next = 5;\n            return all([performerService.details(data.payload.username), productService.search({\n              performerId: data.payload._id,\n              status: 'active'\n            }), videoService.search({\n              performerId: data.payload._id,\n              status: 'active'\n            }), galleryService.search({\n              performerId: data.payload._id,\n              status: 'active'\n            }, false), performerService.search({\n              status: 'active',\n              excludedId: data.payload._id,\n              limit: 12\n            })]);\n\n          case 5:\n            _yield$all = _context4.sent;\n            _yield$all2 = _slicedToArray(_yield$all, 5);\n            performerResponse = _yield$all2[0];\n            performerProductReponse = _yield$all2[1];\n            performerVideoResponse = _yield$all2[2];\n            performerGalleryResponse = _yield$all2[3];\n            relatedPerformerResponse = _yield$all2[4];\n            products = {};\n            videos = {};\n            galleries = {};\n            performerProductReponse.data.data.forEach(function (p) {\n              return products[p._id] = p;\n            });\n            performerVideoResponse.data.data.forEach(function (v) {\n              return videos[v._id] = v;\n            });\n            performerGalleryResponse.data.data.forEach(function (g) {\n              return galleries[g._id] = g;\n            });\n            _context4.next = 20;\n            return put(getPerformerDetailsSuccess({\n              performer: _objectSpread(_objectSpread({}, performerResponse.data), {}, {\n                products: performerProductReponse.data.data.map(function (p) {\n                  return p._id;\n                }),\n                videos: performerVideoResponse.data.data.map(function (v) {\n                  return v._id;\n                }),\n                galleries: performerGalleryResponse.data.data.map(function (g) {\n                  return g._id;\n                }),\n                relatedPerformers: relatedPerformerResponse.data.data\n              }),\n              // photos,\n              videos: videos,\n              products: products,\n              galleries: galleries\n            }));\n\n          case 20:\n            _context4.next = 29;\n            break;\n\n          case 22:\n            _context4.prev = 22;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 26;\n            return Promise.resolve(_context4.t0);\n\n          case 26:\n            err = _context4.sent;\n            _context4.next = 29;\n            return put(getPerformerDetailsFail(err));\n\n          case 29:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 22]]);\n  })\n}, {\n  on: getMyProducts,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return put(setGettingMyProducts());\n\n          case 3:\n            _context5.next = 5;\n            return performerService.myProduct(action.payload);\n\n          case 5:\n            resp = _context5.sent;\n            _context5.next = 8;\n            return put(getMyProductsSuccess(resp.data));\n\n          case 8:\n            _context5.next = 17;\n            break;\n\n          case 10:\n            _context5.prev = 10;\n            _context5.t0 = _context5[\"catch\"](0);\n            _context5.next = 14;\n            return Promise.resolve(_context5.t0);\n\n          case 14:\n            err = _context5.sent;\n            _context5.next = 17;\n            return put(getMyProductsFail(err));\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getEarning,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var difDateQuery, earning, _action$payload, fromDate, toDate, query, _yield$all3, _yield$all4, resp, stats, err;\n\n    return _regeneratorRuntime.wrap(function worker$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return put(setGettingEarning());\n\n          case 3:\n            difDateQuery = false;\n            _context6.next = 6;\n            return select(function (state) {\n              return state.performer.earning;\n            });\n\n          case 6:\n            earning = _context6.sent;\n            _action$payload = action.payload, fromDate = _action$payload.fromDate, toDate = _action$payload.toDate;\n            query = omit(action.payload, ['fromDate', 'toDate']);\n\n            if (fromDate && toDate) {\n              query.fromDate = fromDate;\n              query.toDate = toDate;\n            }\n\n            if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n            _context6.next = 13;\n            return all([earningService.search(query), earning.stats && !difDateQuery ? earning.stats : earningService.stats(query)]);\n\n          case 13:\n            _yield$all3 = _context6.sent;\n            _yield$all4 = _slicedToArray(_yield$all3, 2);\n            resp = _yield$all4[0];\n            stats = _yield$all4[1];\n            _context6.next = 19;\n            return put(getEarningSuccess(_objectSpread(_objectSpread({}, query), {}, {\n              stats: stats,\n              data: resp.data\n            })));\n\n          case 19:\n            _context6.next = 28;\n            break;\n\n          case 21:\n            _context6.prev = 21;\n            _context6.t0 = _context6[\"catch\"](0);\n            _context6.next = 25;\n            return Promise.resolve(_context6.t0);\n\n          case 25:\n            err = _context6.sent;\n            _context6.next = 28;\n            return put(getEarningFail(err));\n\n          case 28:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, worker, null, [[0, 21]]);\n  })\n}, {\n  on: getPayoutRequest,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var _yield$all5, _yield$all6, resp, err;\n\n    return _regeneratorRuntime.wrap(function worker$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return put(setGettingPayoutRequest());\n\n          case 3:\n            _context7.next = 5;\n            return all([payoutRequestService.search(action.payload)]);\n\n          case 5:\n            _yield$all5 = _context7.sent;\n            _yield$all6 = _slicedToArray(_yield$all5, 1);\n            resp = _yield$all6[0];\n            _context7.next = 10;\n            return put(getPayoutRequestSuccess(resp.data));\n\n          case 10:\n            _context7.next = 19;\n            break;\n\n          case 12:\n            _context7.prev = 12;\n            _context7.t0 = _context7[\"catch\"](0);\n            _context7.next = 16;\n            return Promise.resolve(_context7.t0);\n\n          case 16:\n            err = _context7.sent;\n            _context7.next = 19;\n            return put(getPayoutRequestFail(err));\n\n          case 19:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, worker, null, [[0, 12]]);\n  })\n}, {\n  on: getMyVideos,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return put(setgettingMyVideos());\n\n          case 3:\n            _context8.next = 5;\n            return videoService.myVideos(action.payload);\n\n          case 5:\n            resp = _context8.sent;\n            _context8.next = 8;\n            return put(getMyVideosSuccess(resp.data));\n\n          case 8:\n            _context8.next = 17;\n            break;\n\n          case 10:\n            _context8.prev = 10;\n            _context8.t0 = _context8[\"catch\"](0);\n            _context8.next = 14;\n            return Promise.resolve(_context8.t0);\n\n          case 14:\n            err = _context8.sent;\n            _context8.next = 17;\n            return put(getMyVideosFail(err));\n\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getMyPhotos,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return put(setgettingMyPhotos());\n\n          case 3:\n            _context9.next = 5;\n            return photoService.myPhotos(action.payload);\n\n          case 5:\n            resp = _context9.sent;\n            _context9.next = 8;\n            return put(getMyPhotosSuccess(resp.data));\n\n          case 8:\n            _context9.next = 17;\n            break;\n\n          case 10:\n            _context9.prev = 10;\n            _context9.t0 = _context9[\"catch\"](0);\n            _context9.next = 14;\n            return Promise.resolve(_context9.t0);\n\n          case 14:\n            err = _context9.sent;\n            _context9.next = 17;\n            return put(getMyPhotosFail(err));\n\n          case 17:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getMyGalleries,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return put(setgettingMyGalleries());\n\n          case 3:\n            _context10.next = 5;\n            return galleryService.search(action.payload);\n\n          case 5:\n            resp = _context10.sent;\n            _context10.next = 8;\n            return put(getMyGalleriesSuccess(resp.data));\n\n          case 8:\n            _context10.next = 17;\n            break;\n\n          case 10:\n            _context10.prev = 10;\n            _context10.t0 = _context10[\"catch\"](0);\n            _context10.next = 14;\n            return Promise.resolve(_context10.t0);\n\n          case 14:\n            err = _context10.sent;\n            _context10.next = 17;\n            return put(getMyGalleriesFail(err));\n\n          case 17:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updatePaymentInfo,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.prev = 0;\n            _context11.next = 3;\n            return put(setupdatingPerformerProfile());\n\n          case 3:\n            _context11.next = 5;\n            return performerService.updatePaymentInfo(action.payload);\n\n          case 5:\n            resp = _context11.sent;\n            _context11.next = 8;\n            return put(updatePerformerProfileSuccess(resp.data));\n\n          case 8:\n            _context11.next = 17;\n            break;\n\n          case 10:\n            _context11.prev = 10;\n            _context11.t0 = _context11[\"catch\"](0);\n            _context11.next = 14;\n            return Promise.resolve(_context11.t0);\n\n          case 14:\n            err = _context11.sent;\n            _context11.next = 17;\n            return put(updatePerformerProfileFail(err));\n\n          case 17:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateDirectDeposit,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            _context12.prev = 0;\n            _context12.next = 3;\n            return put(setupdatingPerformerProfile());\n\n          case 3:\n            _context12.next = 5;\n            return performerService.updateDirectDepost(action.payload);\n\n          case 5:\n            resp = _context12.sent;\n            _context12.next = 8;\n            return put(updatePerformerProfileSuccess(resp.data));\n\n          case 8:\n            _context12.next = 17;\n            break;\n\n          case 10:\n            _context12.prev = 10;\n            _context12.t0 = _context12[\"catch\"](0);\n            _context12.next = 14;\n            return Promise.resolve(_context12.t0);\n\n          case 14:\n            err = _context12.sent;\n            _context12.next = 17;\n            return put(updatePerformerProfileFail(err));\n\n          case 17:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateBitpay,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.prev = 0;\n            _context13.next = 3;\n            return put(setupdatingPerformerProfile());\n\n          case 3:\n            _context13.next = 5;\n            return performerService.updateBitpay(action.payload);\n\n          case 5:\n            resp = _context13.sent;\n            _context13.next = 8;\n            return put(updatePerformerProfileSuccess(resp.data));\n\n          case 8:\n            _context13.next = 17;\n            break;\n\n          case 10:\n            _context13.prev = 10;\n            _context13.t0 = _context13[\"catch\"](0);\n            _context13.next = 14;\n            return Promise.resolve(_context13.t0);\n\n          case 14:\n            err = _context13.sent;\n            _context13.next = 17;\n            return put(updatePerformerProfileFail(err));\n\n          case 17:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updatePaxum,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.prev = 0;\n            _context14.next = 3;\n            return put(setupdatingPerformerProfile());\n\n          case 3:\n            _context14.next = 5;\n            return performerService.updatePaxum(action.payload);\n\n          case 5:\n            resp = _context14.sent;\n            _context14.next = 8;\n            return put(updatePerformerProfileSuccess(resp.data));\n\n          case 8:\n            _context14.next = 17;\n            break;\n\n          case 10:\n            _context14.prev = 10;\n            _context14.t0 = _context14[\"catch\"](0);\n            _context14.next = 14;\n            return Promise.resolve(_context14.t0);\n\n          case 14:\n            err = _context14.sent;\n            _context14.next = 17;\n            return put(updatePerformerProfileFail(err));\n\n          case 17:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateStreamingStatus,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context15) {\n      while (1) {\n        switch (_context15.prev = _context15.next) {\n          case 0:\n            _context15.prev = 0;\n            _context15.next = 3;\n            return put(setupdatingPerformerProfile());\n\n          case 3:\n            _context15.next = 5;\n            return performerService.updateStreamingStatus({\n              status: action.payload\n            });\n\n          case 5:\n            resp = _context15.sent;\n            _context15.next = 8;\n            return put(updatePerformerProfileSuccess(resp.data));\n\n          case 8:\n            _context15.next = 17;\n            break;\n\n          case 10:\n            _context15.prev = 10;\n            _context15.t0 = _context15[\"catch\"](0);\n            _context15.next = 14;\n            return Promise.resolve(_context15.t0);\n\n          case 14:\n            err = _context15.sent;\n            _context15.next = 17;\n            return put(updatePerformerProfileFail(err));\n\n          case 17:\n          case \"end\":\n            return _context15.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateDefaultPrice,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context16) {\n      while (1) {\n        switch (_context16.prev = _context16.next) {\n          case 0:\n            _context16.prev = 0;\n            _context16.next = 3;\n            return put(setupdatingPerformerProfile());\n\n          case 3:\n            _context16.next = 5;\n            return performerService.updateDefaultPrice(action.payload);\n\n          case 5:\n            resp = _context16.sent;\n            _context16.next = 8;\n            return put(updatePerformerProfileSuccess(resp.data));\n\n          case 8:\n            _context16.next = 17;\n            break;\n\n          case 10:\n            _context16.prev = 10;\n            _context16.t0 = _context16[\"catch\"](0);\n            _context16.next = 14;\n            return Promise.resolve(_context16.t0);\n\n          case 14:\n            err = _context16.sent;\n            _context16.next = 17;\n            return put(updatePerformerProfileFail(err));\n\n          case 17:\n          case \"end\":\n            return _context16.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(performerSaga)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/performer/sagas.ts"],"names":["createSagas","flatten","omit","put","all","select","performerCategories","performerService","videoService","productService","galleryService","earningService","payoutRequestService","photoService","getPerformerCategoriesSuccess","getPerformerCategoriesFail","getPerformerCategories","searchPerformer","searchPerformerFail","searchPerformerSuccess","setPerformerSearching","updatePerformerProfile","updatePerformerProfileFail","updatePerformerProfileSuccess","setupdatingPerformerProfile","getPerformerDetails","getPerformerDetailsSuccess","getPerformerDetailsFail","setGettingPerformerDetails","getMyVideos","getMyVideosFail","getMyVideosSuccess","setgettingMyVideos","getMyProducts","getMyProductsSuccess","getMyProductsFail","setGettingMyProducts","getEarning","getEarningFail","getEarningSuccess","setGettingEarning","getMyPhotos","getMyPhotosSuccess","getMyPhotosFail","setgettingMyPhotos","getMyGalleries","getMyGalleriesSuccess","getMyGalleriesFail","setgettingMyGalleries","updatePaymentInfo","updateDirectDeposit","updateBitpay","updatePaxum","updateStreamingStatus","updateDefaultPrice","getPayoutRequest","setGettingPayoutRequest","getPayoutRequestSuccess","getPayoutRequestFail","performerSaga","on","worker","data","getList","payload","resp","Promise","resolve","error","action","search","state","performer","current","currentPerformer","filter","p","_id","total","updateMe","err","details","username","performerId","status","excludedId","limit","performerResponse","performerProductReponse","performerVideoResponse","performerGalleryResponse","relatedPerformerResponse","products","videos","galleries","forEach","v","g","map","relatedPerformers","myProduct","difDateQuery","earning","fromDate","toDate","query","stats","myVideos","myPhotos","updateDirectDepost"],"mappings":"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","sourcesContent":["/* eslint-disable no-return-assign */\nimport { createSagas } from '@lib/redux';\nimport { flatten, omit } from 'lodash';\nimport { put, all, select } from 'redux-saga/effects';\nimport {\n  IReduxAction,\n  IResponse,\n  IPerformSearch,\n  IPerformer,\n  IPerformerPaymentInfoUpdate,\n  IDataResponse,\n  IProduct,\n  IVideo,\n  IPerformerDirectDeposit,\n  IPerformerBitpay,\n  IPerformerPaxum,\n  IPerformerGallery,\n  IPerformerDefaultPrice\n} from 'src/interfaces';\nimport {\n  performerCategories,\n  performerService,\n  videoService,\n  productService,\n  galleryService,\n  earningService,\n  payoutRequestService\n} from 'src/services';\nimport { IPhoto } from 'src/interfaces/photo';\nimport { photoService } from '@services/photo.service';\nimport {\n  getPerformerCategoriesSuccess,\n  getPerformerCategoriesFail,\n  getPerformerCategories,\n  searchPerformer,\n  searchPerformerFail,\n  searchPerformerSuccess,\n  setPerformerSearching,\n  updatePerformerProfile,\n  updatePerformerProfileFail,\n  updatePerformerProfileSuccess,\n  setupdatingPerformerProfile,\n  getPerformerDetails,\n  getPerformerDetailsSuccess,\n  getPerformerDetailsFail,\n  setGettingPerformerDetails,\n  getMyVideos,\n  getMyVideosFail,\n  getMyVideosSuccess,\n  setgettingMyVideos,\n  getMyProducts,\n  getMyProductsSuccess,\n  getMyProductsFail,\n  setGettingMyProducts,\n  getEarning,\n  getEarningFail,\n  getEarningSuccess,\n  setGettingEarning,\n  getMyPhotos,\n  getMyPhotosSuccess,\n  getMyPhotosFail,\n  setgettingMyPhotos,\n  getMyGalleries,\n  getMyGalleriesSuccess,\n  getMyGalleriesFail,\n  setgettingMyGalleries,\n  updatePaymentInfo,\n  updateDirectDeposit,\n  updateBitpay,\n  updatePaxum,\n  updateStreamingStatus,\n  updateDefaultPrice,\n  getPayoutRequest,\n  setGettingPayoutRequest,\n  getPayoutRequestSuccess,\n  getPayoutRequestFail\n} from './actions';\n\nconst performerSaga = [\n  {\n    on: getPerformerCategories,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp: IResponse<any> = yield performerCategories.getList(\n          data.payload\n        );\n\n        yield put(getPerformerCategoriesSuccess(resp.data));\n      } catch (err) {\n        const error = yield Promise.resolve(err);\n        yield put(getPerformerCategoriesFail(error));\n      }\n    }\n  },\n  {\n    on: searchPerformer,\n    * worker(action: IReduxAction<IPerformSearch>) {\n      try {\n        yield put(setPerformerSearching());\n        const resp: IResponse<IDataResponse<\n          IPerformer\n        >> = yield performerService.search(action.payload);\n        const currentPerformer = yield select(\n          (state) => state.performer.current\n        );\n        const data = resp.data.data.filter((p) => p._id !== currentPerformer._id);\n        const total = currentPerformer?._id ? resp.data.total - 1 : resp.data.total;\n        yield put(searchPerformerSuccess({ data, total }));\n      } catch (err) {\n        const error = yield Promise.resolve(err);\n        yield put(searchPerformerFail(error));\n      }\n    }\n  },\n  {\n    on: updatePerformerProfile,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateMe(\n          data.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n        // if this is current user, reload user info?\n      } catch (e) {\n        // TODO - alert error\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: getPerformerDetails,\n    * worker(data: IReduxAction<IPerformer>) {\n      try {\n        yield put(setGettingPerformerDetails());\n        const [\n          performerResponse,\n          performerProductReponse,\n          performerVideoResponse,\n          performerGalleryResponse,\n          relatedPerformerResponse\n        ]: [\n          IResponse<IPerformer>,\n          IResponse<IDataResponse<IProduct>>,\n          IResponse<IDataResponse<IVideo>>,\n          IResponse<IDataResponse<IPerformerGallery>>,\n          IResponse<IDataResponse<IPerformer>>\n        ] = yield all([\n          performerService.details(data.payload.username),\n          productService.search({\n            performerId: data.payload._id,\n            status: 'active'\n          }),\n          videoService.search({\n            performerId: data.payload._id,\n            status: 'active'\n          }),\n          galleryService.search(\n            {\n              performerId: data.payload._id,\n              status: 'active'\n            },\n            false\n          ),\n          performerService.search({ status: 'active', excludedId: data.payload._id, limit: 12 })\n        ]);\n        const products: Record<string, IProduct> = {};\n        const videos: Record<string, IVideo> = {};\n        const galleries: Record<string, IPerformerGallery> = {};\n        performerProductReponse.data.data.forEach((p) => (products[p._id] = p));\n        performerVideoResponse.data.data.forEach((v) => (videos[v._id] = v));\n        performerGalleryResponse.data.data.forEach(\n          (g) => (galleries[g._id] = g)\n        );\n        yield put(\n          getPerformerDetailsSuccess({\n            performer: {\n              ...performerResponse.data,\n              products: performerProductReponse.data.data.map((p) => p._id),\n              videos: performerVideoResponse.data.data.map((v) => v._id),\n              galleries: performerGalleryResponse.data.data.map((g) => g._id),\n              relatedPerformers: relatedPerformerResponse.data.data\n            },\n            // photos,\n            videos,\n            products,\n            galleries\n          })\n        );\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPerformerDetailsFail(err));\n      }\n    }\n  },\n  {\n    on: getMyProducts,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingMyProducts());\n        const resp: IResponse<IDataResponse<\n          IProduct\n        >> = yield performerService.myProduct(action.payload);\n        yield put(getMyProductsSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyProductsFail(err));\n      }\n    }\n  },\n  {\n    on: getEarning,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingEarning());\n        let difDateQuery = false;\n        const earning = yield select((state) => state.performer.earning);\n        const { fromDate, toDate } = action.payload;\n        const query = omit(action.payload, ['fromDate', 'toDate']);\n        if (fromDate && toDate) {\n          query.fromDate = fromDate;\n          query.toDate = toDate;\n        }\n\n        if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n\n        const [resp, stats] = yield all([\n          earningService.search(query),\n          earning.stats && !difDateQuery\n            ? earning.stats\n            : earningService.stats(query)\n        ]);\n        yield put(getEarningSuccess({ ...query, stats, data: resp.data }));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getEarningFail(err));\n      }\n    }\n  },\n  {\n    on: getPayoutRequest,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingPayoutRequest());\n        const [resp] = yield all([payoutRequestService.search(action.payload)]);\n        yield put(getPayoutRequestSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPayoutRequestFail(err));\n      }\n    }\n  },\n  {\n    on: getMyVideos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setgettingMyVideos());\n        const resp: IResponse<IDataResponse<\n          IVideo\n        >> = yield videoService.myVideos(action.payload);\n        yield put(getMyVideosSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyVideosFail(err));\n      }\n    }\n  },\n  {\n    on: getMyPhotos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setgettingMyPhotos());\n        const resp: IResponse<IDataResponse<\n          IPhoto\n        >> = yield photoService.myPhotos(action.payload);\n        yield put(getMyPhotosSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyPhotosFail(err));\n      }\n    }\n  },\n  {\n    on: getMyGalleries,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setgettingMyGalleries());\n        const resp: IResponse<IDataResponse<\n          IPhoto\n        >> = yield galleryService.search(action.payload);\n        yield put(getMyGalleriesSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMyGalleriesFail(err));\n      }\n    }\n  },\n  {\n    on: updatePaymentInfo,\n    * worker(action: IReduxAction<IPerformerPaymentInfoUpdate>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updatePaymentInfo(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateDirectDeposit,\n    * worker(action: IReduxAction<IPerformerDirectDeposit>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateDirectDepost(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateBitpay,\n    * worker(action: IReduxAction<IPerformerBitpay>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateBitpay(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updatePaxum,\n    * worker(action: IReduxAction<IPerformerPaxum>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updatePaxum(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateStreamingStatus,\n    * worker(action: IReduxAction<string>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateStreamingStatus(\n          { status: action.payload }\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  },\n  {\n    on: updateDefaultPrice,\n    * worker(action: IReduxAction<IPerformerDefaultPrice>) {\n      try {\n        yield put(setupdatingPerformerProfile());\n        const resp: IResponse<IPerformer> = yield performerService.updateDefaultPrice(\n          action.payload\n        );\n        yield put(updatePerformerProfileSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updatePerformerProfileFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(performerSaga)]);\n"]},"metadata":{},"sourceType":"module"}