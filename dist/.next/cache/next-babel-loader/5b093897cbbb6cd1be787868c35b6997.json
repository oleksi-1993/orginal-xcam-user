{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { getResponseError } from 'src/lib';\nimport { photoService } from 'src/services';\nimport { getPerformerPhotos, gettingPerformerPhotos, getPerformerPhotosSuccess, getPerformerPhotosFail } from './actions';\nvar photosSagas = [{\n  on: getPerformerPhotos,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(gettingPerformerPhotos());\n\n          case 3:\n            _context.next = 5;\n            return photoService.search(action.payload);\n\n          case 5:\n            resp = _context.sent;\n            _context.next = 8;\n            return put(getPerformerPhotosSuccess({\n              data: resp.data.data,\n              total: resp.data.total\n            }));\n\n          case 8:\n            _context.next = 15;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            err = getResponseError(_context.t0);\n            _context.next = 15;\n            return put(getPerformerPhotosFail(err));\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(photosSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/photos/sagas.ts"],"names":["put","flatten","createSagas","getResponseError","photoService","getPerformerPhotos","gettingPerformerPhotos","getPerformerPhotosSuccess","getPerformerPhotosFail","photosSagas","on","worker","action","search","payload","resp","data","total","err"],"mappings":";AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAIA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,yBAHF,EAIEC,sBAJF,QAKO,WALP;AAOA,IAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,EAAE,EAAEL,kBADN;AAEIM,EAAAA,MAFJ,wDAEWC,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMZ,GAAG,CAACM,sBAAsB,EAAvB,CAAT;;AAJN;AAAA;AAKqD,mBAAMF,YAAY,CAACS,MAAb,CAAoBD,MAAM,CAACE,OAA3B,CAAN;;AALrD;AAKYC,YAAAA,IALZ;AAAA;AAMM,mBAAMf,GAAG,CAACO,yBAAyB,CAAC;AAAES,cAAAA,IAAI,EAAED,IAAI,CAACC,IAAL,CAAUA,IAAlB;AAAwBC,cAAAA,KAAK,EAAEF,IAAI,CAACC,IAAL,CAAUC;AAAzC,aAAD,CAA1B,CAAT;;AANN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQYC,YAAAA,GARZ,GAQkBf,gBAAgB,aARlC;AAAA;AASM,mBAAMH,GAAG,CAACQ,sBAAsB,CAACU,GAAD,CAAvB,CAAT;;AATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADkB,CAApB;AAgBA,eAAejB,OAAO,CAAC,CAACC,WAAW,CAACO,WAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport {\n  IReduxAction, IResponse, IDataResponse, IPhoto\n} from 'src/interfaces';\nimport { getResponseError } from 'src/lib';\nimport { photoService } from 'src/services';\nimport {\n  getPerformerPhotos,\n  gettingPerformerPhotos,\n  getPerformerPhotosSuccess,\n  getPerformerPhotosFail\n} from './actions';\n\nconst photosSagas = [\n  {\n    on: getPerformerPhotos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerPhotos());\n        const resp: IResponse<IDataResponse<IPhoto>> = yield photoService.search(action.payload);\n        yield put(getPerformerPhotosSuccess({ data: resp.data.data, total: resp.data.total }));\n      } catch (error) {\n        const err = getResponseError(error);\n        yield put(getPerformerPhotosFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(photosSagas)]);\n"]},"metadata":{},"sourceType":"module"}