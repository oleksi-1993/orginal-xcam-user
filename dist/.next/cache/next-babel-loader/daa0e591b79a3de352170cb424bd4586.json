{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { updateSettings } from './actions'; // TODO -\n\nconst initialState = {\n  countries: []\n};\nconst settingReducers = [{\n  on: updateSettings,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), data.payload);\n  }\n\n}];\nexport default merge({}, createReducers('settings', [settingReducers], initialState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/settings/reducers.ts"],"names":["merge","createReducers","updateSettings","initialState","countries","settingReducers","on","reducer","state","data","payload"],"mappings":";;;;;;AAAA,SAASA,KAAT,QAAsB,QAAtB;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SAASC,cAAT,QAA+B,WAA/B,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE;AADQ,CAArB;AAIA,MAAMC,eAAe,GAAG,CACtB;AACEC,EAAAA,EAAE,EAAEJ,cADN;;AAEEK,EAAAA,OAAO,CAACC,KAAD,EAAaC,IAAb,EAAwB;AAC7B,2CACKD,KADL,GAEKC,IAAI,CAACC,OAFV;AAID;;AAPH,CADsB,CAAxB;AAYA,eAAeV,KAAK,CAAC,EAAD,EAAKC,cAAc,CAAC,UAAD,EAAa,CAACI,eAAD,CAAb,EAAgCF,YAAhC,CAAnB,CAApB","sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { updateSettings } from './actions';\n\n// TODO -\nconst initialState = {\n  countries: []\n};\n\nconst settingReducers = [\n  {\n    on: updateSettings,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        ...data.payload\n      };\n    }\n  }\n];\n\nexport default merge({}, createReducers('settings', [settingReducers], initialState));\n"]},"metadata":{},"sourceType":"module"}