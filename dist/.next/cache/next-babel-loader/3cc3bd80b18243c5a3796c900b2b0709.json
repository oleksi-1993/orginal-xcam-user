{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService, performerService, studioService } from 'src/services';\nimport { PERFORMER_ROLE, USER_ROLE, STUDIO_ROLE } from 'src/services/api-request';\nimport { message } from 'antd';\nimport { updateCurrentStudio } from '../studio/actions';\nimport { updateCurrentPerformer } from '../performer/actions';\nimport { updateCurrentUser } from '../user/actions';\nimport { login, loginSuccess, logout, loginFail, performerRegister, performerRegisterFail, setPerformerRegisterSubmitting, loginRequesting, userRegister, userRegisterFail, userRegisterSuccess, setUserRegisterSubmitting, performerRegisterSuccess, performerlogin, performerloginFail, performerloginSuccess, studioLogin, studioLoginSuccess, studioLoginFail, updatePassword, updatePasswordSuccess, updatePasswordFail, setUpdatePasswordSubmitting } from './actions';\nconst authSagas = [{\n  on: login,\n\n  *worker(data) {\n    try {\n      yield put(loginRequesting());\n      const payload = data.payload;\n      const resp = (yield authService.login(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setAuthHeader(resp.token, USER_ROLE);\n      const userResp = (yield userService.me()).data;\n      yield put(updateCurrentUser(userResp));\n      yield put(loginSuccess());\n      Router.push('/');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(loginFail(error));\n    }\n  }\n\n}, {\n  on: performerlogin,\n\n  *worker(data) {\n    try {\n      yield put(loginRequesting());\n      const payload = data.payload;\n      const resp = (yield authService.performerLogin(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setAuthHeader(resp.token, PERFORMER_ROLE);\n      const performerResp = (yield performerService.me()).data;\n      yield put(updateCurrentPerformer(performerResp));\n      yield put(performerloginSuccess());\n      Router.push('/live');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(performerloginFail(error));\n    }\n  }\n\n}, {\n  on: studioLogin,\n\n  *worker(data) {\n    try {\n      yield put(loginRequesting());\n      const payload = data.payload;\n      const resp = (yield authService.studioLogin(payload)).data; // store token, update store and redirect to dashboard page\n\n      yield authService.setAuthHeader(resp.token, STUDIO_ROLE);\n      const studioResp = (yield studioService.me()).data;\n      yield put(updateCurrentStudio(studioResp));\n      yield put(studioLoginSuccess());\n      Router.push('/studio/account-settings');\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(studioLoginFail(error));\n    }\n  }\n\n}, {\n  on: performerRegister,\n\n  *worker(data) {\n    try {\n      yield put(setPerformerRegisterSubmitting());\n      const {\n        payload\n      } = data;\n      const resp = yield authService.performersRegister(payload);\n      yield put(performerRegisterSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(performerRegisterFail(error));\n    }\n  }\n\n}, {\n  on: logout,\n\n  *worker() {\n    try {\n      yield authService.removeToken();\n      yield authService.removeRemember();\n      Router.push('/');\n      message.success('Log out!');\n    } catch (e) {\n      message.error('Something went wrong!');\n    }\n  }\n\n}, {\n  on: userRegister,\n\n  *worker(data) {\n    try {\n      yield put(setUserRegisterSubmitting());\n      const resp = yield authService.userRegister(data.payload);\n      yield put(userRegisterSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(userRegisterFail(error));\n    }\n  }\n\n}, {\n  on: updatePassword,\n\n  *worker(action) {\n    try {\n      yield put(setUpdatePasswordSubmitting());\n      const resp = yield authService.updatePassword(action.payload);\n      yield put(updatePasswordSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(updatePasswordFail(error));\n    }\n  }\n\n}];\nexport default flatten([createSagas(authSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/auth/sagas.ts"],"names":["flatten","put","createSagas","Router","authService","userService","performerService","studioService","PERFORMER_ROLE","USER_ROLE","STUDIO_ROLE","message","updateCurrentStudio","updateCurrentPerformer","updateCurrentUser","login","loginSuccess","logout","loginFail","performerRegister","performerRegisterFail","setPerformerRegisterSubmitting","loginRequesting","userRegister","userRegisterFail","userRegisterSuccess","setUserRegisterSubmitting","performerRegisterSuccess","performerlogin","performerloginFail","performerloginSuccess","studioLogin","studioLoginSuccess","studioLoginFail","updatePassword","updatePasswordSuccess","updatePasswordFail","setUpdatePasswordSubmitting","authSagas","on","worker","data","payload","resp","setAuthHeader","token","userResp","me","push","e","error","Promise","resolve","performerLogin","performerResp","studioResp","performersRegister","removeToken","removeRemember","success","action"],"mappings":"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","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport {\n  authService,\n  userService,\n  performerService,\n  studioService\n} from 'src/services';\nimport {\n  PERFORMER_ROLE,\n  USER_ROLE,\n  STUDIO_ROLE\n} from 'src/services/api-request';\nimport {\n  ILogin,\n  IperformerLogin,\n  IRegisterFormData,\n  IUserRegisterFormData,\n  IReduxAction,\n  IResponse,\n  IPerformer,\n  IUser,\n  IUpdatePasswordFormData\n} from 'src/interfaces';\nimport { message } from 'antd';\nimport { updateCurrentStudio } from '../studio/actions';\nimport { updateCurrentPerformer } from '../performer/actions';\nimport { updateCurrentUser } from '../user/actions';\nimport {\n  login,\n  loginSuccess,\n  logout,\n  loginFail,\n  performerRegister,\n  performerRegisterFail,\n  setPerformerRegisterSubmitting,\n  loginRequesting,\n  userRegister,\n  userRegisterFail,\n  userRegisterSuccess,\n  setUserRegisterSubmitting,\n  performerRegisterSuccess,\n  performerlogin,\n  performerloginFail,\n  performerloginSuccess,\n  studioLogin,\n  studioLoginSuccess,\n  studioLoginFail,\n  updatePassword,\n  updatePasswordSuccess,\n  updatePasswordFail,\n  setUpdatePasswordSubmitting\n} from './actions';\n\nconst authSagas = [\n  {\n    on: login,\n    * worker(data: any) {\n      try {\n        yield put(loginRequesting());\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.login(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setAuthHeader(resp.token, USER_ROLE);\n\n        const userResp = (yield userService.me()).data;\n        yield put(updateCurrentUser(userResp));\n        yield put(loginSuccess());\n\n        Router.push('/');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: performerlogin,\n    * worker(data: any) {\n      try {\n        yield put(loginRequesting());\n        const payload = data.payload as IperformerLogin;\n        const resp = (yield authService.performerLogin(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setAuthHeader(resp.token, PERFORMER_ROLE);\n        const performerResp = (yield performerService.me()).data;\n        yield put(updateCurrentPerformer(performerResp));\n        yield put(performerloginSuccess());\n        Router.push('/live');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(performerloginFail(error));\n      }\n    }\n  },\n\n  {\n    on: studioLogin,\n    * worker(data: IReduxAction<ILogin>) {\n      try {\n        yield put(loginRequesting());\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.studioLogin(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setAuthHeader(resp.token, STUDIO_ROLE);\n        const studioResp = (yield studioService.me()).data;\n        yield put(updateCurrentStudio(studioResp));\n        yield put(studioLoginSuccess());\n        Router.push('/studio/account-settings');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(studioLoginFail(error));\n      }\n    }\n  },\n  {\n    on: performerRegister,\n    * worker(data: IReduxAction<IRegisterFormData>) {\n      try {\n        yield put(setPerformerRegisterSubmitting());\n        const { payload } = data;\n        const resp: IResponse<IPerformer> = yield authService.performersRegister(\n          payload\n        );\n        yield put(performerRegisterSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(performerRegisterFail(error));\n      }\n    }\n  },\n  {\n    on: logout,\n    * worker() {\n      try {\n        yield authService.removeToken();\n        yield authService.removeRemember();\n        Router.push('/');\n        message.success('Log out!');\n      } catch (e) {\n        message.error('Something went wrong!');\n      }\n    }\n  },\n  {\n    on: userRegister,\n    * worker(data: IReduxAction<IUserRegisterFormData>) {\n      try {\n        yield put(setUserRegisterSubmitting());\n        const resp: IResponse<IUser> = yield authService.userRegister(\n          data.payload\n        );\n        yield put(userRegisterSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(userRegisterFail(error));\n      }\n    }\n  },\n  {\n    on: updatePassword,\n    * worker(action: IReduxAction<IUpdatePasswordFormData>) {\n      try {\n        yield put(setUpdatePasswordSubmitting());\n        const resp: IResponse<IUser> = yield authService.updatePassword(\n          action.payload\n        );\n        yield put(updatePasswordSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(updatePasswordFail(error));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(authSagas)]);\n"]},"metadata":{},"sourceType":"module"}