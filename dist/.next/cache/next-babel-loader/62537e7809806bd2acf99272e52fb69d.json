{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { getBannersSuccess, getBannersFail } from './actions';\nvar initialState = {\n  listBanners: {\n    loading: false,\n    data: [],\n    error: null,\n    success: false\n  }\n};\nvar bannerReducer = [{\n  on: getBannersSuccess,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      listBanners: {\n        loading: false,\n        data: data.payload,\n        error: null,\n        success: true\n      }\n    });\n  }\n}, {\n  on: getBannersFail,\n  reducer: function reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      listBanners: _objectSpread(_objectSpread({}, state.listBanners), {}, {\n        loading: false,\n        data: null,\n        error: data.payload,\n        success: false\n      })\n    });\n  }\n}];\nexport default merge({}, createReducers('banner', [bannerReducer], initialState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/banner/reducers.ts"],"names":["createReducers","merge","getBannersSuccess","getBannersFail","initialState","listBanners","loading","data","error","success","bannerReducer","on","reducer","state","payload"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,YAA/B;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,SAASC,iBAAT,EAA4BC,cAA5B,QAAkD,WAAlD;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AACXC,IAAAA,OAAO,EAAE,KADE;AAEXC,IAAAA,IAAI,EAAE,EAFK;AAGXC,IAAAA,KAAK,EAAE,IAHI;AAIXC,IAAAA,OAAO,EAAE;AAJE;AADM,CAArB;AASA,IAAMC,aAAa,GAAG,CACpB;AACEC,EAAAA,EAAE,EAAET,iBADN;AAEEU,EAAAA,OAFF,mBAEUC,KAFV,EAEsBN,IAFtB,EAEiC;AAC7B,2CACKM,KADL;AAEER,MAAAA,WAAW,EAAE;AACXC,QAAAA,OAAO,EAAE,KADE;AAEXC,QAAAA,IAAI,EAAEA,IAAI,CAACO,OAFA;AAGXN,QAAAA,KAAK,EAAE,IAHI;AAIXC,QAAAA,OAAO,EAAE;AAJE;AAFf;AASD;AAZH,CADoB,EAepB;AACEE,EAAAA,EAAE,EAAER,cADN;AAEES,EAAAA,OAFF,mBAEUC,KAFV,EAEsBN,IAFtB,EAEiC;AAC7B,2CACKM,KADL;AAEER,MAAAA,WAAW,kCACNQ,KAAK,CAACR,WADA;AAETC,QAAAA,OAAO,EAAE,KAFA;AAGTC,QAAAA,IAAI,EAAE,IAHG;AAITC,QAAAA,KAAK,EAAED,IAAI,CAACO,OAJH;AAKTL,QAAAA,OAAO,EAAE;AALA;AAFb;AAUD;AAbH,CAfoB,CAAtB;AAgCA,eAAeR,KAAK,CAClB,EADkB,EAElBD,cAAc,CAAC,QAAD,EAAW,CAACU,aAAD,CAAX,EAA4BN,YAA5B,CAFI,CAApB","sourcesContent":["import { createReducers } from '@lib/redux';\nimport { merge } from 'lodash';\nimport { getBannersSuccess, getBannersFail } from './actions';\n\nconst initialState = {\n  listBanners: {\n    loading: false,\n    data: [],\n    error: null,\n    success: false\n  }\n};\n\nconst bannerReducer = [\n  {\n    on: getBannersSuccess,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        listBanners: {\n          loading: false,\n          data: data.payload,\n          error: null,\n          success: true\n        }\n      };\n    }\n  },\n  {\n    on: getBannersFail,\n    reducer(state: any, data: any) {\n      return {\n        ...state,\n        listBanners: {\n          ...state.listBanners,\n          loading: false,\n          data: null,\n          error: data.payload,\n          success: false\n        }\n      };\n    }\n  }\n];\n\nexport default merge(\n  {},\n  createReducers('banner', [bannerReducer], initialState)\n);\n"]},"metadata":{},"sourceType":"module"}