{"ast":null,"code":"var _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\pages\\\\auth\\\\register\\\\user.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport '../index.less';\nimport { PureComponent } from 'react';\nimport { message, Alert } from 'antd';\nimport { connect } from 'react-redux';\nimport Head from 'next/head';\nimport RegisterForm from '@components/auth/register/user-register-form';\nimport { userRegister } from '@redux/auth/actions';\nimport Router from 'next/router';\nimport { settingService } from '@services/setting.service';\nimport { getResponseError } from '@lib/utils';\nimport moment from 'moment';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\n\nclass UserRegisterPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false,\n      errorMessage: '',\n      countries: []\n    };\n  }\n\n  componentDidMount() {\n    this.getContries();\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      success,\n      error\n    } = this.props;\n\n    if (prevProps.success !== success && success) {\n      message.success('Congrats, your account has been created');\n      Router.push('/auth/login');\n    }\n\n    if (prevProps.error !== error && error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  async getContries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({\n        countries: countries.data\n      });\n    } catch (error) {\n      this.setState({\n        error: true,\n        errorMessage: getResponseError(error)\n      });\n    }\n  }\n\n  submit(data) {\n    const {\n      userRegister: dispatchUserRegister\n    } = this.props;\n\n    let newData = _objectSpread({}, data);\n\n    if (data.dateOfBirth) {\n      newData = _objectSpread(_objectSpread({}, data), {}, {\n        dateOfBirth: moment(data.dateOfBirth).toISOString()\n      }); // if (data.dateOfBirth) {\n      //   data.dateOfBirth = moment(data.dateOfBirth).toISOString();\n    }\n\n    dispatchUserRegister(newData);\n  }\n\n  render() {\n    const {\n      requesting,\n      ui\n    } = this.props;\n    const {\n      error,\n      errorMessage,\n      countries\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Head, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, __jsx(\"title\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, \"User Register\")), __jsx(\"div\", {\n      className: \"register-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"form-register-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, errorMessage && __jsx(Alert, {\n      type: \"error\",\n      message: \"Error request\",\n      banner: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 31\n      }\n    }), __jsx(RegisterForm, {\n      singularTextModel: (ui === null || ui === void 0 ? void 0 : ui.singularTextModel) || 'Performer',\n      error: error,\n      onFinish: this.submit.bind(this),\n      submiting: requesting,\n      countries: countries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    })), __jsx(FormRegisterPlaceHolder, {\n      ui: ui,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\n_defineProperty(UserRegisterPage, \"authenticate\", false);\n\n_defineProperty(UserRegisterPage, \"layout\", 'public');\n\nconst mapStateToProps = state => _objectSpread({\n  ui: state.ui,\n  loggedIn: state.auth.loggedIn\n}, state.auth.userRegister);\n\nconst mapDispatch = {\n  userRegister\n};\nexport default connect(mapStateToProps, mapDispatch)(UserRegisterPage);","map":{"version":3,"sources":["E:/programData/React/user/pages/auth/register/user.tsx"],"names":["PureComponent","message","Alert","connect","Head","RegisterForm","userRegister","Router","settingService","getResponseError","moment","FormRegisterPlaceHolder","UserRegisterPage","constructor","props","state","error","errorMessage","countries","componentDidMount","getContries","componentDidUpdate","prevProps","success","push","getCountries","setState","data","submit","dispatchUserRegister","newData","dateOfBirth","toISOString","render","requesting","ui","singularTextModel","bind","mapStateToProps","loggedIn","auth","mapDispatch"],"mappings":"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","sourcesContent":["import '../index.less';\nimport { PureComponent } from 'react';\nimport { message, Alert } from 'antd';\nimport { connect } from 'react-redux';\nimport Head from 'next/head';\nimport RegisterForm from '@components/auth/register/user-register-form';\nimport { IUserRegisterFormData, ICountries, IUIConfig } from 'src/interfaces';\nimport { userRegister } from '@redux/auth/actions';\nimport Router from 'next/router';\nimport { settingService } from '@services/setting.service';\nimport { getResponseError } from '@lib/utils';\nimport moment from 'moment';\nimport { FormRegisterPlaceHolder } from '@components/common/layout';\n\ninterface UserRegisterProps {\n  requesting: boolean;\n  userRegister: Function;\n  loggedIn: boolean;\n  success: boolean;\n  error: any;\n  ui: IUIConfig;\n}\ninterface UserRegisterStates {\n  error: boolean;\n  errorMessage: string;\n  countries: ICountries[];\n}\n\nclass UserRegisterPage extends PureComponent<\n  UserRegisterProps,\n  UserRegisterStates\n> {\n  static authenticate = false;\n\n  static layout: string = 'public';\n\n  constructor(props: UserRegisterProps) {\n    super(props);\n    this.state = {\n      error: false,\n      errorMessage: '',\n      countries: []\n    };\n  }\n\n  componentDidMount() {\n    this.getContries();\n  }\n\n  componentDidUpdate(prevProps: UserRegisterProps) {\n    const { success, error } = this.props;\n    if (prevProps.success !== success && success) {\n      message.success(\n        'Congrats, your account has been created'\n      );\n      Router.push('/auth/login');\n    }\n\n    if (prevProps.error !== error && error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  async getContries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({ countries: countries.data });\n    } catch (error) {\n      this.setState({ error: true, errorMessage: getResponseError(error) });\n    }\n  }\n\n  submit(data: IUserRegisterFormData) {\n    const { userRegister: dispatchUserRegister } = this.props;\n    let newData = { ...data };\n    if (data.dateOfBirth) {\n      newData = { ...data, dateOfBirth: moment(data.dateOfBirth).toISOString() };\n    // if (data.dateOfBirth) {\n    //   data.dateOfBirth = moment(data.dateOfBirth).toISOString();\n    }\n\n    dispatchUserRegister(newData);\n  }\n\n  render() {\n    const { requesting, ui } = this.props;\n    const { error, errorMessage, countries } = this.state;\n    return (\n      <>\n        <Head>\n          <title>User Register</title>\n        </Head>\n        <div className=\"register-page\">\n          <div className=\"form-register-container\">\n            {errorMessage && (<Alert type=\"error\" message=\"Error request\" banner />)}\n            <RegisterForm\n              singularTextModel={ui?.singularTextModel || 'Performer'}\n              error={error}\n              onFinish={this.submit.bind(this)}\n              submiting={requesting}\n              countries={countries}\n            />\n          </div>\n          <FormRegisterPlaceHolder ui={ui} />\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  ui: state.ui,\n  loggedIn: state.auth.loggedIn,\n  ...state.auth.userRegister\n});\nconst mapDispatch = { userRegister };\nexport default connect(mapStateToProps, mapDispatch)(UserRegisterPage);\n"]},"metadata":{},"sourceType":"module"}