{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\pages\\\\account\\\\user\\\\account-settings\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport { message, Tabs } from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport UserProfile from '@components/user/profile';\nimport Head from 'next/head';\nimport { settingService } from 'src/services/setting.service';\nimport { userService } from 'src/services/user.service';\nimport { updateUser } from 'src/redux/user/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\nimport './index.less';\n\nvar UserProfilePage = /*#__PURE__*/function (_PureComponent) {\n  _inherits(UserProfilePage, _PureComponent);\n\n  var _super = _createSuper(UserProfilePage);\n\n  function UserProfilePage(props) {\n    var _this;\n\n    _classCallCheck(this, UserProfilePage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      countries: [],\n      uploadedAvatar: '',\n      avatarUploading: false\n    };\n    return _this;\n  }\n\n  _createClass(UserProfilePage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var action = this.props.action;\n      if (!action || action === 'account-information') this.getCountries();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props = this.props,\n          success = _this$props.success,\n          updateUserError = _this$props.updateUserError,\n          auth = _this$props.auth,\n          action = _this$props.action;\n      var countries = this.state.countries;\n\n      if (prevProps.success !== success && success) {\n        message.success('Update Profile Success.');\n      }\n\n      if (prevProps.updateUserError !== updateUserError && updateUserError) {\n        message.error(getResponseError(updateUserError));\n      }\n\n      if (prevProps.auth.updatePassword.success !== auth.updatePassword.success && auth.updatePassword.success) {\n        message.success('Update Password Success.');\n      }\n\n      if (prevProps.auth.updatePassword.error !== auth.updatePassword.error && auth.updatePassword.error) {\n        message.error(getResponseError(auth.updatePassword.error));\n      }\n\n      if (!countries.length && action === 'account-information') {\n        this.getCountries();\n      }\n    }\n  }, {\n    key: \"onFinish\",\n    value: function onFinish(data) {\n      var _this$props2 = this.props,\n          user = _this$props2.user,\n          dispatchUpdateUser = _this$props2.updateUser;\n      dispatchUpdateUser(_objectSpread(_objectSpread({}, user), data));\n    }\n  }, {\n    key: \"onChangeAvatar\",\n    value: function onChangeAvatar(_ref) {\n      var file = _ref.file;\n\n      if (file.status === 'uploading') {\n        this.setState({\n          avatarUploading: true\n        });\n        return;\n      }\n\n      if (file.status === 'done') {\n        this.setState({\n          avatarUploading: false\n        });\n\n        if (file.response) {\n          this.setState({\n            uploadedAvatar: file.response.data.url\n          });\n        }\n      }\n    }\n  }, {\n    key: \"onTabsChange\",\n    value: function onTabsChange(key) {\n      Router.push({\n        pathname: '/account/user/account-settings',\n        query: {\n          action: key\n        }\n      }, \"/account/user/account-settings?action=\".concat(key), {\n        shallow: false\n      });\n    }\n  }, {\n    key: \"onPasswordChange\",\n    value: function onPasswordChange(data) {\n      var dispatchUpdatePassword = this.props.updatePassword;\n      dispatchUpdatePassword(data);\n    }\n  }, {\n    key: \"getCountries\",\n    value: function () {\n      var _getCountries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var countries;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return settingService.getCountries();\n\n              case 3:\n                countries = _context.sent;\n                this.setState({\n                  countries: countries.data\n                });\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                message.error(getResponseError(_context.t0));\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n\n      function getCountries() {\n        return _getCountries.apply(this, arguments);\n      }\n\n      return getCountries;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          user = _this$props3.user,\n          action = _this$props3.action,\n          auth = _this$props3.auth,\n          userUpdating = _this$props3.userUpdating;\n      var _this$state = this.state,\n          countries = _this$state.countries,\n          uploadedAvatar = _this$state.uploadedAvatar,\n          avatarUploading = _this$state.avatarUploading;\n      return __jsx(React.Fragment, null, __jsx(Head, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }\n      }, __jsx(\"title\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }, \"\".concat(user.username, \" Profile\"))), __jsx(\"div\", {\n        className: \"account-setting-page\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 9\n        }\n      }, __jsx(PageHeader, {\n        title: \"Account Settings\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }\n      }), __jsx(Tabs, {\n        activeKey: action || 'account-information',\n        style: {\n          padding: '0 24px'\n        },\n        size: \"large\",\n        onChange: this.onTabsChange.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }\n      }, __jsx(Tabs.TabPane, {\n        tab: \"Account Information\",\n        key: \"account-information\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }\n      }, __jsx(UserProfile, _extends({}, user, {\n        onFinish: this.onFinish.bind(this),\n        countries: countries,\n        onChangeAvatar: this.onChangeAvatar.bind(this),\n        uploadAvatarUrl: userService.getAvatarUploadUrl(),\n        uploadedAvatar: uploadedAvatar,\n        avatarUploading: avatarUploading,\n        loading: userUpdating,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }))), __jsx(Tabs.TabPane, {\n        key: \"change-password\",\n        tab: \"Change Password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }\n      }, __jsx(PasswordChange, _extends({\n        onFinish: this.onPasswordChange.bind(this)\n      }, auth.updatePassword, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }))))));\n    }\n  }], [{\n    key: \"getInitialProps\",\n    value: function getInitialProps(_ref2) {\n      var ctx = _ref2.ctx;\n      var query = ctx.query;\n      return {\n        action: query.action\n      };\n    }\n  }]);\n\n  return UserProfilePage;\n}(PureComponent);\n\n_defineProperty(UserProfilePage, \"authenticate\", true);\n\n_defineProperty(UserProfilePage, \"layout\", 'primary');\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    user: state.user.current,\n    userUpdating: state.user.userUpdating,\n    success: state.user.updateUserSuccess,\n    updateUserError: state.user.updateUserError,\n    auth: state.auth\n  };\n};\n\nvar mapDispatch = {\n  updateUser: updateUser,\n  updatePassword: updatePassword\n};\nexport default connect(mapStateToProps, mapDispatch)(UserProfilePage);","map":{"version":3,"sources":["E:/programData/React/user/pages/account/user/account-settings/index.tsx"],"names":["React","PureComponent","message","Tabs","PageHeader","connect","UserProfile","Head","settingService","userService","updateUser","updatePassword","getResponseError","Router","PasswordChange","UserProfilePage","props","state","countries","uploadedAvatar","avatarUploading","action","getCountries","prevProps","success","updateUserError","auth","error","length","data","user","dispatchUpdateUser","file","status","setState","response","url","key","push","pathname","query","shallow","dispatchUpdatePassword","userUpdating","username","padding","onTabsChange","bind","onFinish","onChangeAvatar","getAvatarUploadUrl","onPasswordChange","ctx","mapStateToProps","current","updateUserSuccess","mapDispatch"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport {\n  message, Tabs\n} from 'antd';\nimport PageHeader from '@components/common/layout/page-header';\nimport { connect } from 'react-redux';\nimport {\n  IUser,\n  ICountries,\n  IUserUpdateFormData,\n  IUpdatePasswordFormData\n} from 'src/interfaces';\nimport UserProfile from '@components/user/profile';\nimport Head from 'next/head';\nimport { settingService } from 'src/services/setting.service';\nimport { userService } from 'src/services/user.service';\nimport { updateUser } from 'src/redux/user/actions';\nimport { updatePassword } from 'src/redux/auth/actions';\nimport { getResponseError } from '@lib/utils';\nimport Router from 'next/router';\nimport PasswordChange from '@components/auth/password-change';\n\nimport './index.less';\n\ninterface IProps {\n  user: IUser;\n  action: string;\n  auth: any;\n  updateUser(data: IUserUpdateFormData): Function;\n  updatePassword(data: IUpdatePasswordFormData): Function;\n  userUpdating: boolean;\n  success: boolean;\n  updateUserError: any;\n}\n\ninterface IStates {\n  countries: ICountries[];\n  avatarUploading: boolean;\n  uploadedAvatar: string;\n}\n\nclass UserProfilePage extends PureComponent<IProps, IStates> {\n  static authenticate = true;\n\n  static layout = 'primary';\n\n  static getInitialProps({ ctx }) {\n    const { query } = ctx;\n    return {\n      action: query.action\n    };\n  }\n\n  constructor(props: IProps) {\n    super(props);\n    this.state = {\n      countries: [],\n      uploadedAvatar: '',\n      avatarUploading: false\n    };\n  }\n\n  componentDidMount() {\n    const { action } = this.props;\n    if (!action || action === 'account-information') this.getCountries();\n  }\n\n  componentDidUpdate(prevProps: IProps) {\n    const {\n      success, updateUserError, auth, action\n    } = this.props;\n    const { countries } = this.state;\n    if (prevProps.success !== success && success) {\n      message.success('Update Profile Success.');\n    }\n\n    if (prevProps.updateUserError !== updateUserError && updateUserError) {\n      message.error(getResponseError(updateUserError));\n    }\n\n    if (\n      prevProps.auth.updatePassword.success !== auth.updatePassword.success\n      && auth.updatePassword.success\n    ) {\n      message.success('Update Password Success.');\n    }\n\n    if (\n      prevProps.auth.updatePassword.error !== auth.updatePassword.error\n      && auth.updatePassword.error\n    ) {\n      message.error(getResponseError(auth.updatePassword.error));\n    }\n\n    if (!countries.length && action === 'account-information') {\n      this.getCountries();\n    }\n  }\n\n  onFinish(data: any) {\n    const { user, updateUser: dispatchUpdateUser } = this.props;\n    dispatchUpdateUser({ ...user, ...data });\n  }\n\n  onChangeAvatar({ file }) {\n    if (file.status === 'uploading') {\n      this.setState({ avatarUploading: true });\n      return;\n    }\n\n    if (file.status === 'done') {\n      this.setState({ avatarUploading: false });\n      if (file.response) {\n        this.setState({\n          uploadedAvatar: file.response.data.url\n        });\n      }\n    }\n  }\n\n  onTabsChange(key: string) {\n    Router.push(\n      { pathname: '/account/user/account-settings', query: { action: key } },\n      `/account/user/account-settings?action=${key}`,\n      { shallow: false }\n    );\n  }\n\n  onPasswordChange(data: IUpdatePasswordFormData) {\n    const { updatePassword: dispatchUpdatePassword } = this.props;\n    dispatchUpdatePassword(data);\n  }\n\n  async getCountries() {\n    try {\n      const countries = await settingService.getCountries();\n      this.setState({ countries: countries.data });\n    } catch (error) {\n      message.error(getResponseError(error));\n    }\n  }\n\n  render() {\n    const {\n      user, action, auth, userUpdating\n    } = this.props;\n    const { countries, uploadedAvatar, avatarUploading } = this.state;\n\n    return (\n      <>\n        <Head>\n          <title>{`${user.username} Profile`}</title>\n        </Head>\n        <div className=\"account-setting-page\">\n          <PageHeader title=\"Account Settings\" />\n          <Tabs\n            activeKey={action || 'account-information'}\n            style={{ padding: '0 24px' }}\n            size=\"large\"\n            onChange={this.onTabsChange.bind(this)}\n          >\n            <Tabs.TabPane tab=\"Account Information\" key=\"account-information\">\n              <UserProfile\n                {...user}\n                onFinish={this.onFinish.bind(this)}\n                countries={countries}\n                onChangeAvatar={this.onChangeAvatar.bind(this)}\n                uploadAvatarUrl={userService.getAvatarUploadUrl()}\n                uploadedAvatar={uploadedAvatar}\n                avatarUploading={avatarUploading}\n                loading={userUpdating}\n              />\n            </Tabs.TabPane>\n            {/* <Tabs.TabPane key=\"timezone\" tab=\"Timezone\">\n              <h3>\n                Sometimes the timezone is very important so make sure you alway\n                set up it correctly. We will contact you taking into\n                consideration the time zone and so may the performer do!\n              </h3>\n              <Form\n                onFinish={this.onFinish.bind(this)}\n                layout=\"vertical\"\n                initialValues={{ timezone: user.timezone }}\n                {...formItemLayout}\n              >\n                <Form.Item\n                  name=\"timezone\"\n                  key=\"timezone\"\n                  label=\"Timezone\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input your timezone!'\n                    }\n                  ]}\n                >\n                  <Timezones autoFocus />\n                </Form.Item>\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Save Changes\n                  </Button>\n                </Form.Item>\n              </Form>\n            </Tabs.TabPane> */}\n            <Tabs.TabPane key=\"change-password\" tab=\"Change Password\">\n              <PasswordChange\n                onFinish={this.onPasswordChange.bind(this)}\n                {...auth.updatePassword}\n              />\n            </Tabs.TabPane>\n          </Tabs>\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  user: state.user.current,\n  userUpdating: state.user.userUpdating,\n  success: state.user.updateUserSuccess,\n  updateUserError: state.user.updateUserError,\n  auth: state.auth\n});\nconst mapDispatch = { updateUser, updatePassword };\nexport default connect(mapStateToProps, mapDispatch)(UserProfilePage);\n"]},"metadata":{},"sourceType":"module"}