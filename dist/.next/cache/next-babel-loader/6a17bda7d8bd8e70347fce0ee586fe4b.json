{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { getResponseError } from 'src/lib';\nimport { createSagas } from '@lib/redux';\nimport { productService } from '@services/product.service';\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { getPerformerProducts, getPerformerProductsSuccess, getPerformerProductsFail, gettingPerformerProduct } from './actions';\nvar productSagas = [{\n  on: getPerformerProducts,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, products, ids, data, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(gettingPerformerProduct());\n\n          case 3:\n            _context.next = 5;\n            return productService.search(action.payload);\n\n          case 5:\n            resp = _context.sent;\n            products = resp.data.data;\n            ids = products.map(function (p) {\n              return p._id;\n            });\n            data = products.length && (products.length > 1 ? products.reduce(function (previousValue, currentValue, index) {\n              if (index === 1) {\n                var _ref;\n\n                return _ref = {}, _defineProperty(_ref, previousValue._id, previousValue), _defineProperty(_ref, currentValue._id, currentValue), _ref;\n              }\n\n              var value = _objectSpread({}, previousValue);\n\n              value[currentValue._id] = currentValue;\n              return value;\n            }) : _defineProperty({}, products[0]._id, products[0]));\n            _context.next = 11;\n            return put(getPerformerProductsSuccess({\n              data: data,\n              total: resp.data.total,\n              ids: ids\n            }));\n\n          case 11:\n            _context.next = 18;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](0);\n            err = getResponseError(_context.t0);\n            _context.next = 18;\n            return put(getPerformerProductsFail(err));\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 13]]);\n  })\n}];\nexport default flatten([createSagas(productSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/products/sagas.ts"],"names":["getResponseError","createSagas","productService","flatten","put","getPerformerProducts","getPerformerProductsSuccess","getPerformerProductsFail","gettingPerformerProduct","productSagas","on","worker","action","search","payload","resp","products","data","ids","map","p","_id","length","reduce","previousValue","currentValue","index","value","total","err"],"mappings":";;;;;;;AAAA,SAASA,gBAAT,QAAiC,SAAjC;AAEA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SACEC,oBADF,EAEEC,2BAFF,EAGEC,wBAHF,EAIEC,uBAJF,QAKO,WALP;AAOA,IAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAEL,oBADN;AAEIM,EAAAA,MAFJ,wDAEWC,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMR,GAAG,CAACI,uBAAuB,EAAxB,CAAT;;AAJN;AAAA;AAKsD,mBAAMN,cAAc,CAACW,MAAf,CAAsBD,MAAM,CAACE,OAA7B,CAAN;;AALtD;AAKYC,YAAAA,IALZ;AAMYC,YAAAA,QANZ,GAMuBD,IAAI,CAACE,IAAL,CAAUA,IANjC;AAOYC,YAAAA,GAPZ,GAOkBF,QAAQ,CAACG,GAAT,CAAa,UAACC,CAAD;AAAA,qBAAOA,CAAC,CAACC,GAAT;AAAA,aAAb,CAPlB;AAQYJ,YAAAA,IARZ,GAQmBD,QAAQ,CAACM,MAAT,KAAoBN,QAAQ,CAACM,MAAT,GAAkB,CAAlB,GAAsBN,QAAQ,CAACO,MAAT,CAAgB,UAACC,aAAD,EAAgBC,YAAhB,EAA8BC,KAA9B,EAAwC;AAC7G,kBAAIA,KAAK,KAAK,CAAd,EAAiB;AAAA;;AACf,wDAAUF,aAAa,CAACH,GAAxB,EAA8BG,aAA9B,yBAA8CC,YAAY,CAACJ,GAA3D,EAAiEI,YAAjE;AACD;;AAED,kBAAME,KAAK,qBAAQH,aAAR,CAAX;;AACAG,cAAAA,KAAK,CAACF,YAAY,CAACJ,GAAd,CAAL,GAA0BI,YAA1B;AACA,qBAAOE,KAAP;AACD,aARsD,CAAtB,uBAQzBX,QAAQ,CAAC,CAAD,CAAR,CAAYK,GARa,EAQPL,QAAQ,CAAC,CAAD,CARD,CAApB,CARnB;AAAA;AAkBM,mBAAMZ,GAAG,CAACE,2BAA2B,CAAC;AACpCW,cAAAA,IAAI,EAAJA,IADoC;AAEpCW,cAAAA,KAAK,EAAEb,IAAI,CAACE,IAAL,CAAUW,KAFmB;AAGpCV,cAAAA,GAAG,EAAHA;AAHoC,aAAD,CAA5B,CAAT;;AAlBN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwBYW,YAAAA,GAxBZ,GAwBkB7B,gBAAgB,aAxBlC;AAAA;AAyBM,mBAAMI,GAAG,CAACG,wBAAwB,CAACsB,GAAD,CAAzB,CAAT;;AAzBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADmB,CAArB;AAgCA,eAAe1B,OAAO,CAAC,CAACF,WAAW,CAACQ,YAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { getResponseError } from 'src/lib';\nimport { IResponse } from 'src/services/api-request';\nimport { createSagas } from '@lib/redux';\nimport { IReduxAction, IDataResponse, IProduct } from 'src/interfaces';\nimport { productService } from '@services/product.service';\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport {\n  getPerformerProducts,\n  getPerformerProductsSuccess,\n  getPerformerProductsFail,\n  gettingPerformerProduct\n} from './actions';\n\nconst productSagas = [\n  {\n    on: getPerformerProducts,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerProduct());\n        const resp:IResponse<IDataResponse<IProduct>> = yield productService.search(action.payload);\n        const products = resp.data.data;\n        const ids = products.map((p) => p._id);\n        const data = products.length && (products.length > 1 ? products.reduce((previousValue, currentValue, index) => {\n          if (index === 1) {\n            return { [previousValue._id]: previousValue, [currentValue._id]: currentValue };\n          }\n\n          const value = { ...previousValue };\n          value[currentValue._id] = currentValue;\n          return value;\n        }) : { [products[0]._id]: products[0] });\n\n        yield put(getPerformerProductsSuccess({\n          data,\n          total: resp.data.total,\n          ids\n        }));\n      } catch (error) {\n        const err = getResponseError(error);\n        yield put(getPerformerProductsFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(productSagas)]);\n"]},"metadata":{},"sourceType":"module"}