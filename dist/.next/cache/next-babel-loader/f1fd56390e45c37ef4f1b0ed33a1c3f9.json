{"ast":null,"code":"var _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\src\\\\components\\\\common\\\\layout\\\\numberformat.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport dynamic from 'next/dynamic';\nconst NumberFormatNoSSR = dynamic(() => import('react-number-format'), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-number-format')],\n    modules: ['react-number-format']\n  }\n});\nexport default function NumberFormat(_ref) {\n  let {\n    decimalScale\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"decimalScale\"]);\n\n  return __jsx(NumberFormatNoSSR, _extends({}, props, {\n    displayType: \"text\",\n    decimalScale: decimalScale || 2,\n    decimalSeparator: \".\",\n    thousandSeparator: \",\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }\n  }));\n}","map":{"version":3,"sources":["E:/programData/React/user/src/components/common/layout/numberformat.tsx"],"names":["dynamic","NumberFormatNoSSR","ssr","NumberFormat","decimalScale","props"],"mappings":";;;;;;;;;;AACA,OAAOA,OAAP,MAAoB,cAApB;AAEA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,MAAM,OAAO,qBAAP,CAAP,EAAsC;AACrEE,EAAAA,GAAG,EAAE,KADgE;AAAA;AAAA,wCAAxB,qBAAwB;AAAA,cAAxB,qBAAwB;AAAA;AAAA,CAAtC,CAAjC;AAIA,eAAe,SAASC,YAAT,OAAqD;AAAA,MAA/B;AAAEC,IAAAA;AAAF,GAA+B;AAAA,MAAZC,KAAY;;AAClE,SACE,MAAC,iBAAD,eACMA,KADN;AAEE,IAAA,WAAW,EAAC,MAFd;AAGE,IAAA,YAAY,EAAED,YAAY,IAAI,CAHhC;AAIE,IAAA,gBAAgB,EAAC,GAJnB;AAKE,IAAA,iBAAiB,EAAC,GALpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AASD","sourcesContent":["import { NumberFormatProps } from 'react-number-format';\nimport dynamic from 'next/dynamic';\n\nconst NumberFormatNoSSR = dynamic(() => import('react-number-format'), {\n  ssr: false\n});\ninterface P extends NumberFormatProps {}\nexport default function NumberFormat({ decimalScale, ...props }: P) {\n  return (\n    <NumberFormatNoSSR\n      {...props}\n      displayType=\"text\"\n      decimalScale={decimalScale || 2}\n      decimalSeparator=\".\"\n      thousandSeparator=\",\"\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}