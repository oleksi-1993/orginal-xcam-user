{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { getConversations, getConversationsSuccess, getConversationsFail, searchConversations, searchConversationsSuccess, searchConversationsFail, setActiveConversationSuccess, fetchingMessage, loadMessagesSuccess, sendMessage, sendMessageSuccess, sendMessageFail, getConversationDetailSuccess, receiveMessageSuccess, readMessages, sentFileSuccess, loadMoreMessagesSuccess, deactiveConversation, resetMessageState, updateLastMessage, countNotReadMessage } from './actions';\nconst initialConversationState = {\n  list: {\n    requesting: false,\n    error: null,\n    data: [],\n    total: 0,\n    success: false\n  },\n  mapping: {},\n  activeConversation: {}\n};\nconst initialMessageState = {\n  // conversationId => { fetching: boolean, items: [] }\n  conversationMap: {},\n  sendMessage: {},\n  receiveMessage: {},\n  totalNotReadMessage: 0\n};\nconst conversationReducer = [{\n  on: resetMessageState,\n\n  reducer(state) {\n    let {\n      list,\n      mapping,\n      activeConversation\n    } = state;\n    list = {\n      requesting: false,\n      error: null,\n      data: [],\n      total: 0,\n      success: false\n    };\n    mapping = {};\n    activeConversation = {};\n    return _objectSpread(_objectSpread({}, state), {}, {\n      list,\n      mapping,\n      activeConversation\n    });\n  }\n\n}, {\n  on: getConversations,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    nextState.list.requesting = true;\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: getConversationsSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = list.data.concat(Ids);\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: getConversationsFail,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: searchConversations,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: true,\n        error: null,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: searchConversationsSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    const {\n      list,\n      mapping\n    } = nextState;\n    const {\n      data: items,\n      total\n    } = data.payload;\n    const Ids = items.map(c => c._id);\n    list.data = Ids;\n    list.total = total;\n    list.success = true;\n    list.requesting = false;\n    list.error = false;\n    items.forEach(c => {\n      mapping[c._id] = c;\n    });\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: searchConversationsFail,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      list: {\n        requesting: false,\n        error: data.payload,\n        data: [],\n        total: 0,\n        success: false\n      },\n      mapping: {},\n      activeConversation: {}\n    });\n  }\n\n}, {\n  on: setActiveConversationSuccess,\n\n  reducer(state, data) {\n    const conversation = data.payload;\n    const list = state.list.data;\n    const {\n      mapping\n    } = state;\n    const check = list.find(c => c === conversation._id);\n\n    if (!check) {\n      list.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      activeConversation: conversation\n    });\n  }\n\n}, {\n  on: getConversationDetailSuccess,\n\n  reducer(state, data) {\n    const {\n      list,\n      mapping\n    } = state;\n    const conversation = data.payload;\n\n    if (!list.data.includes(conversation._id)) {\n      list.data.unshift(conversation._id);\n      mapping[conversation._id] = conversation;\n    }\n\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: readMessages,\n\n  reducer(state, data) {\n    const conversationId = data.payload;\n    const {\n      mapping\n    } = state;\n    mapping[conversationId].totalNotSeenMessages = 0;\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: deactiveConversation,\n\n  reducer(state) {\n    const nextState = _objectSpread({}, state);\n\n    nextState.activeConversation = {};\n    return _objectSpread({}, nextState);\n  }\n\n}, {\n  on: updateLastMessage,\n\n  reducer(state, action) {\n    const {\n      conversationId,\n      lastMessage\n    } = action.payload;\n    const {\n      mapping\n    } = state;\n\n    if (mapping[conversationId]) {\n      mapping[conversationId].lastMessage = lastMessage;\n      mapping[conversationId].lastMessageCreatedAt = new Date();\n      mapping[conversationId].totalNotSeenMessages = 0;\n    }\n\n    return _objectSpread({}, state);\n  }\n\n}];\nconst messageReducer = [{\n  on: fetchingMessage,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId\n    } = data.payload;\n    conversationMap[conversationId] = _objectSpread(_objectSpread({}, conversationMap[conversationId]), {}, {\n      fetching: true\n    });\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse()],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: loadMoreMessagesSuccess,\n\n  reducer(state, data) {\n    const {\n      conversationMap\n    } = state;\n    const {\n      conversationId,\n      items,\n      total\n    } = data.payload;\n    conversationMap[conversationId] = {\n      items: [...items.reverse(), ...(conversationMap[conversationId].items || [])],\n      total,\n      fetching: false\n    };\n    return _objectSpread({}, state);\n  }\n\n}, {\n  on: sendMessage,\n\n  reducer(state) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: true\n      }\n    });\n  }\n\n}, {\n  on: sendMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n\n}, {\n  on: sendMessageFail,\n\n  reducer(state, data) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      sendMessage: {\n        sending: false,\n        success: false,\n        error: data.payload\n      }\n    });\n  }\n\n}, {\n  on: receiveMessageSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId]) {\n      return _objectSpread({}, nextState);\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      receiveMessage: data.payload\n    });\n  }\n\n}, {\n  on: sentFileSuccess,\n\n  reducer(state, data) {\n    const nextState = _objectSpread({}, state);\n\n    if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n      nextState.conversationMap[data.payload.conversationId].items = [];\n    }\n\n    nextState.conversationMap[data.payload.conversationId].items.push(data.payload);\n    return _objectSpread(_objectSpread({}, nextState), {}, {\n      sendMessage: {\n        sending: false,\n        success: true,\n        data: data.payload\n      }\n    });\n  }\n\n}, {\n  on: countNotReadMessage,\n\n  reducer(state, action) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      totalNotReadMessage: action.payload\n    });\n  }\n\n}];\nexport default merge({}, createReducers('conversation', [conversationReducer], initialConversationState), createReducers('message', [messageReducer], initialMessageState));","map":{"version":3,"sources":["E:/programData/React/user/src/redux/message/reducers.ts"],"names":["merge","createReducers","getConversations","getConversationsSuccess","getConversationsFail","searchConversations","searchConversationsSuccess","searchConversationsFail","setActiveConversationSuccess","fetchingMessage","loadMessagesSuccess","sendMessage","sendMessageSuccess","sendMessageFail","getConversationDetailSuccess","receiveMessageSuccess","readMessages","sentFileSuccess","loadMoreMessagesSuccess","deactiveConversation","resetMessageState","updateLastMessage","countNotReadMessage","initialConversationState","list","requesting","error","data","total","success","mapping","activeConversation","initialMessageState","conversationMap","receiveMessage","totalNotReadMessage","conversationReducer","on","reducer","state","nextState","items","payload","Ids","map","c","_id","concat","forEach","conversation","check","find","unshift","includes","conversationId","totalNotSeenMessages","action","lastMessage","lastMessageCreatedAt","Date","messageReducer","fetching","reverse","sending","push"],"mappings":"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","sourcesContent":["import { merge } from 'lodash';\nimport { createReducers } from '@lib/redux';\nimport { IReduxAction } from 'src/interfaces';\nimport {\n  getConversations,\n  getConversationsSuccess,\n  getConversationsFail,\n  searchConversations,\n  searchConversationsSuccess,\n  searchConversationsFail,\n  setActiveConversationSuccess,\n  fetchingMessage,\n  loadMessagesSuccess,\n  sendMessage,\n  sendMessageSuccess,\n  sendMessageFail,\n  getConversationDetailSuccess,\n  receiveMessageSuccess,\n  readMessages,\n  sentFileSuccess,\n  loadMoreMessagesSuccess,\n  deactiveConversation,\n  resetMessageState,\n  updateLastMessage,\n  countNotReadMessage\n} from './actions';\n\nconst initialConversationState = {\n  list: {\n    requesting: false,\n    error: null,\n    data: [],\n    total: 0,\n    success: false\n  },\n  mapping: {},\n  activeConversation: {}\n};\n\nconst initialMessageState = {\n  // conversationId => { fetching: boolean, items: [] }\n  conversationMap: {},\n  sendMessage: {},\n  receiveMessage: {},\n  totalNotReadMessage: 0\n};\n\nconst conversationReducer = [\n  {\n    on: resetMessageState,\n    reducer(state: any) {\n      let { list, mapping, activeConversation } = state;\n      list = {\n        requesting: false,\n        error: null,\n        data: [],\n        total: 0,\n        success: false\n      };\n      mapping = {};\n      activeConversation = {};\n      return {\n        ...state,\n        list,\n        mapping,\n        activeConversation\n      };\n    }\n  },\n  {\n    on: getConversations,\n    reducer(state: any) {\n      const nextState = { ...state };\n      nextState.list.requesting = true;\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: getConversationsSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { list, mapping } = nextState;\n      const { data: items, total } = data.payload;\n      const Ids = items.map((c) => c._id);\n      list.data = list.data.concat(Ids);\n      list.total = total;\n      list.success = true;\n      list.requesting = false;\n      list.error = false;\n      items.forEach((c) => {\n        mapping[c._id] = c;\n      });\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: getConversationsFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        list: {\n          requesting: false,\n          error: data.payload,\n          data: [],\n          total: 0,\n          success: false\n        },\n        mapping: {},\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: searchConversations,\n    reducer(state: any) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        list: {\n          requesting: true,\n          error: null,\n          data: [],\n          total: 0,\n          success: false\n        },\n        mapping: {},\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: searchConversationsSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      const { list, mapping } = nextState;\n      const { data: items, total } = data.payload;\n      const Ids = items.map((c) => c._id);\n      list.data = Ids;\n      list.total = total;\n      list.success = true;\n      list.requesting = false;\n      list.error = false;\n      items.forEach((c) => {\n        mapping[c._id] = c;\n      });\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: searchConversationsFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      return {\n        ...nextState,\n        list: {\n          requesting: false,\n          error: data.payload,\n          data: [],\n          total: 0,\n          success: false\n        },\n        mapping: {},\n        activeConversation: {}\n      };\n    }\n  },\n  {\n    on: setActiveConversationSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const conversation = data.payload;\n      const list = state.list.data;\n      const { mapping } = state;\n      const check = list.find((c) => c === conversation._id);\n      if (!check) {\n        list.unshift(conversation._id);\n        mapping[conversation._id] = conversation;\n      }\n      return {\n        ...state,\n        activeConversation: conversation\n      };\n    }\n  },\n  {\n    on: getConversationDetailSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { list, mapping } = state;\n      const conversation = data.payload;\n      if (!list.data.includes(conversation._id)) {\n        list.data.unshift(conversation._id);\n        mapping[conversation._id] = conversation;\n      }\n\n      return {\n        ...state\n      };\n    }\n  },\n  {\n    on: readMessages,\n    reducer(state: any, data: IReduxAction<any>) {\n      const conversationId = data.payload;\n      const { mapping } = state;\n      mapping[conversationId].totalNotSeenMessages = 0;\n      return {\n        ...state\n      };\n    }\n  },\n  {\n    on: deactiveConversation,\n    reducer(state: any) {\n      const nextState = { ...state };\n      nextState.activeConversation = {};\n      return {\n        ...nextState\n      };\n    }\n  },\n  {\n    on: updateLastMessage,\n    reducer(state, action: IReduxAction<any>) {\n      const { conversationId, lastMessage } = action.payload;\n      const { mapping } = state;\n      if (mapping[conversationId]) {\n        mapping[conversationId].lastMessage = lastMessage;\n        mapping[conversationId].lastMessageCreatedAt = new Date();\n        mapping[conversationId].totalNotSeenMessages = 0;\n      }\n      return {\n        ...state\n      };\n    }\n  }\n];\n\nconst messageReducer = [\n  {\n    on: fetchingMessage,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId } = data.payload;\n      conversationMap[conversationId] = {\n        ...conversationMap[conversationId],\n        fetching: true\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [...items.reverse()],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: loadMoreMessagesSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const { conversationMap } = state;\n      const { conversationId, items, total } = data.payload;\n      conversationMap[conversationId] = {\n        items: [\n          ...items.reverse(),\n          ...conversationMap[conversationId].items || []\n        ],\n        total,\n        fetching: false\n      };\n      return { ...state };\n    }\n  },\n  {\n    on: sendMessage,\n    reducer(state: any) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: true\n        }\n      };\n    }\n  },\n  {\n    on: sendMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n        nextState.conversationMap[data.payload.conversationId].items = [];\n      }\n      nextState.conversationMap[data.payload.conversationId].items.push(\n        data.payload\n      );\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false,\n          success: true,\n          data: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: sendMessageFail,\n    reducer(state: any, data: IReduxAction<any>) {\n      return {\n        ...state,\n        sendMessage: {\n          sending: false,\n          success: false,\n          error: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: receiveMessageSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      if (!nextState.conversationMap[data.payload.conversationId]) {\n        return { ...nextState };\n      }\n      nextState.conversationMap[data.payload.conversationId].items.push(\n        data.payload\n      );\n      return {\n        ...nextState,\n        receiveMessage: data.payload\n      };\n    }\n  },\n  {\n    on: sentFileSuccess,\n    reducer(state: any, data: IReduxAction<any>) {\n      const nextState = { ...state };\n      if (!nextState.conversationMap[data.payload.conversationId] || !nextState.conversationMap[data.payload.conversationId].items) {\n        nextState.conversationMap[data.payload.conversationId].items = [];\n      }\n      nextState.conversationMap[data.payload.conversationId].items.push(\n        data.payload\n      );\n      return {\n        ...nextState,\n        sendMessage: {\n          sending: false,\n          success: true,\n          data: data.payload\n        }\n      };\n    }\n  },\n  {\n    on: countNotReadMessage,\n    reducer(state: any, action: IReduxAction<any>) {\n      return {\n        ...state,\n        totalNotReadMessage: action.payload\n      };\n    }\n  }\n];\n\nexport default merge(\n  {},\n  createReducers(\n    'conversation',\n    [conversationReducer],\n    initialConversationState\n  ),\n  createReducers('message', [messageReducer], initialMessageState)\n);\n"]},"metadata":{},"sourceType":"module"}