{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport var UserService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(UserService, _APIRequest);\n\n  var _super = _createSuper(UserService);\n\n  function UserService() {\n    _classCallCheck(this, UserService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(UserService, [{\n    key: \"me\",\n    value: function me(headers) {\n      return this.get('/users/me', headers);\n    }\n  }, {\n    key: \"updateMe\",\n    value: function updateMe(payload) {\n      return this.put('/users', payload);\n    }\n  }, {\n    key: \"getAvatarUploadUrl\",\n    value: function getAvatarUploadUrl(userId) {\n      var config = getGlobalConfig();\n\n      if (userId) {\n        return \"\".concat(config.NEXT_PUBLIC_API_ENDPOINT, \"/users/\").concat(userId, \"/avatar/upload\");\n      }\n\n      return \"\".concat(config.NEXT_PUBLIC_API_ENDPOINT, \"/users/avatar/upload\");\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      return this.get(this.buildUrl('/users/search', query));\n    }\n  }, {\n    key: \"findById\",\n    value: function findById(id) {\n      return this.get(\"/users/view/\".concat(id));\n    }\n  }]);\n\n  return UserService;\n}(APIRequest);\nexport var userService = new UserService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/user.service.ts"],"names":["APIRequest","getGlobalConfig","UserService","headers","get","payload","put","userId","config","NEXT_PUBLIC_API_ENDPOINT","query","buildUrl","id","userService"],"mappings":";;;;;;;;;;AACA,SAASA,UAAT,QAAsC,eAAtC;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,WAAaC,WAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,YAAGC,OAAH,EAAmE;AACjE,aAAO,KAAKC,GAAL,CAAS,WAAT,EAAsBD,OAAtB,CAAP;AACD;AAHH;AAAA;AAAA,WAKE,kBAASE,OAAT,EAAuB;AACrB,aAAO,KAAKC,GAAL,CAAS,QAAT,EAAmBD,OAAnB,CAAP;AACD;AAPH;AAAA;AAAA,WASE,4BAAmBE,MAAnB,EAAoC;AAClC,UAAMC,MAAM,GAAGP,eAAe,EAA9B;;AACA,UAAIM,MAAJ,EAAY;AACV,yBAAUC,MAAM,CAACC,wBAAjB,oBAAmDF,MAAnD;AACD;;AACD,uBAAUC,MAAM,CAACC,wBAAjB;AACD;AAfH;AAAA;AAAA,WAiBE,gBAAOC,KAAP,EAAuC;AACrC,aAAO,KAAKN,GAAL,CAAS,KAAKO,QAAL,CAAc,eAAd,EAA+BD,KAA/B,CAAT,CAAP;AACD;AAnBH;AAAA;AAAA,WAqBE,kBAASE,EAAT,EAAqB;AACnB,aAAO,KAAKR,GAAL,uBAAwBQ,EAAxB,EAAP;AACD;AAvBH;;AAAA;AAAA,EAAiCZ,UAAjC;AA0BA,OAAO,IAAMa,WAAW,GAAG,IAAIX,WAAJ,EAApB","sourcesContent":["import { IUser } from 'src/interfaces';\nimport { APIRequest, IResponse } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class UserService extends APIRequest {\n  me(headers?: { [key: string]: string }): Promise<IResponse<IUser>> {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload: any) {\n    return this.put('/users', payload);\n  }\n\n  getAvatarUploadUrl(userId?: string) {\n    const config = getGlobalConfig();\n    if (userId) {\n      return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/${userId}/avatar/upload`;\n    }\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/avatar/upload`;\n  }\n\n  search(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/users/search', query));\n  }\n\n  findById(id: string) {\n    return this.get(`/users/view/${id}`);\n  }\n}\n\nexport const userService = new UserService();\n"]},"metadata":{},"sourceType":"module"}