{"ast":null,"code":"import { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { getResponseError } from 'src/lib';\nimport { photoService } from 'src/services';\nimport { getPerformerPhotos, gettingPerformerPhotos, getPerformerPhotosSuccess, getPerformerPhotosFail } from './actions';\nconst photosSagas = [{\n  on: getPerformerPhotos,\n\n  *worker(action) {\n    try {\n      yield put(gettingPerformerPhotos());\n      const resp = yield photoService.search(action.payload);\n      yield put(getPerformerPhotosSuccess({\n        data: resp.data.data,\n        total: resp.data.total\n      }));\n    } catch (error) {\n      const err = getResponseError(error);\n      yield put(getPerformerPhotosFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(photosSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/photos/sagas.ts"],"names":["put","flatten","createSagas","getResponseError","photoService","getPerformerPhotos","gettingPerformerPhotos","getPerformerPhotosSuccess","getPerformerPhotosFail","photosSagas","on","worker","action","resp","search","payload","data","total","error","err"],"mappings":"AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAIA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SACEC,kBADF,EAEEC,sBAFF,EAGEC,yBAHF,EAIEC,sBAJF,QAKO,WALP;AAOA,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,EAAE,EAAEL,kBADN;;AAEE,GAAEM,MAAF,CAASC,MAAT,EAAoC;AAClC,QAAI;AACF,YAAMZ,GAAG,CAACM,sBAAsB,EAAvB,CAAT;AACA,YAAMO,IAAsC,GAAG,MAAMT,YAAY,CAACU,MAAb,CAAoBF,MAAM,CAACG,OAA3B,CAArD;AACA,YAAMf,GAAG,CAACO,yBAAyB,CAAC;AAAES,QAAAA,IAAI,EAAEH,IAAI,CAACG,IAAL,CAAUA,IAAlB;AAAwBC,QAAAA,KAAK,EAAEJ,IAAI,CAACG,IAAL,CAAUC;AAAzC,OAAD,CAA1B,CAAT;AACD,KAJD,CAIE,OAAOC,KAAP,EAAc;AACd,YAAMC,GAAG,GAAGhB,gBAAgB,CAACe,KAAD,CAA5B;AACA,YAAMlB,GAAG,CAACQ,sBAAsB,CAACW,GAAD,CAAvB,CAAT;AACD;AACF;;AAXH,CADkB,CAApB;AAgBA,eAAelB,OAAO,CAAC,CAACC,WAAW,CAACO,WAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport {\n  IReduxAction, IResponse, IDataResponse, IPhoto\n} from 'src/interfaces';\nimport { getResponseError } from 'src/lib';\nimport { photoService } from 'src/services';\nimport {\n  getPerformerPhotos,\n  gettingPerformerPhotos,\n  getPerformerPhotosSuccess,\n  getPerformerPhotosFail\n} from './actions';\n\nconst photosSagas = [\n  {\n    on: getPerformerPhotos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerPhotos());\n        const resp: IResponse<IDataResponse<IPhoto>> = yield photoService.search(action.payload);\n        yield put(getPerformerPhotosSuccess({ data: resp.data.data, total: resp.data.total }));\n      } catch (error) {\n        const err = getResponseError(error);\n        yield put(getPerformerPhotosFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(photosSagas)]);\n"]},"metadata":{},"sourceType":"module"}