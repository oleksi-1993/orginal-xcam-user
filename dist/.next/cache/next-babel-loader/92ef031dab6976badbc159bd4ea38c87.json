{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { videoService } from 'src/services';\nimport { getResponseError } from 'src/lib';\nimport { getPerformersVideos, getPerformersVideosFail, getPerformersVideosSuccess, gettingPerformerVideos } from './actions';\nconst videosSagas = [{\n  on: getPerformersVideos,\n\n  *worker(action) {\n    try {\n      yield put(gettingPerformerVideos());\n      const resp = yield videoService.search(action.payload);\n      const videos = resp.data.data;\n      const ids = videos.map(v => v._id);\n      const data = videos.length && (videos.length > 1 ? videos.reduce((previousValue, currentValue, index) => {\n        if (index === 1) {\n          return {\n            [previousValue._id]: previousValue,\n            [currentValue._id]: currentValue\n          };\n        }\n\n        const value = _objectSpread({}, previousValue);\n\n        value[currentValue._id] = currentValue;\n        return value;\n      }) : {\n        [videos[0]._id]: videos[0]\n      });\n      yield put(getPerformersVideosSuccess({\n        total: resp.data.total,\n        data,\n        ids\n      }));\n    } catch (e) {\n      const err = getResponseError(e);\n      yield put(getPerformersVideosFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(videosSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/videos/sagas.ts"],"names":["put","flatten","createSagas","videoService","getResponseError","getPerformersVideos","getPerformersVideosFail","getPerformersVideosSuccess","gettingPerformerVideos","videosSagas","on","worker","action","resp","search","payload","videos","data","ids","map","v","_id","length","reduce","previousValue","currentValue","index","value","total","e","err"],"mappings":";;;;;;AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,WAAT,QAA4B,YAA5B;AAEA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SACEC,mBADF,EAEEC,uBAFF,EAGEC,0BAHF,EAIEC,sBAJF,QAKO,WALP;AAOA,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,EAAE,EAAEL,mBADN;;AAEE,GAAEM,MAAF,CAASC,MAAT,EAAoC;AAClC,QAAI;AACF,YAAMZ,GAAG,CAACQ,sBAAsB,EAAvB,CAAT;AACA,YAAMK,IAAmC,GAAG,MAAMV,YAAY,CAACW,MAAb,CAChDF,MAAM,CAACG,OADyC,CAAlD;AAGA,YAAMC,MAAM,GAAGH,IAAI,CAACI,IAAL,CAAUA,IAAzB;AACA,YAAMC,GAAG,GAAGF,MAAM,CAACG,GAAP,CAAYC,CAAD,IAAOA,CAAC,CAACC,GAApB,CAAZ;AACA,YAAMJ,IAAI,GAAGD,MAAM,CAACM,MAAP,KAAkBN,MAAM,CAACM,MAAP,GAAgB,CAAhB,GAAoBN,MAAM,CAACO,MAAP,CAAc,CAACC,aAAD,EAAgBC,YAAhB,EAA8BC,KAA9B,KAAwC;AACvG,YAAIA,KAAK,KAAK,CAAd,EAAiB;AACf,iBAAO;AAAE,aAACF,aAAa,CAACH,GAAf,GAAqBG,aAAvB;AAAsC,aAACC,YAAY,CAACJ,GAAd,GAAoBI;AAA1D,WAAP;AACD;;AAED,cAAME,KAAK,qBAAQH,aAAR,CAAX;;AACAG,QAAAA,KAAK,CAACF,YAAY,CAACJ,GAAd,CAAL,GAA0BI,YAA1B;AACA,eAAOE,KAAP;AACD,OARkD,CAApB,GAQ1B;AAAE,SAACX,MAAM,CAAC,CAAD,CAAN,CAAUK,GAAX,GAAiBL,MAAM,CAAC,CAAD;AAAzB,OARQ,CAAb;AAUA,YAAMhB,GAAG,CACPO,0BAA0B,CAAC;AACzBqB,QAAAA,KAAK,EAAEf,IAAI,CAACI,IAAL,CAAUW,KADQ;AAEzBX,QAAAA,IAFyB;AAGzBC,QAAAA;AAHyB,OAAD,CADnB,CAAT;AAOD,KAxBD,CAwBE,OAAOW,CAAP,EAAU;AACV,YAAMC,GAAG,GAAG1B,gBAAgB,CAACyB,CAAD,CAA5B;AACA,YAAM7B,GAAG,CAACM,uBAAuB,CAACwB,GAAD,CAAxB,CAAT;AACD;AACF;;AA/BH,CADkB,CAApB;AAoCA,eAAe7B,OAAO,CAAC,CAACC,WAAW,CAACO,WAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { put } from 'redux-saga/effects';\nimport { flatten } from 'lodash';\nimport { createSagas } from '@lib/redux';\nimport { IReduxAction, IResponse, IDataResponse } from 'src/interfaces';\nimport { videoService } from 'src/services';\nimport { getResponseError } from 'src/lib';\nimport {\n  getPerformersVideos,\n  getPerformersVideosFail,\n  getPerformersVideosSuccess,\n  gettingPerformerVideos\n} from './actions';\n\nconst videosSagas = [\n  {\n    on: getPerformersVideos,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(gettingPerformerVideos());\n        const resp: IResponse<IDataResponse<any>> = yield videoService.search(\n          action.payload\n        );\n        const videos = resp.data.data;\n        const ids = videos.map((v) => v._id);\n        const data = videos.length && (videos.length > 1 ? videos.reduce((previousValue, currentValue, index) => {\n          if (index === 1) {\n            return { [previousValue._id]: previousValue, [currentValue._id]: currentValue };\n          }\n\n          const value = { ...previousValue };\n          value[currentValue._id] = currentValue;\n          return value;\n        }) : { [videos[0]._id]: videos[0] });\n\n        yield put(\n          getPerformersVideosSuccess({\n            total: resp.data.total,\n            data,\n            ids\n          })\n        );\n      } catch (e) {\n        const err = getResponseError(e);\n        yield put(getPerformersVideosFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(videosSagas)]);\n"]},"metadata":{},"sourceType":"module"}