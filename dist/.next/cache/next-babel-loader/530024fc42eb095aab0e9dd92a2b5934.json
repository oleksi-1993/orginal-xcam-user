{"ast":null,"code":"import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { bannerService } from 'src/services';\nimport { getBanners, getBannersSuccess, getBannersFail } from './actions';\nconst bannerSagas = [{\n  on: getBanners,\n\n  *worker(data) {\n    try {\n      const resp = yield bannerService.search(data.payload);\n      yield put(getBannersSuccess(resp.data));\n    } catch (e) {\n      const error = yield Promise.resolve(e);\n      yield put(getBannersFail(error));\n    }\n  }\n\n}];\nexport default flatten([createSagas(bannerSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/banner/sagas.ts"],"names":["flatten","put","createSagas","bannerService","getBanners","getBannersSuccess","getBannersFail","bannerSagas","on","worker","data","resp","search","payload","e","error","Promise","resolve"],"mappings":"AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,SAASC,aAAT,QAA8B,cAA9B;AAEA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,cAAxC,QAA8D,WAA9D;AAEA,MAAMC,WAAW,GAAG,CAClB;AACEC,EAAAA,EAAE,EAAEJ,UADN;;AAEE,GAAEK,MAAF,CAASC,IAAT,EAAkC;AAChC,QAAI;AACF,YAAMC,IAAI,GAAG,MAAMR,aAAa,CAACS,MAAd,CAAqBF,IAAI,CAACG,OAA1B,CAAnB;AACA,YAAMZ,GAAG,CAACI,iBAAiB,CAACM,IAAI,CAACD,IAAN,CAAlB,CAAT;AACD,KAHD,CAGE,OAAOI,CAAP,EAAU;AACV,YAAMC,KAAK,GAAG,MAAMC,OAAO,CAACC,OAAR,CAAgBH,CAAhB,CAApB;AACA,YAAMb,GAAG,CAACK,cAAc,CAACS,KAAD,CAAf,CAAT;AACD;AACF;;AAVH,CADkB,CAApB;AAeA,eAAef,OAAO,CAAC,CAACE,WAAW,CAACK,WAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { bannerService } from 'src/services';\nimport { IReduxAction } from 'src/interfaces';\nimport { getBanners, getBannersSuccess, getBannersFail } from './actions';\n\nconst bannerSagas = [\n  {\n    on: getBanners,\n    * worker(data: IReduxAction<any>) {\n      try {\n        const resp = yield bannerService.search(data.payload);\n        yield put(getBannersSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(getBannersFail(error));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(bannerSagas)]);\n"]},"metadata":{},"sourceType":"module"}