{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { flatten, omit } from 'lodash';\nimport { put, select, all } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { earningService, studioService, payoutRequestService } from '@services/index';\nimport { updateStudio, updateStudioSuccess, updateStudioFail, setUpdatingStudio, updateStudioPaymentInfo, updateStudioDirectDeposit, updateStudioBitpay, updateStudioPaxum, getMembers, getMembersSuccess, getMembersFail, getMembersSearching, getMembersCommissions, getMembersCommissionsSuccess, getMembersCommissionsFail, getMembersCommissionsSearching, getStudioEarning, getStudioEarningFail, getStudioEarningSuccess, setGettingStudioEarning, getStudioPayoutRequest, getStudioPayoutRequestFail, getStudioPayoutRequestSuccess, setGettingStudioPayoutRequest, getPerformerRequest, getPerformerRequestFail, getPerformerRequestSuccess, setGettingPerformerRequest, getStudioStats, getStudioStatsSuccess, getStudioStatsFail } from './actions';\nconst studioSagas = [{\n  on: updateStudio,\n\n  *worker(data) {\n    try {\n      yield put(setUpdatingStudio());\n      const updated = yield studioService.update(data.payload);\n      yield put(updateStudioSuccess(updated.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updateStudioFail(err));\n    }\n  }\n\n}, {\n  on: updateStudioPaymentInfo,\n\n  *worker(action) {\n    try {\n      yield put(setUpdatingStudio());\n      const resp = yield studioService.updatePaymentInfo(action.payload);\n      yield put(updateStudioSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updateStudioFail(err));\n    }\n  }\n\n}, {\n  on: updateStudioDirectDeposit,\n\n  *worker(action) {\n    try {\n      yield put(setUpdatingStudio());\n      const resp = yield studioService.updateDirectDepost(action.payload);\n      yield put(updateStudioSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updateStudioFail(err));\n    }\n  }\n\n}, {\n  on: updateStudioBitpay,\n\n  *worker(action) {\n    try {\n      yield put(setUpdatingStudio());\n      const resp = yield studioService.updateBitpay(action.payload);\n      yield put(updateStudioSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updateStudioFail(err));\n    }\n  }\n\n}, {\n  on: updateStudioPaxum,\n\n  *worker(action) {\n    try {\n      yield put(setUpdatingStudio());\n      const resp = yield studioService.updatePaxum(action.payload);\n      yield put(updateStudioSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(updateStudioFail(err));\n    }\n  }\n\n}, {\n  on: getMembers,\n\n  *worker(action) {\n    try {\n      yield put(getMembersSearching());\n      const resp = yield studioService.getMembers(action.payload);\n      yield put(getMembersSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMembersFail(err));\n    }\n  }\n\n}, {\n  on: getMembersCommissions,\n\n  *worker(action) {\n    try {\n      yield put(getMembersCommissionsSearching());\n      const resp = yield studioService.getMemberCommissions(action.payload);\n      yield put(getMembersCommissionsSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getMembersCommissionsFail(err));\n    }\n  }\n\n}, {\n  on: getPerformerRequest,\n\n  *worker(action) {\n    try {\n      yield put(setGettingPerformerRequest());\n      const resp = yield studioService.getPerformerRequest(action.payload);\n      yield put(getPerformerRequestSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getPerformerRequestFail(err));\n    }\n  }\n\n}, {\n  on: getStudioEarning,\n\n  *worker(action) {\n    try {\n      yield put(setGettingStudioEarning());\n      let difDateQuery = false;\n      const earning = yield select(state => state.performer.earning);\n      const {\n        fromDate,\n        toDate\n      } = action.payload;\n      const query = omit(action.payload, ['fromDate', 'toDate']);\n\n      if (fromDate && toDate) {\n        query.fromDate = fromDate;\n        query.toDate = toDate;\n      }\n\n      if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n      const [resp, stats] = yield all([earningService.search(query, 'studio'), earning.stats && !difDateQuery ? earning.stats : earningService.stats(query, 'studio')]);\n      yield put(getStudioEarningSuccess(_objectSpread(_objectSpread({}, query), {}, {\n        stats,\n        data: resp.data\n      })));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getStudioEarningFail(err));\n    }\n  }\n\n}, {\n  on: getStudioStats,\n\n  *worker() {\n    try {\n      const resp = yield studioService.stats();\n      yield put(getStudioStatsSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getStudioStatsFail(err));\n    }\n  }\n\n}, {\n  on: getStudioPayoutRequest,\n\n  *worker(action) {\n    try {\n      yield put(setGettingStudioPayoutRequest());\n      const resp = yield payoutRequestService.studioSearch(action.payload);\n      yield put(getStudioPayoutRequestSuccess(resp.data));\n    } catch (e) {\n      const err = yield Promise.resolve(e);\n      yield put(getStudioPayoutRequestFail(err));\n    }\n  }\n\n}];\nexport default flatten([createSagas(studioSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/studio/sagas.ts"],"names":["flatten","omit","put","select","all","createSagas","earningService","studioService","payoutRequestService","updateStudio","updateStudioSuccess","updateStudioFail","setUpdatingStudio","updateStudioPaymentInfo","updateStudioDirectDeposit","updateStudioBitpay","updateStudioPaxum","getMembers","getMembersSuccess","getMembersFail","getMembersSearching","getMembersCommissions","getMembersCommissionsSuccess","getMembersCommissionsFail","getMembersCommissionsSearching","getStudioEarning","getStudioEarningFail","getStudioEarningSuccess","setGettingStudioEarning","getStudioPayoutRequest","getStudioPayoutRequestFail","getStudioPayoutRequestSuccess","setGettingStudioPayoutRequest","getPerformerRequest","getPerformerRequestFail","getPerformerRequestSuccess","setGettingPerformerRequest","getStudioStats","getStudioStatsSuccess","getStudioStatsFail","studioSagas","on","worker","data","updated","update","payload","e","err","Promise","resolve","action","resp","updatePaymentInfo","updateDirectDepost","updateBitpay","updatePaxum","getMemberCommissions","difDateQuery","earning","state","performer","fromDate","toDate","query","stats","search","studioSearch"],"mappings":"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","sourcesContent":["import { flatten, omit } from 'lodash';\nimport { put, select, all } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport {\n  earningService,\n  studioService,\n  payoutRequestService\n} from '@services/index';\nimport {\n  IReduxAction,\n  IResponse,\n  IStudio,\n  IPerformerDirectDeposit,\n  IPerformerBitpay,\n  IPerformerPaxum,\n  IPerformerPaymentInfoUpdate\n} from 'src/interfaces';\nimport {\n  updateStudio,\n  updateStudioSuccess,\n  updateStudioFail,\n  setUpdatingStudio,\n  updateStudioPaymentInfo,\n  updateStudioDirectDeposit,\n  updateStudioBitpay,\n  updateStudioPaxum,\n  getMembers,\n  getMembersSuccess,\n  getMembersFail,\n  getMembersSearching,\n  getMembersCommissions,\n  getMembersCommissionsSuccess,\n  getMembersCommissionsFail,\n  getMembersCommissionsSearching,\n  getStudioEarning,\n  getStudioEarningFail,\n  getStudioEarningSuccess,\n  setGettingStudioEarning,\n  getStudioPayoutRequest,\n  getStudioPayoutRequestFail,\n  getStudioPayoutRequestSuccess,\n  setGettingStudioPayoutRequest,\n  getPerformerRequest,\n  getPerformerRequestFail,\n  getPerformerRequestSuccess,\n  setGettingPerformerRequest,\n  getStudioStats,\n  getStudioStatsSuccess,\n  getStudioStatsFail\n} from './actions';\n\nconst studioSagas = [\n  {\n    on: updateStudio,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdatingStudio());\n        const updated: IResponse<IStudio> = yield studioService.update(\n          data.payload\n        );\n        yield put(updateStudioSuccess(updated.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n\n  {\n    on: updateStudioPaymentInfo,\n    * worker(action: IReduxAction<IPerformerPaymentInfoUpdate>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updatePaymentInfo(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: updateStudioDirectDeposit,\n    * worker(action: IReduxAction<IPerformerDirectDeposit>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updateDirectDepost(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: updateStudioBitpay,\n    * worker(action: IReduxAction<IPerformerBitpay>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updateBitpay(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: updateStudioPaxum,\n    * worker(action: IReduxAction<IPerformerPaxum>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updatePaxum(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: getMembers,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(getMembersSearching());\n        const resp = yield studioService.getMembers(action.payload);\n        yield put(getMembersSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMembersFail(err));\n      }\n    }\n  },\n  {\n    on: getMembersCommissions,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(getMembersCommissionsSearching());\n        const resp = yield studioService.getMemberCommissions(action.payload);\n        yield put(getMembersCommissionsSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMembersCommissionsFail(err));\n      }\n    }\n  },\n  {\n    on: getPerformerRequest,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingPerformerRequest());\n        const resp = yield studioService.getPerformerRequest(action.payload);\n        yield put(getPerformerRequestSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPerformerRequestFail(err));\n      }\n    }\n  },\n  {\n    on: getStudioEarning,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingStudioEarning());\n        let difDateQuery = false;\n        const earning = yield select((state) => state.performer.earning);\n        const { fromDate, toDate } = action.payload;\n        const query = omit(action.payload, ['fromDate', 'toDate']);\n        if (fromDate && toDate) {\n          query.fromDate = fromDate;\n          query.toDate = toDate;\n        }\n\n        if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n\n        const [resp, stats] = yield all([\n          earningService.search(query, 'studio'),\n          earning.stats && !difDateQuery\n            ? earning.stats\n            : earningService.stats(query, 'studio')\n        ]);\n        yield put(\n          getStudioEarningSuccess({ ...query, stats, data: resp.data })\n        );\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getStudioEarningFail(err));\n      }\n    }\n  },\n  {\n    on: getStudioStats,\n    * worker() {\n      try {\n        const resp = yield studioService.stats();\n        yield put(getStudioStatsSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getStudioStatsFail(err));\n      }\n    }\n  },\n  {\n    on: getStudioPayoutRequest,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingStudioPayoutRequest());\n        const resp = yield payoutRequestService.studioSearch(action.payload);\n        yield put(getStudioPayoutRequestSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getStudioPayoutRequestFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(studioSagas)]);\n"]},"metadata":{},"sourceType":"module"}