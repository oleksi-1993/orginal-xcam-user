{"ast":null,"code":"/* eslint-disable prefer-spread */\nimport { getGlobalConfig } from '@services/config';\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\n\nexport const warning = (...args) => {\n  const config = getGlobalConfig(); // debug on development and staging.\n\n  if (config.NODE_ENV === 'production') return;\n  /* eslint-disable no-console */\n\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error.apply(console, args);\n  }\n  /* eslint-enable no-console */\n\n\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(args.join(' '));\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n\n};\nexport const debug = (...args) => {\n  const config = getGlobalConfig(); // debug on development and staging.\n\n  if (config.NODE_ENV === 'production') return;\n  /* eslint-disable no-console */\n\n  if (typeof console !== 'undefined' && typeof console.debug === 'function') {\n    console.debug.apply(console, args);\n  }\n};","map":{"version":3,"sources":["E:/programData/React/user/src/socket/utils.ts"],"names":["getGlobalConfig","warning","args","config","NODE_ENV","console","error","apply","Error","join","e","debug"],"mappings":"AAAA;AAEA,SAASA,eAAT,QAAgC,kBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAAC,GAAGC,IAAJ,KAAa;AAClC,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CADkC,CAElC;;AACA,MAAIG,MAAM,CAACC,QAAP,KAAoB,YAAxB,EAAsC;AAEtC;;AACA,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACC,KAAf,KAAyB,UAA/D,EAA2E;AACzED,IAAAA,OAAO,CAACC,KAAR,CAAcC,KAAd,CAAoBF,OAApB,EAA6BH,IAA7B;AACD;AACD;;;AACA,MAAI;AACF;AACA;AACA;AAEA,UAAM,IAAIM,KAAJ,CAAUN,IAAI,CAACO,IAAL,CAAU,GAAV,CAAV,CAAN;AACA;AACD,GAPD,CAOE,OAAOC,CAAP,EAAU,CAAE;AACd;;AACD,CAnBM;AAqBP,OAAO,MAAMC,KAAK,GAAG,CAAC,GAAGT,IAAJ,KAAa;AAChC,QAAMC,MAAM,GAAGH,eAAe,EAA9B,CADgC,CAEhC;;AACA,MAAIG,MAAM,CAACC,QAAP,KAAoB,YAAxB,EAAsC;AAEtC;;AACA,MAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkC,OAAOA,OAAO,CAACM,KAAf,KAAyB,UAA/D,EAA2E;AACzEN,IAAAA,OAAO,CAACM,KAAR,CAAcJ,KAAd,CAAoBF,OAApB,EAA6BH,IAA7B;AACD;AACF,CATM","sourcesContent":["/* eslint-disable prefer-spread */\n\nimport { getGlobalConfig } from '@services/config';\n\n/**\n * Prints a warning in the console if it exists.\n *\n * @param {String} message The warning message.\n * @returns {void}\n */\nexport const warning = (...args) => {\n  const config = getGlobalConfig();\n  // debug on development and staging.\n  if (config.NODE_ENV === 'production') return;\n\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error.apply(console, args);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n\n    throw new Error(args.join(' '));\n    /* eslint-disable no-empty */\n  } catch (e) {}\n  /* eslint-enable no-empty */\n};\n\nexport const debug = (...args) => {\n  const config = getGlobalConfig();\n  // debug on development and staging.\n  if (config.NODE_ENV === 'production') return;\n\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.debug === 'function') {\n    console.debug.apply(console, args);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}