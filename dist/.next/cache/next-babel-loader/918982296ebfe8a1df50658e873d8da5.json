{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { flatten, omit } from 'lodash';\nimport { put, select, all } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { earningService, studioService, payoutRequestService } from '@services/index';\nimport { updateStudio, updateStudioSuccess, updateStudioFail, setUpdatingStudio, updateStudioPaymentInfo, updateStudioDirectDeposit, updateStudioBitpay, updateStudioPaxum, getMembers, getMembersSuccess, getMembersFail, getMembersSearching, getMembersCommissions, getMembersCommissionsSuccess, getMembersCommissionsFail, getMembersCommissionsSearching, getStudioEarning, getStudioEarningFail, getStudioEarningSuccess, setGettingStudioEarning, getStudioPayoutRequest, getStudioPayoutRequestFail, getStudioPayoutRequestSuccess, setGettingStudioPayoutRequest, getPerformerRequest, getPerformerRequestFail, getPerformerRequestSuccess, setGettingPerformerRequest, getStudioStats, getStudioStatsSuccess, getStudioStatsFail } from './actions';\nvar studioSagas = [{\n  on: updateStudio,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var updated, err;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(setUpdatingStudio());\n\n          case 3:\n            _context.next = 5;\n            return studioService.update(data.payload);\n\n          case 5:\n            updated = _context.sent;\n            _context.next = 8;\n            return put(updateStudioSuccess(updated.data));\n\n          case 8:\n            _context.next = 17;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 14;\n            return Promise.resolve(_context.t0);\n\n          case 14:\n            err = _context.sent;\n            _context.next = 17;\n            return put(updateStudioFail(err));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateStudioPaymentInfo,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return put(setUpdatingStudio());\n\n          case 3:\n            _context2.next = 5;\n            return studioService.updatePaymentInfo(action.payload);\n\n          case 5:\n            resp = _context2.sent;\n            _context2.next = 8;\n            return put(updateStudioSuccess(resp.data));\n\n          case 8:\n            _context2.next = 17;\n            break;\n\n          case 10:\n            _context2.prev = 10;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 14;\n            return Promise.resolve(_context2.t0);\n\n          case 14:\n            err = _context2.sent;\n            _context2.next = 17;\n            return put(updateStudioFail(err));\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateStudioDirectDeposit,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return put(setUpdatingStudio());\n\n          case 3:\n            _context3.next = 5;\n            return studioService.updateDirectDepost(action.payload);\n\n          case 5:\n            resp = _context3.sent;\n            _context3.next = 8;\n            return put(updateStudioSuccess(resp.data));\n\n          case 8:\n            _context3.next = 17;\n            break;\n\n          case 10:\n            _context3.prev = 10;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 14;\n            return Promise.resolve(_context3.t0);\n\n          case 14:\n            err = _context3.sent;\n            _context3.next = 17;\n            return put(updateStudioFail(err));\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateStudioBitpay,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return put(setUpdatingStudio());\n\n          case 3:\n            _context4.next = 5;\n            return studioService.updateBitpay(action.payload);\n\n          case 5:\n            resp = _context4.sent;\n            _context4.next = 8;\n            return put(updateStudioSuccess(resp.data));\n\n          case 8:\n            _context4.next = 17;\n            break;\n\n          case 10:\n            _context4.prev = 10;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 14;\n            return Promise.resolve(_context4.t0);\n\n          case 14:\n            err = _context4.sent;\n            _context4.next = 17;\n            return put(updateStudioFail(err));\n\n          case 17:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updateStudioPaxum,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return put(setUpdatingStudio());\n\n          case 3:\n            _context5.next = 5;\n            return studioService.updatePaxum(action.payload);\n\n          case 5:\n            resp = _context5.sent;\n            _context5.next = 8;\n            return put(updateStudioSuccess(resp.data));\n\n          case 8:\n            _context5.next = 17;\n            break;\n\n          case 10:\n            _context5.prev = 10;\n            _context5.t0 = _context5[\"catch\"](0);\n            _context5.next = 14;\n            return Promise.resolve(_context5.t0);\n\n          case 14:\n            err = _context5.sent;\n            _context5.next = 17;\n            return put(updateStudioFail(err));\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getMembers,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return put(getMembersSearching());\n\n          case 3:\n            _context6.next = 5;\n            return studioService.getMembers(action.payload);\n\n          case 5:\n            resp = _context6.sent;\n            _context6.next = 8;\n            return put(getMembersSuccess(resp.data));\n\n          case 8:\n            _context6.next = 17;\n            break;\n\n          case 10:\n            _context6.prev = 10;\n            _context6.t0 = _context6[\"catch\"](0);\n            _context6.next = 14;\n            return Promise.resolve(_context6.t0);\n\n          case 14:\n            err = _context6.sent;\n            _context6.next = 17;\n            return put(getMembersFail(err));\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getMembersCommissions,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return put(getMembersCommissionsSearching());\n\n          case 3:\n            _context7.next = 5;\n            return studioService.getMemberCommissions(action.payload);\n\n          case 5:\n            resp = _context7.sent;\n            _context7.next = 8;\n            return put(getMembersCommissionsSuccess(resp.data));\n\n          case 8:\n            _context7.next = 17;\n            break;\n\n          case 10:\n            _context7.prev = 10;\n            _context7.t0 = _context7[\"catch\"](0);\n            _context7.next = 14;\n            return Promise.resolve(_context7.t0);\n\n          case 14:\n            err = _context7.sent;\n            _context7.next = 17;\n            return put(getMembersCommissionsFail(err));\n\n          case 17:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getPerformerRequest,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.prev = 0;\n            _context8.next = 3;\n            return put(setGettingPerformerRequest());\n\n          case 3:\n            _context8.next = 5;\n            return studioService.getPerformerRequest(action.payload);\n\n          case 5:\n            resp = _context8.sent;\n            _context8.next = 8;\n            return put(getPerformerRequestSuccess(resp.data));\n\n          case 8:\n            _context8.next = 17;\n            break;\n\n          case 10:\n            _context8.prev = 10;\n            _context8.t0 = _context8[\"catch\"](0);\n            _context8.next = 14;\n            return Promise.resolve(_context8.t0);\n\n          case 14:\n            err = _context8.sent;\n            _context8.next = 17;\n            return put(getPerformerRequestFail(err));\n\n          case 17:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: getStudioEarning,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var difDateQuery, earning, _action$payload, fromDate, toDate, query, _yield$all, _yield$all2, resp, stats, err;\n\n    return _regeneratorRuntime.wrap(function worker$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n            _context9.next = 3;\n            return put(setGettingStudioEarning());\n\n          case 3:\n            difDateQuery = false;\n            _context9.next = 6;\n            return select(function (state) {\n              return state.performer.earning;\n            });\n\n          case 6:\n            earning = _context9.sent;\n            _action$payload = action.payload, fromDate = _action$payload.fromDate, toDate = _action$payload.toDate;\n            query = omit(action.payload, ['fromDate', 'toDate']);\n\n            if (fromDate && toDate) {\n              query.fromDate = fromDate;\n              query.toDate = toDate;\n            }\n\n            if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n            _context9.next = 13;\n            return all([earningService.search(query, 'studio'), earning.stats && !difDateQuery ? earning.stats : earningService.stats(query, 'studio')]);\n\n          case 13:\n            _yield$all = _context9.sent;\n            _yield$all2 = _slicedToArray(_yield$all, 2);\n            resp = _yield$all2[0];\n            stats = _yield$all2[1];\n            _context9.next = 19;\n            return put(getStudioEarningSuccess(_objectSpread(_objectSpread({}, query), {}, {\n              stats: stats,\n              data: resp.data\n            })));\n\n          case 19:\n            _context9.next = 28;\n            break;\n\n          case 21:\n            _context9.prev = 21;\n            _context9.t0 = _context9[\"catch\"](0);\n            _context9.next = 25;\n            return Promise.resolve(_context9.t0);\n\n          case 25:\n            err = _context9.sent;\n            _context9.next = 28;\n            return put(getStudioEarningFail(err));\n\n          case 28:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, worker, null, [[0, 21]]);\n  })\n}, {\n  on: getStudioStats,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.prev = 0;\n            _context10.next = 3;\n            return studioService.stats();\n\n          case 3:\n            resp = _context10.sent;\n            _context10.next = 6;\n            return put(getStudioStatsSuccess(resp.data));\n\n          case 6:\n            _context10.next = 15;\n            break;\n\n          case 8:\n            _context10.prev = 8;\n            _context10.t0 = _context10[\"catch\"](0);\n            _context10.next = 12;\n            return Promise.resolve(_context10.t0);\n\n          case 12:\n            err = _context10.sent;\n            _context10.next = 15;\n            return put(getStudioStatsFail(err));\n\n          case 15:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, worker, null, [[0, 8]]);\n  })\n}, {\n  on: getStudioPayoutRequest,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, err;\n    return _regeneratorRuntime.wrap(function worker$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.prev = 0;\n            _context11.next = 3;\n            return put(setGettingStudioPayoutRequest());\n\n          case 3:\n            _context11.next = 5;\n            return payoutRequestService.studioSearch(action.payload);\n\n          case 5:\n            resp = _context11.sent;\n            _context11.next = 8;\n            return put(getStudioPayoutRequestSuccess(resp.data));\n\n          case 8:\n            _context11.next = 17;\n            break;\n\n          case 10:\n            _context11.prev = 10;\n            _context11.t0 = _context11[\"catch\"](0);\n            _context11.next = 14;\n            return Promise.resolve(_context11.t0);\n\n          case 14:\n            err = _context11.sent;\n            _context11.next = 17;\n            return put(getStudioPayoutRequestFail(err));\n\n          case 17:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(studioSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/studio/sagas.ts"],"names":["flatten","omit","put","select","all","createSagas","earningService","studioService","payoutRequestService","updateStudio","updateStudioSuccess","updateStudioFail","setUpdatingStudio","updateStudioPaymentInfo","updateStudioDirectDeposit","updateStudioBitpay","updateStudioPaxum","getMembers","getMembersSuccess","getMembersFail","getMembersSearching","getMembersCommissions","getMembersCommissionsSuccess","getMembersCommissionsFail","getMembersCommissionsSearching","getStudioEarning","getStudioEarningFail","getStudioEarningSuccess","setGettingStudioEarning","getStudioPayoutRequest","getStudioPayoutRequestFail","getStudioPayoutRequestSuccess","setGettingStudioPayoutRequest","getPerformerRequest","getPerformerRequestFail","getPerformerRequestSuccess","setGettingPerformerRequest","getStudioStats","getStudioStatsSuccess","getStudioStatsFail","studioSagas","on","worker","data","update","payload","updated","Promise","resolve","err","action","updatePaymentInfo","resp","updateDirectDepost","updateBitpay","updatePaxum","getMemberCommissions","difDateQuery","state","performer","earning","fromDate","toDate","query","search","stats","studioSearch"],"mappings":"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","sourcesContent":["import { flatten, omit } from 'lodash';\nimport { put, select, all } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport {\n  earningService,\n  studioService,\n  payoutRequestService\n} from '@services/index';\nimport {\n  IReduxAction,\n  IResponse,\n  IStudio,\n  IPerformerDirectDeposit,\n  IPerformerBitpay,\n  IPerformerPaxum,\n  IPerformerPaymentInfoUpdate\n} from 'src/interfaces';\nimport {\n  updateStudio,\n  updateStudioSuccess,\n  updateStudioFail,\n  setUpdatingStudio,\n  updateStudioPaymentInfo,\n  updateStudioDirectDeposit,\n  updateStudioBitpay,\n  updateStudioPaxum,\n  getMembers,\n  getMembersSuccess,\n  getMembersFail,\n  getMembersSearching,\n  getMembersCommissions,\n  getMembersCommissionsSuccess,\n  getMembersCommissionsFail,\n  getMembersCommissionsSearching,\n  getStudioEarning,\n  getStudioEarningFail,\n  getStudioEarningSuccess,\n  setGettingStudioEarning,\n  getStudioPayoutRequest,\n  getStudioPayoutRequestFail,\n  getStudioPayoutRequestSuccess,\n  setGettingStudioPayoutRequest,\n  getPerformerRequest,\n  getPerformerRequestFail,\n  getPerformerRequestSuccess,\n  setGettingPerformerRequest,\n  getStudioStats,\n  getStudioStatsSuccess,\n  getStudioStatsFail\n} from './actions';\n\nconst studioSagas = [\n  {\n    on: updateStudio,\n    * worker(data: IReduxAction<any>) {\n      try {\n        yield put(setUpdatingStudio());\n        const updated: IResponse<IStudio> = yield studioService.update(\n          data.payload\n        );\n        yield put(updateStudioSuccess(updated.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n\n  {\n    on: updateStudioPaymentInfo,\n    * worker(action: IReduxAction<IPerformerPaymentInfoUpdate>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updatePaymentInfo(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: updateStudioDirectDeposit,\n    * worker(action: IReduxAction<IPerformerDirectDeposit>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updateDirectDepost(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: updateStudioBitpay,\n    * worker(action: IReduxAction<IPerformerBitpay>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updateBitpay(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: updateStudioPaxum,\n    * worker(action: IReduxAction<IPerformerPaxum>) {\n      try {\n        yield put(setUpdatingStudio());\n        const resp: IResponse<IStudio> = yield studioService.updatePaxum(\n          action.payload\n        );\n        yield put(updateStudioSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(updateStudioFail(err));\n      }\n    }\n  },\n  {\n    on: getMembers,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(getMembersSearching());\n        const resp = yield studioService.getMembers(action.payload);\n        yield put(getMembersSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMembersFail(err));\n      }\n    }\n  },\n  {\n    on: getMembersCommissions,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(getMembersCommissionsSearching());\n        const resp = yield studioService.getMemberCommissions(action.payload);\n        yield put(getMembersCommissionsSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getMembersCommissionsFail(err));\n      }\n    }\n  },\n  {\n    on: getPerformerRequest,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingPerformerRequest());\n        const resp = yield studioService.getPerformerRequest(action.payload);\n        yield put(getPerformerRequestSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getPerformerRequestFail(err));\n      }\n    }\n  },\n  {\n    on: getStudioEarning,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingStudioEarning());\n        let difDateQuery = false;\n        const earning = yield select((state) => state.performer.earning);\n        const { fromDate, toDate } = action.payload;\n        const query = omit(action.payload, ['fromDate', 'toDate']);\n        if (fromDate && toDate) {\n          query.fromDate = fromDate;\n          query.toDate = toDate;\n        }\n\n        if (earning.toDate !== toDate || earning.fromDate !== fromDate) difDateQuery = true;\n\n        const [resp, stats] = yield all([\n          earningService.search(query, 'studio'),\n          earning.stats && !difDateQuery\n            ? earning.stats\n            : earningService.stats(query, 'studio')\n        ]);\n        yield put(\n          getStudioEarningSuccess({ ...query, stats, data: resp.data })\n        );\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getStudioEarningFail(err));\n      }\n    }\n  },\n  {\n    on: getStudioStats,\n    * worker() {\n      try {\n        const resp = yield studioService.stats();\n        yield put(getStudioStatsSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getStudioStatsFail(err));\n      }\n    }\n  },\n  {\n    on: getStudioPayoutRequest,\n    * worker(action: IReduxAction<any>) {\n      try {\n        yield put(setGettingStudioPayoutRequest());\n        const resp = yield payoutRequestService.studioSearch(action.payload);\n        yield put(getStudioPayoutRequestSuccess(resp.data));\n      } catch (e) {\n        const err = yield Promise.resolve(e);\n        yield put(getStudioPayoutRequestFail(err));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(studioSagas)]);\n"]},"metadata":{},"sourceType":"module"}