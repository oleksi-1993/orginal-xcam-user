{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport { authService, userService, performerService, studioService } from 'src/services';\nimport { PERFORMER_ROLE, USER_ROLE, STUDIO_ROLE } from 'src/services/api-request';\nimport { message } from 'antd';\nimport { updateCurrentStudio } from '../studio/actions';\nimport { updateCurrentPerformer } from '../performer/actions';\nimport { updateCurrentUser } from '../user/actions';\nimport { login, loginSuccess, logout, loginFail, performerRegister, performerRegisterFail, setPerformerRegisterSubmitting, loginRequesting, userRegister, userRegisterFail, userRegisterSuccess, setUserRegisterSubmitting, performerRegisterSuccess, performerlogin, performerloginFail, performerloginSuccess, studioLogin, studioLoginSuccess, studioLoginFail, updatePassword, updatePasswordSuccess, updatePasswordFail, setUpdatePasswordSubmitting } from './actions';\nvar authSagas = [{\n  on: login,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, userResp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return put(loginRequesting());\n\n          case 3:\n            payload = data.payload;\n            _context.next = 6;\n            return authService.login(payload);\n\n          case 6:\n            resp = _context.sent.data;\n            _context.next = 9;\n            return authService.setAuthHeader(resp.token, USER_ROLE);\n\n          case 9:\n            _context.next = 11;\n            return userService.me();\n\n          case 11:\n            userResp = _context.sent.data;\n            _context.next = 14;\n            return put(updateCurrentUser(userResp));\n\n          case 14:\n            _context.next = 16;\n            return put(loginSuccess());\n\n          case 16:\n            Router.push('/');\n            _context.next = 26;\n            break;\n\n          case 19:\n            _context.prev = 19;\n            _context.t0 = _context[\"catch\"](0);\n            _context.next = 23;\n            return Promise.resolve(_context.t0);\n\n          case 23:\n            error = _context.sent;\n            _context.next = 26;\n            return put(loginFail(error));\n\n          case 26:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, worker, null, [[0, 19]]);\n  })\n}, {\n  on: performerlogin,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, performerResp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return put(loginRequesting());\n\n          case 3:\n            payload = data.payload;\n            _context2.next = 6;\n            return authService.performerLogin(payload);\n\n          case 6:\n            resp = _context2.sent.data;\n            _context2.next = 9;\n            return authService.setAuthHeader(resp.token, PERFORMER_ROLE);\n\n          case 9:\n            _context2.next = 11;\n            return performerService.me();\n\n          case 11:\n            performerResp = _context2.sent.data;\n            _context2.next = 14;\n            return put(updateCurrentPerformer(performerResp));\n\n          case 14:\n            _context2.next = 16;\n            return put(performerloginSuccess());\n\n          case 16:\n            Router.push('/live');\n            _context2.next = 26;\n            break;\n\n          case 19:\n            _context2.prev = 19;\n            _context2.t0 = _context2[\"catch\"](0);\n            _context2.next = 23;\n            return Promise.resolve(_context2.t0);\n\n          case 23:\n            error = _context2.sent;\n            _context2.next = 26;\n            return put(performerloginFail(error));\n\n          case 26:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, worker, null, [[0, 19]]);\n  })\n}, {\n  on: studioLogin,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, studioResp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return put(loginRequesting());\n\n          case 3:\n            payload = data.payload;\n            _context3.next = 6;\n            return authService.studioLogin(payload);\n\n          case 6:\n            resp = _context3.sent.data;\n            _context3.next = 9;\n            return authService.setAuthHeader(resp.token, STUDIO_ROLE);\n\n          case 9:\n            _context3.next = 11;\n            return studioService.me();\n\n          case 11:\n            studioResp = _context3.sent.data;\n            _context3.next = 14;\n            return put(updateCurrentStudio(studioResp));\n\n          case 14:\n            _context3.next = 16;\n            return put(studioLoginSuccess());\n\n          case 16:\n            Router.push('/studio/account-settings');\n            _context3.next = 26;\n            break;\n\n          case 19:\n            _context3.prev = 19;\n            _context3.t0 = _context3[\"catch\"](0);\n            _context3.next = 23;\n            return Promise.resolve(_context3.t0);\n\n          case 23:\n            error = _context3.sent;\n            _context3.next = 26;\n            return put(studioLoginFail(error));\n\n          case 26:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, worker, null, [[0, 19]]);\n  })\n}, {\n  on: performerRegister,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var payload, resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return put(setPerformerRegisterSubmitting());\n\n          case 3:\n            payload = data.payload;\n            _context4.next = 6;\n            return authService.performersRegister(payload);\n\n          case 6:\n            resp = _context4.sent;\n            _context4.next = 9;\n            return put(performerRegisterSuccess(resp.data));\n\n          case 9:\n            _context4.next = 18;\n            break;\n\n          case 11:\n            _context4.prev = 11;\n            _context4.t0 = _context4[\"catch\"](0);\n            _context4.next = 15;\n            return Promise.resolve(_context4.t0);\n\n          case 15:\n            error = _context4.sent;\n            _context4.next = 18;\n            return put(performerRegisterFail(error));\n\n          case 18:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, worker, null, [[0, 11]]);\n  })\n}, {\n  on: logout,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker() {\n    return _regeneratorRuntime.wrap(function worker$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return authService.removeToken();\n\n          case 3:\n            _context5.next = 5;\n            return authService.removeRemember();\n\n          case 5:\n            Router.push('/');\n            message.success('Log out!');\n            _context5.next = 12;\n            break;\n\n          case 9:\n            _context5.prev = 9;\n            _context5.t0 = _context5[\"catch\"](0);\n            message.error('Something went wrong!');\n\n          case 12:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, worker, null, [[0, 9]]);\n  })\n}, {\n  on: userRegister,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(data) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.prev = 0;\n            _context6.next = 3;\n            return put(setUserRegisterSubmitting());\n\n          case 3:\n            _context6.next = 5;\n            return authService.userRegister(data.payload);\n\n          case 5:\n            resp = _context6.sent;\n            _context6.next = 8;\n            return put(userRegisterSuccess(resp.data));\n\n          case 8:\n            _context6.next = 17;\n            break;\n\n          case 10:\n            _context6.prev = 10;\n            _context6.t0 = _context6[\"catch\"](0);\n            _context6.next = 14;\n            return Promise.resolve(_context6.t0);\n\n          case 14:\n            error = _context6.sent;\n            _context6.next = 17;\n            return put(userRegisterFail(error));\n\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}, {\n  on: updatePassword,\n  worker: /*#__PURE__*/_regeneratorRuntime.mark(function worker(action) {\n    var resp, error;\n    return _regeneratorRuntime.wrap(function worker$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _context7.next = 3;\n            return put(setUpdatePasswordSubmitting());\n\n          case 3:\n            _context7.next = 5;\n            return authService.updatePassword(action.payload);\n\n          case 5:\n            resp = _context7.sent;\n            _context7.next = 8;\n            return put(updatePasswordSuccess(resp.data));\n\n          case 8:\n            _context7.next = 17;\n            break;\n\n          case 10:\n            _context7.prev = 10;\n            _context7.t0 = _context7[\"catch\"](0);\n            _context7.next = 14;\n            return Promise.resolve(_context7.t0);\n\n          case 14:\n            error = _context7.sent;\n            _context7.next = 17;\n            return put(updatePasswordFail(error));\n\n          case 17:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, worker, null, [[0, 10]]);\n  })\n}];\nexport default flatten([createSagas(authSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/auth/sagas.ts"],"names":["flatten","put","createSagas","Router","authService","userService","performerService","studioService","PERFORMER_ROLE","USER_ROLE","STUDIO_ROLE","message","updateCurrentStudio","updateCurrentPerformer","updateCurrentUser","login","loginSuccess","logout","loginFail","performerRegister","performerRegisterFail","setPerformerRegisterSubmitting","loginRequesting","userRegister","userRegisterFail","userRegisterSuccess","setUserRegisterSubmitting","performerRegisterSuccess","performerlogin","performerloginFail","performerloginSuccess","studioLogin","studioLoginSuccess","studioLoginFail","updatePassword","updatePasswordSuccess","updatePasswordFail","setUpdatePasswordSubmitting","authSagas","on","worker","data","payload","resp","setAuthHeader","token","me","userResp","push","Promise","resolve","error","performerLogin","performerResp","studioResp","performersRegister","removeToken","removeRemember","success","action"],"mappings":";AAAA,SAASA,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,WAAT,QAA4B,YAA5B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,gBAHF,EAIEC,aAJF,QAKO,cALP;AAMA,SACEC,cADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,0BAJP;AAgBA,SAASC,OAAT,QAAwB,MAAxB;AACA,SAASC,mBAAT,QAAoC,mBAApC;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SACEC,KADF,EAEEC,YAFF,EAGEC,MAHF,EAIEC,SAJF,EAKEC,iBALF,EAMEC,qBANF,EAOEC,8BAPF,EAQEC,eARF,EASEC,YATF,EAUEC,gBAVF,EAWEC,mBAXF,EAYEC,yBAZF,EAaEC,wBAbF,EAcEC,cAdF,EAeEC,kBAfF,EAgBEC,qBAhBF,EAiBEC,WAjBF,EAkBEC,kBAlBF,EAmBEC,eAnBF,EAoBEC,cApBF,EAqBEC,qBArBF,EAsBEC,kBAtBF,EAuBEC,2BAvBF,QAwBO,WAxBP;AA0BA,IAAMC,SAAS,GAAG,CAChB;AACEC,EAAAA,EAAE,EAAExB,KADN;AAEIyB,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMxC,GAAG,CAACqB,eAAe,EAAhB,CAAT;;AAJN;AAKYoB,YAAAA,OALZ,GAKsBD,IAAI,CAACC,OAL3B;AAAA;AAMoB,mBAAMtC,WAAW,CAACW,KAAZ,CAAkB2B,OAAlB,CAAN;;AANpB;AAMYC,YAAAA,IANZ,iBAMsDF,IANtD;AAAA;AAQM,mBAAMrC,WAAW,CAACwC,aAAZ,CAA0BD,IAAI,CAACE,KAA/B,EAAsCpC,SAAtC,CAAN;;AARN;AAAA;AAUwB,mBAAMJ,WAAW,CAACyC,EAAZ,EAAN;;AAVxB;AAUYC,YAAAA,QAVZ,iBAUgDN,IAVhD;AAAA;AAWM,mBAAMxC,GAAG,CAACa,iBAAiB,CAACiC,QAAD,CAAlB,CAAT;;AAXN;AAAA;AAYM,mBAAM9C,GAAG,CAACe,YAAY,EAAb,CAAT;;AAZN;AAcMb,YAAAA,MAAM,CAAC6C,IAAP,CAAY,GAAZ;AAdN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAgBoB,mBAAMC,OAAO,CAACC,OAAR,aAAN;;AAhBpB;AAgBYC,YAAAA,KAhBZ;AAAA;AAiBM,mBAAMlD,GAAG,CAACiB,SAAS,CAACiC,KAAD,CAAV,CAAT;;AAjBN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADgB,EAsBhB;AACEZ,EAAAA,EAAE,EAAEX,cADN;AAEIY,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMxC,GAAG,CAACqB,eAAe,EAAhB,CAAT;;AAJN;AAKYoB,YAAAA,OALZ,GAKsBD,IAAI,CAACC,OAL3B;AAAA;AAMoB,mBAAMtC,WAAW,CAACgD,cAAZ,CAA2BV,OAA3B,CAAN;;AANpB;AAMYC,YAAAA,IANZ,kBAM+DF,IAN/D;AAAA;AAQM,mBAAMrC,WAAW,CAACwC,aAAZ,CAA0BD,IAAI,CAACE,KAA/B,EAAsCrC,cAAtC,CAAN;;AARN;AAAA;AAS6B,mBAAMF,gBAAgB,CAACwC,EAAjB,EAAN;;AAT7B;AASYO,YAAAA,aATZ,kBAS0DZ,IAT1D;AAAA;AAUM,mBAAMxC,GAAG,CAACY,sBAAsB,CAACwC,aAAD,CAAvB,CAAT;;AAVN;AAAA;AAWM,mBAAMpD,GAAG,CAAC6B,qBAAqB,EAAtB,CAAT;;AAXN;AAYM3B,YAAAA,MAAM,CAAC6C,IAAP,CAAY,OAAZ;AAZN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcoB,mBAAMC,OAAO,CAACC,OAAR,cAAN;;AAdpB;AAcYC,YAAAA,KAdZ;AAAA;AAeM,mBAAMlD,GAAG,CAAC4B,kBAAkB,CAACsB,KAAD,CAAnB,CAAT;;AAfN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAtBgB,EA0ChB;AACEZ,EAAAA,EAAE,EAAER,WADN;AAEIS,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMxC,GAAG,CAACqB,eAAe,EAAhB,CAAT;;AAJN;AAKYoB,YAAAA,OALZ,GAKsBD,IAAI,CAACC,OAL3B;AAAA;AAMoB,mBAAMtC,WAAW,CAAC2B,WAAZ,CAAwBW,OAAxB,CAAN;;AANpB;AAMYC,YAAAA,IANZ,kBAM4DF,IAN5D;AAAA;AAQM,mBAAMrC,WAAW,CAACwC,aAAZ,CAA0BD,IAAI,CAACE,KAA/B,EAAsCnC,WAAtC,CAAN;;AARN;AAAA;AAS0B,mBAAMH,aAAa,CAACuC,EAAd,EAAN;;AAT1B;AASYQ,YAAAA,UATZ,kBASoDb,IATpD;AAAA;AAUM,mBAAMxC,GAAG,CAACW,mBAAmB,CAAC0C,UAAD,CAApB,CAAT;;AAVN;AAAA;AAWM,mBAAMrD,GAAG,CAAC+B,kBAAkB,EAAnB,CAAT;;AAXN;AAYM7B,YAAAA,MAAM,CAAC6C,IAAP,CAAY,0BAAZ;AAZN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcoB,mBAAMC,OAAO,CAACC,OAAR,cAAN;;AAdpB;AAcYC,YAAAA,KAdZ;AAAA;AAeM,mBAAMlD,GAAG,CAACgC,eAAe,CAACkB,KAAD,CAAhB,CAAT;;AAfN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA1CgB,EA6DhB;AACEZ,EAAAA,EAAE,EAAEpB,iBADN;AAEIqB,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMxC,GAAG,CAACoB,8BAA8B,EAA/B,CAAT;;AAJN;AAKcqB,YAAAA,OALd,GAK0BD,IAL1B,CAKcC,OALd;AAAA;AAM0C,mBAAMtC,WAAW,CAACmD,kBAAZ,CACxCb,OADwC,CAAN;;AAN1C;AAMYC,YAAAA,IANZ;AAAA;AASM,mBAAM1C,GAAG,CAAC0B,wBAAwB,CAACgB,IAAI,CAACF,IAAN,CAAzB,CAAT;;AATN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWoB,mBAAMQ,OAAO,CAACC,OAAR,cAAN;;AAXpB;AAWYC,YAAAA,KAXZ;AAAA;AAYM,mBAAMlD,GAAG,CAACmB,qBAAqB,CAAC+B,KAAD,CAAtB,CAAT;;AAZN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA7DgB,EA6EhB;AACEZ,EAAAA,EAAE,EAAEtB,MADN;AAEIuB,EAAAA,MAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMpC,WAAW,CAACoD,WAAZ,EAAN;;AAJN;AAAA;AAKM,mBAAMpD,WAAW,CAACqD,cAAZ,EAAN;;AALN;AAMMtD,YAAAA,MAAM,CAAC6C,IAAP,CAAY,GAAZ;AACArC,YAAAA,OAAO,CAAC+C,OAAR,CAAgB,UAAhB;AAPN;AAAA;;AAAA;AAAA;AAAA;AASM/C,YAAAA,OAAO,CAACwC,KAAR,CAAc,uBAAd;;AATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA7EgB,EA0FhB;AACEZ,EAAAA,EAAE,EAAEhB,YADN;AAEIiB,EAAAA,MAFJ,wDAEWC,IAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAMxC,GAAG,CAACyB,yBAAyB,EAA1B,CAAT;;AAJN;AAAA;AAKqC,mBAAMtB,WAAW,CAACmB,YAAZ,CACnCkB,IAAI,CAACC,OAD8B,CAAN;;AALrC;AAKYC,YAAAA,IALZ;AAAA;AAQM,mBAAM1C,GAAG,CAACwB,mBAAmB,CAACkB,IAAI,CAACF,IAAN,CAApB,CAAT;;AARN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUoB,mBAAMQ,OAAO,CAACC,OAAR,cAAN;;AAVpB;AAUYC,YAAAA,KAVZ;AAAA;AAWM,mBAAMlD,GAAG,CAACuB,gBAAgB,CAAC2B,KAAD,CAAjB,CAAT;;AAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA1FgB,EAyGhB;AACEZ,EAAAA,EAAE,EAAEL,cADN;AAEIM,EAAAA,MAFJ,wDAEWmB,MAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIM,mBAAM1D,GAAG,CAACoC,2BAA2B,EAA5B,CAAT;;AAJN;AAAA;AAKqC,mBAAMjC,WAAW,CAAC8B,cAAZ,CACnCyB,MAAM,CAACjB,OAD4B,CAAN;;AALrC;AAKYC,YAAAA,IALZ;AAAA;AAQM,mBAAM1C,GAAG,CAACkC,qBAAqB,CAACQ,IAAI,CAACF,IAAN,CAAtB,CAAT;;AARN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUoB,mBAAMQ,OAAO,CAACC,OAAR,cAAN;;AAVpB;AAUYC,YAAAA,KAVZ;AAAA;AAWM,mBAAMlD,GAAG,CAACmC,kBAAkB,CAACe,KAAD,CAAnB,CAAT;;AAXN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAzGgB,CAAlB;AA0HA,eAAenD,OAAO,CAAC,CAACE,WAAW,CAACoC,SAAD,CAAZ,CAAD,CAAtB","sourcesContent":["import { flatten } from 'lodash';\nimport { put } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport Router from 'next/router';\nimport {\n  authService,\n  userService,\n  performerService,\n  studioService\n} from 'src/services';\nimport {\n  PERFORMER_ROLE,\n  USER_ROLE,\n  STUDIO_ROLE\n} from 'src/services/api-request';\nimport {\n  ILogin,\n  IperformerLogin,\n  IRegisterFormData,\n  IUserRegisterFormData,\n  IReduxAction,\n  IResponse,\n  IPerformer,\n  IUser,\n  IUpdatePasswordFormData\n} from 'src/interfaces';\nimport { message } from 'antd';\nimport { updateCurrentStudio } from '../studio/actions';\nimport { updateCurrentPerformer } from '../performer/actions';\nimport { updateCurrentUser } from '../user/actions';\nimport {\n  login,\n  loginSuccess,\n  logout,\n  loginFail,\n  performerRegister,\n  performerRegisterFail,\n  setPerformerRegisterSubmitting,\n  loginRequesting,\n  userRegister,\n  userRegisterFail,\n  userRegisterSuccess,\n  setUserRegisterSubmitting,\n  performerRegisterSuccess,\n  performerlogin,\n  performerloginFail,\n  performerloginSuccess,\n  studioLogin,\n  studioLoginSuccess,\n  studioLoginFail,\n  updatePassword,\n  updatePasswordSuccess,\n  updatePasswordFail,\n  setUpdatePasswordSubmitting\n} from './actions';\n\nconst authSagas = [\n  {\n    on: login,\n    * worker(data: any) {\n      try {\n        yield put(loginRequesting());\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.login(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setAuthHeader(resp.token, USER_ROLE);\n\n        const userResp = (yield userService.me()).data;\n        yield put(updateCurrentUser(userResp));\n        yield put(loginSuccess());\n\n        Router.push('/');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(loginFail(error));\n      }\n    }\n  },\n  {\n    on: performerlogin,\n    * worker(data: any) {\n      try {\n        yield put(loginRequesting());\n        const payload = data.payload as IperformerLogin;\n        const resp = (yield authService.performerLogin(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setAuthHeader(resp.token, PERFORMER_ROLE);\n        const performerResp = (yield performerService.me()).data;\n        yield put(updateCurrentPerformer(performerResp));\n        yield put(performerloginSuccess());\n        Router.push('/live');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(performerloginFail(error));\n      }\n    }\n  },\n\n  {\n    on: studioLogin,\n    * worker(data: IReduxAction<ILogin>) {\n      try {\n        yield put(loginRequesting());\n        const payload = data.payload as ILogin;\n        const resp = (yield authService.studioLogin(payload)).data;\n        // store token, update store and redirect to dashboard page\n        yield authService.setAuthHeader(resp.token, STUDIO_ROLE);\n        const studioResp = (yield studioService.me()).data;\n        yield put(updateCurrentStudio(studioResp));\n        yield put(studioLoginSuccess());\n        Router.push('/studio/account-settings');\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(studioLoginFail(error));\n      }\n    }\n  },\n  {\n    on: performerRegister,\n    * worker(data: IReduxAction<IRegisterFormData>) {\n      try {\n        yield put(setPerformerRegisterSubmitting());\n        const { payload } = data;\n        const resp: IResponse<IPerformer> = yield authService.performersRegister(\n          payload\n        );\n        yield put(performerRegisterSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(performerRegisterFail(error));\n      }\n    }\n  },\n  {\n    on: logout,\n    * worker() {\n      try {\n        yield authService.removeToken();\n        yield authService.removeRemember();\n        Router.push('/');\n        message.success('Log out!');\n      } catch (e) {\n        message.error('Something went wrong!');\n      }\n    }\n  },\n  {\n    on: userRegister,\n    * worker(data: IReduxAction<IUserRegisterFormData>) {\n      try {\n        yield put(setUserRegisterSubmitting());\n        const resp: IResponse<IUser> = yield authService.userRegister(\n          data.payload\n        );\n        yield put(userRegisterSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(userRegisterFail(error));\n      }\n    }\n  },\n  {\n    on: updatePassword,\n    * worker(action: IReduxAction<IUpdatePasswordFormData>) {\n      try {\n        yield put(setUpdatePasswordSubmitting());\n        const resp: IResponse<IUser> = yield authService.updatePassword(\n          action.payload\n        );\n        yield put(updatePasswordSuccess(resp.data));\n      } catch (e) {\n        const error = yield Promise.resolve(e);\n        yield put(updatePasswordFail(error));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(authSagas)]);\n"]},"metadata":{},"sourceType":"module"}