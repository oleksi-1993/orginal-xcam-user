{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\nexport var SettingService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(SettingService, _APIRequest);\n\n  var _super = _createSuper(SettingService);\n\n  function SettingService() {\n    _classCallCheck(this, SettingService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SettingService, [{\n    key: \"all\",\n    value: function all() {\n      var group = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      return this.get(this.buildUrl('/settings/public', {\n        group: group\n      }));\n    }\n  }, {\n    key: \"getCountries\",\n    value: function getCountries() {\n      return this.get('/countries/list');\n    }\n  }, {\n    key: \"getTimezones\",\n    value: function getTimezones() {\n      return this.get('/timezones/list');\n    }\n  }]);\n\n  return SettingService;\n}(APIRequest);\nexport var settingService = new SettingService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/setting.service.ts"],"names":["APIRequest","SettingService","group","get","buildUrl","settingService"],"mappings":";;;;;;;;;;AACA,SAASA,UAAT,QAAsC,eAAtC;AAEA,WAAaC,cAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,eAA8C;AAAA,UAA1CC,KAA0C,uEAAlC,EAAkC;AAC5C,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,kBAAd,EAAkC;AAAEF,QAAAA,KAAK,EAALA;AAAF,OAAlC,CAAT,CAAP;AACD;AAHH;AAAA;AAAA,WAKE,wBAAiD;AAC/C,aAAO,KAAKC,GAAL,CAAS,iBAAT,CAAP;AACD;AAPH;AAAA;AAAA,WASE,wBAA6C;AAC3C,aAAO,KAAKA,GAAL,CAAS,iBAAT,CAAP;AACD;AAXH;;AAAA;AAAA,EAAoCH,UAApC;AAcA,OAAO,IAAMK,cAAc,GAAG,IAAIJ,cAAJ,EAAvB","sourcesContent":["import { ISetting, ICountries } from 'src/interfaces';\nimport { APIRequest, IResponse } from './api-request';\n\nexport class SettingService extends APIRequest {\n  all(group = ''): Promise<IResponse<ISetting>> {\n    return this.get(this.buildUrl('/settings/public', { group }));\n  }\n\n  getCountries(): Promise<IResponse<ICountries[]>> {\n    return this.get('/countries/list');\n  }\n\n  getTimezones(): Promise<IResponse<string[]>> {\n    return this.get('/timezones/list');\n  }\n}\n\nexport const settingService = new SettingService();\n"]},"metadata":{},"sourceType":"module"}