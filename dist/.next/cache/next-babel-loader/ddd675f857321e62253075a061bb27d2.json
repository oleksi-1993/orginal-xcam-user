{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport var MessageService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(MessageService, _APIRequest);\n\n  var _super = _createSuper(MessageService);\n\n  function MessageService() {\n    _classCallCheck(this, MessageService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MessageService, [{\n    key: \"getConversations\",\n    value: function getConversations(query) {\n      return this.get(this.buildUrl('/conversations', query));\n    }\n  }, {\n    key: \"searchConversations\",\n    value: function searchConversations(query) {\n      return this.get(this.buildUrl('/conversations/search', query));\n    }\n  }, {\n    key: \"createConversation\",\n    value: function createConversation(data) {\n      return this.post('/conversations', data);\n    }\n  }, {\n    key: \"getConversationDetail\",\n    value: function getConversationDetail(id) {\n      return this.get(\"/conversations/\".concat(id));\n    }\n  }, {\n    key: \"getConversationByStreamId\",\n    value: function getConversationByStreamId(streamId) {\n      return this.get(\"/conversations/stream/\".concat(streamId));\n    }\n  }, {\n    key: \"getMessages\",\n    value: function getMessages(conversationId, query) {\n      return this.get(this.buildUrl(\"/messages/conversations/\".concat(conversationId), query));\n    }\n  }, {\n    key: \"getPublicMessages\",\n    value: function getPublicMessages(conversationId, query) {\n      return this.get(this.buildUrl(\"/messages/conversations/public/\".concat(conversationId), query));\n    }\n  }, {\n    key: \"sendMessage\",\n    value: function sendMessage(conversationId, data) {\n      return this.post(\"/messages/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"sendStreamMessage\",\n    value: function sendStreamMessage(conversationId, data) {\n      return this.post(\"/messages/stream/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"sendPublicStreamMessage\",\n    value: function sendPublicStreamMessage(conversationId, data) {\n      return this.post(\"/messages/stream/public/conversations/\".concat(conversationId), data);\n    }\n  }, {\n    key: \"findPublicConversationPerformer\",\n    value: function findPublicConversationPerformer(performerId) {\n      return this.get(\"/conversations/stream/public/\".concat(performerId));\n    }\n  }, {\n    key: \"countTotalNotRead\",\n    value: function countTotalNotRead() {\n      return this.get('/messages/counting-not-read-messages');\n    }\n  }, {\n    key: \"readAllInConversation\",\n    value: function readAllInConversation(conversationId, recipientId) {\n      return this.post('/messages/read-all', {\n        conversationId: conversationId,\n        recipientId: recipientId\n      });\n    }\n  }, {\n    key: \"getMessageUploadUrl\",\n    value: function getMessageUploadUrl() {\n      var config = getGlobalConfig();\n      return \"\".concat(config.NEXT_PUBLIC_API_ENDPOINT, \"/messages/private/file\");\n    }\n  }, {\n    key: \"deleteMessage\",\n    value: function deleteMessage(id) {\n      return this.del(\"/messages/\".concat(id));\n    }\n  }, {\n    key: \"deleteAllMessageInConversation\",\n    value: function deleteAllMessageInConversation(conversationId) {\n      return this.del(\"/messages/\".concat(conversationId, \"/remove-all-message\"));\n    }\n  }]);\n\n  return MessageService;\n}(APIRequest);\nexport var messageService = new MessageService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/message.service.ts"],"names":["APIRequest","getGlobalConfig","MessageService","query","get","buildUrl","data","post","id","streamId","conversationId","performerId","recipientId","config","NEXT_PUBLIC_API_ENDPOINT","del","messageService"],"mappings":";;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,WAAaC,cAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WACE,0BAAiBC,KAAjB,EAA8C;AAC5C,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,gBAAd,EAAgCF,KAAhC,CAAT,CAAP;AACD;AAHH;AAAA;AAAA,WAKE,6BAAoBA,KAApB,EAAiD;AAC/C,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,CAAc,uBAAd,EAAuCF,KAAvC,CAAT,CAAP;AACD;AAPH;AAAA;AAAA,WASE,4BAAmBG,IAAnB,EAAiD;AAC/C,aAAO,KAAKC,IAAL,CAAU,gBAAV,EAA4BD,IAA5B,CAAP;AACD;AAXH;AAAA;AAAA,WAaE,+BAAsBE,EAAtB,EAAkC;AAChC,aAAO,KAAKJ,GAAL,0BAA2BI,EAA3B,EAAP;AACD;AAfH;AAAA;AAAA,WAiBE,mCAA0BC,QAA1B,EAA4C;AAC1C,aAAO,KAAKL,GAAL,iCAAkCK,QAAlC,EAAP;AACD;AAnBH;AAAA;AAAA,WAqBE,qBAAYC,cAAZ,EAAoCP,KAApC,EAAiE;AAC/D,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,mCAAyCK,cAAzC,GAA2DP,KAA3D,CAAT,CAAP;AACD;AAvBH;AAAA;AAAA,WAyBE,2BAAkBO,cAAlB,EAA0CP,KAA1C,EAAuE;AACrE,aAAO,KAAKC,GAAL,CAAS,KAAKC,QAAL,0CAAgDK,cAAhD,GAAkEP,KAAlE,CAAT,CAAP;AACD;AA3BH;AAAA;AAAA,WA6BE,qBAAYO,cAAZ,EAAoCJ,IAApC,EAA+D;AAC7D,aAAO,KAAKC,IAAL,mCAAqCG,cAArC,GAAuDJ,IAAvD,CAAP;AACD;AA/BH;AAAA;AAAA,WAiCE,2BAAkBI,cAAlB,EAA0CJ,IAA1C,EAAqE;AACnE,aAAO,KAAKC,IAAL,0CAA4CG,cAA5C,GAA8DJ,IAA9D,CAAP;AACD;AAnCH;AAAA;AAAA,WAqCE,iCAAwBI,cAAxB,EAAgDJ,IAAhD,EAA2E;AACzE,aAAO,KAAKC,IAAL,iDAAmDG,cAAnD,GAAqEJ,IAArE,CAAP;AACD;AAvCH;AAAA;AAAA,WAyCE,yCAAgCK,WAAhC,EAAqD;AACnD,aAAO,KAAKP,GAAL,wCAAyCO,WAAzC,EAAP;AACD;AA3CH;AAAA;AAAA,WA6CE,6BAAoB;AAClB,aAAO,KAAKP,GAAL,CAAS,sCAAT,CAAP;AACD;AA/CH;AAAA;AAAA,WAiDE,+BAAsBM,cAAtB,EAAuDE,WAAvD,EAA4E;AAC1E,aAAO,KAAKL,IAAL,CAAU,oBAAV,EAAgC;AAAEG,QAAAA,cAAc,EAAdA,cAAF;AAAkBE,QAAAA,WAAW,EAAXA;AAAlB,OAAhC,CAAP;AACD;AAnDH;AAAA;AAAA,WAqDE,+BAAsB;AACpB,UAAMC,MAAM,GAAGZ,eAAe,EAA9B;AACA,uBAAUY,MAAM,CAACC,wBAAjB;AACD;AAxDH;AAAA;AAAA,WA0DE,uBAAcN,EAAd,EAAkB;AAChB,aAAO,KAAKO,GAAL,qBAAsBP,EAAtB,EAAP;AACD;AA5DH;AAAA;AAAA,WA8DE,wCAA+BE,cAA/B,EAA+C;AAC7C,aAAO,KAAKK,GAAL,qBAAsBL,cAAtB,yBAAP;AACD;AAhEH;;AAAA;AAAA,EAAoCV,UAApC;AAmEA,OAAO,IAAMgB,cAAc,GAAG,IAAId,cAAJ,EAAvB","sourcesContent":["import { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class MessageService extends APIRequest {\n  getConversations(query?: Record<string, any>) {\n    return this.get(this.buildUrl('/conversations', query));\n  }\n\n  searchConversations(query?: Record<string, any>) {\n    return this.get(this.buildUrl('/conversations/search', query));\n  }\n\n  createConversation(data: Record<string, string>) {\n    return this.post('/conversations', data);\n  }\n\n  getConversationDetail(id: string) {\n    return this.get(`/conversations/${id}`);\n  }\n\n  getConversationByStreamId(streamId: string) {\n    return this.get(`/conversations/stream/${streamId}`);\n  }\n\n  getMessages(conversationId: string, query?: Record<string, any>) {\n    return this.get(this.buildUrl(`/messages/conversations/${conversationId}`, query));\n  }\n\n  getPublicMessages(conversationId: string, query?: Record<string, any>) {\n    return this.get(this.buildUrl(`/messages/conversations/public/${conversationId}`, query));\n  }\n\n  sendMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/conversations/${conversationId}`, data);\n  }\n\n  sendStreamMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/stream/conversations/${conversationId}`, data);\n  }\n\n  sendPublicStreamMessage(conversationId: string, data: Record<string, any>) {\n    return this.post(`/messages/stream/public/conversations/${conversationId}`, data);\n  }\n\n  findPublicConversationPerformer(performerId: string) {\n    return this.get(`/conversations/stream/public/${performerId}`);\n  }\n\n  countTotalNotRead() {\n    return this.get('/messages/counting-not-read-messages');\n  }\n\n  readAllInConversation(conversationId: string | number, recipientId: string) {\n    return this.post('/messages/read-all', { conversationId, recipientId });\n  }\n\n  getMessageUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/messages/private/file`;\n  }\n\n  deleteMessage(id) {\n    return this.del(`/messages/${id}`);\n  }\n\n  deleteAllMessageInConversation(conversationId) {\n    return this.del(`/messages/${conversationId}/remove-all-message`);\n  }\n}\n\nexport const messageService = new MessageService();\n"]},"metadata":{},"sourceType":"module"}