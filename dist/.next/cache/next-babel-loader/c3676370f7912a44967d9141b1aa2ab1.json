{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport cookie from 'js-cookie';\nimport { APIRequest, TOKEN, ROLE } from './api-request';\nexport var AuthService = /*#__PURE__*/function (_APIRequest) {\n  _inherits(AuthService, _APIRequest);\n\n  var _super = _createSuper(AuthService);\n\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(AuthService, [{\n    key: \"login\",\n    value: function login(data) {\n      return this.post('/auth/users/login', data);\n    }\n  }, {\n    key: \"setAuthHeader\",\n    value: function setAuthHeader(token, role) {\n      // https://github.com/js-cookie/js-cookie\n      // since Safari does not support, need a better solution\n      cookie.set(TOKEN, token, {\n        expires: 365\n      });\n      cookie.set(ROLE, role, {\n        expires: 365\n      });\n      this.setAuthHeaderToken(token);\n    }\n  }, {\n    key: \"performerLogin\",\n    value: function performerLogin(data) {\n      return this.post('/auth/performers/login', data);\n    }\n  }, {\n    key: \"studioLogin\",\n    value: function studioLogin(data) {\n      return this.post('/auth/studio/login', data);\n    }\n  }, {\n    key: \"setToken\",\n    value: function setToken(token) {\n      // https://github.com/js-cookie/js-cookie\n      // since Safari does not support, need a better solution\n      cookie.set(TOKEN, token, {\n        expires: 365\n      });\n      this.setAuthHeaderToken(token);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken() {\n      var token = cookie.get(TOKEN);\n      return token || null;\n    }\n  }, {\n    key: \"getRole\",\n    value: function getRole() {\n      var role = cookie.get(ROLE);\n      return role || null;\n    }\n  }, {\n    key: \"removeToken\",\n    value: function removeToken() {\n      cookie.remove(TOKEN);\n      cookie.remove(ROLE);\n    }\n  }, {\n    key: \"removeRemember\",\n    value: function removeRemember() {\n      true && cookie.remove('rememberMe');\n    }\n  }, {\n    key: \"updatePassword\",\n    value: function updatePassword(body) {\n      return this.put('/auth/users/me/password', body);\n    }\n  }, {\n    key: \"performersRegister\",\n    value: function performersRegister(data) {\n      return this.register('/auth/performers/register', data);\n    }\n  }, {\n    key: \"userRegister\",\n    value: function userRegister(data) {\n      return this.post('/auth/users/register', data);\n    }\n  }, {\n    key: \"studioRegister\",\n    value: function studioRegister(data) {\n      return this.register('/auth/studio/register', data);\n    }\n  }, {\n    key: \"forgotPassword\",\n    value: function forgotPassword(email, type) {\n      var data = {\n        email: email,\n        type: type\n      };\n      return this.post('/auth/users/forgot', data);\n    }\n  }, {\n    key: \"resendVerificationEmail\",\n    value: function resendVerificationEmail(data) {\n      return this.post('/verification/resend-verification-email', data);\n    }\n  }]);\n\n  return AuthService;\n}(APIRequest);\nexport var authService = new AuthService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/auth.service.ts"],"names":["cookie","APIRequest","TOKEN","ROLE","AuthService","data","post","token","role","set","expires","setAuthHeaderToken","get","remove","body","put","register","email","type","authService"],"mappings":"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","sourcesContent":["import cookie from 'js-cookie';\nimport {\n  ILogin,\n  IperformerLogin,\n  IRegisterFormData,\n  IUserRegisterFormData\n} from 'src/interfaces';\nimport {\n  APIRequest, TOKEN, IResponse, ROLE\n} from './api-request';\n\nexport class AuthService extends APIRequest {\n  login(data: ILogin) {\n    return this.post('/auth/users/login', data);\n  }\n\n  setAuthHeader(token: string, role: string) {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, { expires: 365 });\n    cookie.set(ROLE, role, { expires: 365 });\n    this.setAuthHeaderToken(token);\n  }\n\n  performerLogin(data: IperformerLogin) {\n    return this.post('/auth/performers/login', data);\n  }\n\n  studioLogin(data: ILogin) {\n    return this.post('/auth/studio/login', data);\n  }\n\n  setToken(token: string): void {\n    // https://github.com/js-cookie/js-cookie\n    // since Safari does not support, need a better solution\n    cookie.set(TOKEN, token, { expires: 365 });\n    this.setAuthHeaderToken(token);\n  }\n\n  getToken(): string {\n    const token = cookie.get(TOKEN);\n    return token || null;\n  }\n\n  getRole(): string {\n    const role = cookie.get(ROLE);\n    return role || null;\n  }\n\n  removeToken(): void {\n    cookie.remove(TOKEN);\n    cookie.remove(ROLE);\n  }\n\n  removeRemember(): void {\n    process.browser && cookie.remove('rememberMe');\n  }\n\n  updatePassword(body: { password: string; source?: string }) {\n    return this.put('/auth/users/me/password', body);\n  }\n\n  performersRegister(data: IRegisterFormData): Promise<any> {\n    return this.register('/auth/performers/register', data);\n  }\n\n  userRegister(data: IUserRegisterFormData): Promise<IResponse<any>> {\n    return this.post('/auth/users/register', data);\n  }\n\n  studioRegister(data: IRegisterFormData): Promise<any> {\n    return this.register('/auth/studio/register', data);\n  }\n\n  forgotPassword(email: string, type: string) {\n    const data = {\n      email,\n      type\n    };\n    return this.post('/auth/users/forgot', data);\n  }\n\n  resendVerificationEmail(data: { email: string, source: string}) {\n    return this.post('/verification/resend-verification-email', data);\n  }\n}\n\nexport const authService = new AuthService();\n"]},"metadata":{},"sourceType":"module"}