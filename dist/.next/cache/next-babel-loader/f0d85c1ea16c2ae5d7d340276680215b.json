{"ast":null,"code":"import { APIRequest } from './api-request';\nimport { getGlobalConfig } from './config';\nexport class UserService extends APIRequest {\n  me(headers) {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload) {\n    return this.put('/users', payload);\n  }\n\n  getAvatarUploadUrl(userId) {\n    const config = getGlobalConfig();\n\n    if (userId) {\n      return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/${userId}/avatar/upload`;\n    }\n\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/avatar/upload`;\n  }\n\n  search(query) {\n    return this.get(this.buildUrl('/users/search', query));\n  }\n\n  findById(id) {\n    return this.get(`/users/view/${id}`);\n  }\n\n}\nexport const userService = new UserService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/user.service.ts"],"names":["APIRequest","getGlobalConfig","UserService","me","headers","get","updateMe","payload","put","getAvatarUploadUrl","userId","config","NEXT_PUBLIC_API_ENDPOINT","search","query","buildUrl","findById","id","userService"],"mappings":"AACA,SAASA,UAAT,QAAsC,eAAtC;AACA,SAASC,eAAT,QAAgC,UAAhC;AAEA,OAAO,MAAMC,WAAN,SAA0BF,UAA1B,CAAqC;AAC1CG,EAAAA,EAAE,CAACC,OAAD,EAAiE;AACjE,WAAO,KAAKC,GAAL,CAAS,WAAT,EAAsBD,OAAtB,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACC,OAAD,EAAe;AACrB,WAAO,KAAKC,GAAL,CAAS,QAAT,EAAmBD,OAAnB,CAAP;AACD;;AAEDE,EAAAA,kBAAkB,CAACC,MAAD,EAAkB;AAClC,UAAMC,MAAM,GAAGV,eAAe,EAA9B;;AACA,QAAIS,MAAJ,EAAY;AACV,aAAQ,GAAEC,MAAM,CAACC,wBAAyB,UAASF,MAAO,gBAA1D;AACD;;AACD,WAAQ,GAAEC,MAAM,CAACC,wBAAyB,sBAA1C;AACD;;AAEDC,EAAAA,MAAM,CAACC,KAAD,EAAiC;AACrC,WAAO,KAAKT,GAAL,CAAS,KAAKU,QAAL,CAAc,eAAd,EAA+BD,KAA/B,CAAT,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAACC,EAAD,EAAa;AACnB,WAAO,KAAKZ,GAAL,CAAU,eAAcY,EAAG,EAA3B,CAAP;AACD;;AAvByC;AA0B5C,OAAO,MAAMC,WAAW,GAAG,IAAIhB,WAAJ,EAApB","sourcesContent":["import { IUser } from 'src/interfaces';\nimport { APIRequest, IResponse } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class UserService extends APIRequest {\n  me(headers?: { [key: string]: string }): Promise<IResponse<IUser>> {\n    return this.get('/users/me', headers);\n  }\n\n  updateMe(payload: any) {\n    return this.put('/users', payload);\n  }\n\n  getAvatarUploadUrl(userId?: string) {\n    const config = getGlobalConfig();\n    if (userId) {\n      return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/${userId}/avatar/upload`;\n    }\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/users/avatar/upload`;\n  }\n\n  search(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/users/search', query));\n  }\n\n  findById(id: string) {\n    return this.get(`/users/view/${id}`);\n  }\n}\n\nexport const userService = new UserService();\n"]},"metadata":{},"sourceType":"module"}