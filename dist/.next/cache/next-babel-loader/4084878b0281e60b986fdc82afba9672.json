{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\programData\\\\React\\\\user\\\\src\\\\components\\\\auth\\\\register\\\\user-register-form.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createRef, useState } from 'react';\nimport { Form, Input, Button, DatePicker, Select, Alert, message } from 'antd';\nimport moment from 'moment';\nimport { getResponseError } from '@lib/utils';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport { utilsService } from '@services/index';\nimport Recaptcha from 'src/components/common/recaptcha';\n\n// const RegisterFrom = ({\n//   onFinish, submiting, countries, error, singularTextModel\n//   googleReCaptchaEnabled?: boolean;\n//   googleReCaptchaSiteKey?: string;\n// }\nvar RegisterFrom = function RegisterFrom(_ref) {\n  _s();\n\n  var submit = _ref.onFinish,\n      submiting = _ref.submiting,\n      countries = _ref.countries,\n      error = _ref.error,\n      singularTextModel = _ref.singularTextModel,\n      googleReCaptchaEnabled = _ref.googleReCaptchaEnabled,\n      googleReCaptchaSiteKey = _ref.googleReCaptchaSiteKey;\n  var reCAPTCHARef = /*#__PURE__*/createRef();\n\n  var _useState = useState(''),\n      reCAPTCHAError = _useState[0],\n      setreCAPTCHAError = _useState[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var onFinish = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n      var token, err;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n\n              if (!googleReCaptchaEnabled) {\n                _context.next = 10;\n                break;\n              }\n\n              token = reCAPTCHARef.current.getValue(); // const token = await reCAPTCHARef.current.executeAsync();\n\n              if (token) {\n                _context.next = 6;\n                break;\n              }\n\n              setreCAPTCHAError('Please verify that you are not a robot.');\n              return _context.abrupt(\"return\");\n\n            case 6:\n              reCAPTCHARef.current.reset();\n              setreCAPTCHAError('');\n              _context.next = 10;\n              return utilsService.verifyRecaptcha(token);\n\n            case 10:\n              submit(data);\n              _context.next = 20;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n\n              if (googleReCaptchaEnabled && reCAPTCHARef.current.getValue()) {\n                reCAPTCHARef.current.reset();\n              }\n\n              _context.next = 18;\n              return Promise.resolve(_context.t0);\n\n            case 18:\n              err = _context.sent;\n              message.error(getResponseError(err));\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 13]]);\n    }));\n\n    return function onFinish(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Form, {\n    layout: \"vertical\",\n    form: form,\n    onFinish: onFinish,\n    name: \"performerRegisterForm\",\n    initialValues: {\n      country: undefined\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, \"Member register\"), __jsx(Form.Item, {\n    name: \"dateOfBirth\",\n    rules: [{\n      required: true,\n      message: 'Please input your date of birth!'\n    }, {\n      validator: function validator(rule, value) {\n        if (!value) return Promise.resolve();\n        var years = moment().diff(value, 'years');\n\n        if (years >= 18) {\n          return Promise.resolve();\n        }\n\n        return Promise.reject(new Error('Minimum of 18 years'));\n      }\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, __jsx(DatePicker, {\n    placeholder: \"Date of Birth\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"gender\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    placeholder: \"Gender\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(Select.Option, {\n    value: \"male\",\n    key: \"male\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \"Male\"), __jsx(Select.Option, {\n    value: \"female\",\n    key: \"female\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Female\"), __jsx(Select.Option, {\n    value: \"transgender\",\n    key: \"transgender\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Transgender\"))), __jsx(Form.Item, {\n    name: \"firstName\",\n    rules: [{\n      required: true,\n      message: 'Please input your first name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your first name!'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"First Name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"lastName\",\n    rules: [{\n      required: true,\n      message: 'Please input your last name!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n      message: 'Alphanumeric'\n    }, {\n      whitespace: true,\n      message: 'Please input your last name!'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"Last Name\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"email\",\n    rules: [{\n      required: true,\n      message: 'Please input your E-mail!'\n    }, {\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"E-mail\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"phone\",\n    rules: [{\n      min: 9\n    }, {\n      max: 14\n    }, {\n      pattern: new RegExp(/^[0-9\\b\\\\+ ]+$/),\n      message: 'The phone number is not in the correct format'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"Phone Number\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"username\",\n    rules: [{\n      required: true,\n      message: 'Username is required!'\n    }, {\n      pattern: new RegExp('^[a-zA-Z0-9]*$'),\n      message: 'Dont allow special chars or space'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }, __jsx(Input, {\n    placeholder: \"Username\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"password\",\n    rules: [{\n      required: true,\n      message: 'Please input your password!'\n    }, {\n      min: 6,\n      max: 14,\n      message: 'Passoword should be 6-14 characters'\n    }],\n    hasFeedback: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, __jsx(Input.Password, {\n    placeholder: \"Password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"confirm\",\n    dependencies: ['password'],\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please confirm your password!'\n    }, function (_ref3) {\n      var getFieldValue = _ref3.getFieldValue;\n      return {\n        validator: function validator(rule, value) {\n          if (!value || getFieldValue('password') === value) {\n            return Promise.resolve();\n          }\n\n          return Promise.reject(new Error('The two passwords that you entered do not match!'));\n        }\n      };\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, __jsx(Input.Password, {\n    placeholder: \"Confirm Password\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    name: \"country\",\n    rules: [{\n      required: true,\n      message: 'Please input your country!'\n    }],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, __jsx(Select, {\n    showSearch: true,\n    placeholder: \"Country\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }\n  }, countries.length > 0 && countries.map(function (country) {\n    return __jsx(Select.Option, {\n      value: country.name,\n      key: country.code,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }\n    }, country.name);\n  }))), error && __jsx(Alert, {\n    description: getResponseError(error),\n    type: \"error\",\n    message: \"Error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }), __jsx(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }\n  }, __jsx(Recaptcha, {\n    ref: reCAPTCHARef,\n    googleReCaptchaEnabled: googleReCaptchaEnabled,\n    googleReCaptchaSiteKey: googleReCaptchaSiteKey,\n    error: reCAPTCHAError,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  })), __jsx(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: submiting,\n    disabled: submiting,\n    className: \"btn-submit\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  }, \"Register new account\")), __jsx(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 7\n    }\n  }, \"Are you member?\", ' ', __jsx(Link, {\n    href: \"/auth/login/user\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 11\n    }\n  }, \"Login\"))), __jsx(Form.Item, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 7\n    }\n  }, \"Are you\", ' ', singularTextModel || 'Performer', \"?\", ' ', __jsx(Link, {\n    href: \"/auth/register/model\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }\n  }, __jsx(\"a\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 11\n    }\n  }, \"Signup now\"))));\n};\n\n_s(RegisterFrom, \"ik+CKPQ1iYUNus7dTl3MWHHi3is=\", false, function () {\n  return [Form.useForm];\n});\n\n_c = RegisterFrom;\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread({}, state.ui);\n};\n\nvar mapDispatchs = {\n  updateUIValue: updateUIValue\n};\nRegisterFrom.defaultProps = {\n  googleReCaptchaEnabled: false,\n  googleReCaptchaSiteKey: ''\n};\nexport default connect(mapStateToProps, mapDispatchs)(RegisterFrom);\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterFrom\");","map":{"version":3,"sources":["E:/programData/React/user/src/components/auth/register/user-register-form.tsx"],"names":["React","createRef","useState","Form","Input","Button","DatePicker","Select","Alert","message","moment","getResponseError","Link","connect","updateUIValue","utilsService","Recaptcha","RegisterFrom","submit","onFinish","submiting","countries","error","singularTextModel","googleReCaptchaEnabled","googleReCaptchaSiteKey","reCAPTCHARef","reCAPTCHAError","setreCAPTCHAError","useForm","form","data","token","current","getValue","reset","verifyRecaptcha","Promise","resolve","err","country","undefined","required","validator","rule","value","years","diff","reject","Error","pattern","RegExp","whitespace","type","min","max","getFieldValue","length","map","name","code","mapStateToProps","state","ui","mapDispatchs","defaultProps"],"mappings":"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","sourcesContent":["import React, { createRef, useState } from 'react';\nimport {\n  Form, Input, Button, DatePicker, Select, Alert, message\n} from 'antd';\nimport moment from 'moment';\nimport { ICountries } from 'src/interfaces';\nimport { getResponseError } from '@lib/utils';\nimport Link from 'next/link';\nimport { connect } from 'react-redux';\nimport { updateUIValue } from 'src/redux/ui/actions';\nimport { utilsService } from '@services/index';\nimport { ReCAPTCHA } from 'react-google-recaptcha';\nimport Recaptcha from 'src/components/common/recaptcha';\n\ninterface IProps {\n  onFinish(value: any): Function;\n  submiting: boolean;\n  countries: ICountries[];\n  error: boolean;\n  singularTextModel: string;\n  googleReCaptchaEnabled?: boolean;\n  googleReCaptchaSiteKey?: string;\n}\n\n// const RegisterFrom = ({\n//   onFinish, submiting, countries, error, singularTextModel\n//   googleReCaptchaEnabled?: boolean;\n//   googleReCaptchaSiteKey?: string;\n// }\n\nconst RegisterFrom = ({\n  onFinish: submit,\n  submiting,\n  countries,\n  error,\n  singularTextModel,\n  googleReCaptchaEnabled,\n  googleReCaptchaSiteKey\n}: IProps) => {\n  const reCAPTCHARef = createRef<ReCAPTCHA>();\n  const [reCAPTCHAError, setreCAPTCHAError] = useState('');\n  const [form] = Form.useForm();\n  const onFinish = async (data) => {\n    try {\n      if (googleReCaptchaEnabled) {\n        const token = reCAPTCHARef.current.getValue();\n        // const token = await reCAPTCHARef.current.executeAsync();\n        if (!token) {\n          setreCAPTCHAError('Please verify that you are not a robot.');\n          return;\n        }\n\n        reCAPTCHARef.current.reset();\n        setreCAPTCHAError('');\n        await utilsService.verifyRecaptcha(token);\n      }\n\n      submit(data);\n    } catch (e) {\n      if (googleReCaptchaEnabled && reCAPTCHARef.current.getValue()) {\n        reCAPTCHARef.current.reset();\n      }\n\n      const err = await Promise.resolve(e);\n      message.error(getResponseError(err));\n    }\n  };\n  return (\n    <Form\n      layout=\"vertical\"\n      form={form}\n      onFinish={onFinish}\n      name=\"performerRegisterForm\"\n      initialValues={{ country: undefined }}\n    >\n      <h1>Member register</h1>\n      <Form.Item\n        name=\"dateOfBirth\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your date of birth!'\n          },\n          {\n            validator: (rule, value) => {\n              if (!value) return Promise.resolve();\n              const years = moment().diff(value, 'years');\n              if (years >= 18) {\n                return Promise.resolve();\n              }\n              return Promise.reject(new Error('Minimum of 18 years'));\n            }\n          }\n        ]}\n      >\n        <DatePicker placeholder=\"Date of Birth\" />\n      </Form.Item>\n      <Form.Item name=\"gender\">\n        <Select placeholder=\"Gender\">\n          <Select.Option value=\"male\" key=\"male\">\n            Male\n          </Select.Option>\n          <Select.Option value=\"female\" key=\"female\">\n            Female\n          </Select.Option>\n          <Select.Option value=\"transgender\" key=\"transgender\">\n            Transgender\n          </Select.Option>\n        </Select>\n      </Form.Item>\n      <Form.Item\n        name=\"firstName\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your first name!'\n          },\n          {\n            pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n            message: 'Alphanumeric'\n          },\n          {\n            whitespace: true,\n            message: 'Please input your first name!'\n          }\n        ]}\n      >\n        <Input placeholder=\"First Name\" />\n      </Form.Item>\n      <Form.Item\n        name=\"lastName\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your last name!'\n          },\n          {\n            pattern: new RegExp('^[a-zA-Z0-9 ]*$'),\n            message: 'Alphanumeric'\n          },\n          {\n            whitespace: true,\n            message: 'Please input your last name!'\n          }\n        ]}\n      >\n        <Input placeholder=\"Last Name\" />\n      </Form.Item>\n      <Form.Item\n        name=\"email\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your E-mail!'\n          },\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!'\n          }\n        ]}\n      >\n        <Input placeholder=\"E-mail\" />\n      </Form.Item>\n      <Form.Item\n        name=\"phone\"\n        rules={[\n          { min: 9 },\n          { max: 14 },\n          {\n            pattern: new RegExp(/^[0-9\\b\\\\+ ]+$/),\n            message: 'The phone number is not in the correct format'\n          }\n        ]}\n      >\n        <Input placeholder=\"Phone Number\" />\n      </Form.Item>\n      <Form.Item\n        name=\"username\"\n        rules={[\n          {\n            required: true,\n            message: 'Username is required!'\n          },\n          {\n            pattern: new RegExp('^[a-zA-Z0-9]*$'),\n            message: 'Dont allow special chars or space'\n          }\n        ]}\n      >\n        <Input placeholder=\"Username\" />\n      </Form.Item>\n      <Form.Item\n        name=\"password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!'\n          },\n          {\n            min: 6,\n            max: 14,\n            message: 'Passoword should be 6-14 characters'\n          }\n        ]}\n        hasFeedback\n      >\n        <Input.Password placeholder=\"Password\" />\n      </Form.Item>\n      <Form.Item\n        name=\"confirm\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!'\n          },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n\n              return Promise.reject(\n                new Error('The two passwords that you entered do not match!')\n              );\n            }\n          })\n        ]}\n      >\n        <Input.Password placeholder=\"Confirm Password\" />\n      </Form.Item>\n      <Form.Item\n        name=\"country\"\n        rules={[{ required: true, message: 'Please input your country!' }]}\n      >\n        <Select showSearch placeholder=\"Country\">\n          {countries.length > 0\n            && countries.map((country) => (\n              <Select.Option value={country.name} key={country.code}>\n                {country.name}\n              </Select.Option>\n            ))}\n        </Select>\n      </Form.Item>\n      {error && (\n        <Alert\n          description={getResponseError(error)}\n          type=\"error\"\n          message=\"Error\"\n        />\n      )}\n      <Form.Item>\n        <Recaptcha\n          ref={reCAPTCHARef}\n          googleReCaptchaEnabled={googleReCaptchaEnabled}\n          googleReCaptchaSiteKey={googleReCaptchaSiteKey}\n          error={reCAPTCHAError}\n        />\n      </Form.Item>\n      <Form.Item>\n        <Button\n          type=\"primary\"\n          htmlType=\"submit\"\n          loading={submiting}\n          disabled={submiting}\n          className=\"btn-submit\"\n        >\n          Register new account\n        </Button>\n      </Form.Item>\n      <Form.Item>\n        Are you member?\n        {' '}\n        <Link href=\"/auth/login/user\">\n          <a>Login</a>\n        </Link>\n      </Form.Item>\n      <Form.Item>\n        Are you\n        {' '}\n        {singularTextModel || 'Performer'}\n        ?\n        {' '}\n        <Link href=\"/auth/register/model\">\n          <a>Signup now</a>\n        </Link>\n      </Form.Item>\n    </Form>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  ...state.ui\n});\nconst mapDispatchs = { updateUIValue };\nRegisterFrom.defaultProps = {\n  googleReCaptchaEnabled: false,\n  googleReCaptchaSiteKey: ''\n};\nexport default connect(mapStateToProps, mapDispatchs)(RegisterFrom);\n"]},"metadata":{},"sourceType":"module"}