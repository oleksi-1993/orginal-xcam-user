{"ast":null,"code":"import { isUrl } from '@lib/string';\nimport { omit } from 'lodash';\nimport cookie from 'js-cookie';\nimport { APIRequest, TOKEN } from './api-request';\nimport { getGlobalConfig } from './config';\nexport class PerformerService extends APIRequest {\n  me(headers) {\n    return this.get('/performers/me', headers);\n  }\n\n  updateMe(payload) {\n    return this.put('/performers', payload);\n  }\n\n  search(query) {\n    return this.get(this.buildUrl('/performers/search', query));\n  }\n\n  details(username, headers = {}) {\n    return this.get(`/performers/${username}/view`, headers);\n  }\n\n  getAvatarUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/avatar/upload`;\n  }\n\n  getDocumentsUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/documents/upload`;\n  }\n\n  getReleaseFormUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/release-form/upload`;\n  }\n\n  myProduct(query) {\n    return this.get(this.buildUrl('/performer/performer-assets/products/search', query));\n  }\n\n  createProduct(url, data, options = {\n    onProgress() {}\n\n  }) {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.image) {\n        const image = data.image.file.originFileObj;\n        formData.append('image', image, image.name);\n      }\n\n      if (data.digitalFile) {\n        const digitalFile = data.digitalFile.file.originFileObj;\n        formData.append('digitalFile', digitalFile, digitalFile.name);\n      }\n\n      Object.keys(omit(data, ['image', 'digitalFile'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  updateProduct(url, data, options = {\n    onProgress() {}\n\n  }) {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n      req.upload.addEventListener('progress', event => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: event.loaded / event.total * 100\n          });\n        }\n      });\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const {\n          response\n        } = req;\n\n        if (!success) {\n          return reject(response);\n        }\n\n        return resolve(response);\n      });\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n      const formData = new FormData(); // formData.append('file', file, file.name);\n\n      if (data.image && data.image.file) {\n        const image = data.image.file.originFileObj;\n        formData.append('image', image, image.name);\n      }\n\n      if (data.digitalFile && data.digitalFile.file) {\n        const digitalFile = data.digitalFile.file.originFileObj;\n        formData.append('digitalFile', digitalFile, digitalFile.name);\n      }\n\n      Object.keys(omit(data, ['image', 'digitalFile'])).forEach(v => {\n        formData.append(v, data[v]);\n      });\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n      const token = cookie.get(TOKEN);\n\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n\n      req.send(formData);\n    });\n  }\n\n  removeProduct(id) {\n    return this.del(`/performer/performer-assets/products/${id}`);\n  }\n\n  getCommission() {\n    return this.get('/settings/performer/commission');\n  }\n\n  updatePaymentInfo(payload) {\n    return this.post('/performers/bank-transfer/update', payload);\n  }\n\n  updateDirectDepost(payload) {\n    return this.post('/performers/direct-deposit/update', payload);\n  }\n\n  updatePaxum(payload) {\n    return this.post('/performers/paxum/update', payload);\n  }\n\n  updateBitpay(payload) {\n    return this.post('/performers/bitpay/update', payload);\n  }\n\n  updateStreamingStatus(payload) {\n    return this.post('/performers/streaming-status/update', payload);\n  }\n\n  geoBlock(payload) {\n    return this.post('/performers/blocking/update', payload);\n  }\n\n  getBlockedList() {\n    return this.get(this.buildUrl('/performers/blocking'));\n  }\n\n  increaseView(performerId) {\n    return this.post(`/performers/${performerId}/inc-view`);\n  }\n\n  updateDefaultPrice(payload) {\n    return this.post('/performers/default-price/update', payload);\n  }\n\n  updateBroadcastSetting(payload) {\n    return this.post('/performers/broadcast-setting/update', payload);\n  }\n\n  suspendAccount(password) {\n    return this.post('/performers/suspend-account', {\n      password\n    });\n  }\n\n  checkBlock(performerId) {\n    return this.get(`/performers/${performerId}/check-blocking`);\n  }\n\n}\nexport const GENNDER_PERFORMER = ['female', 'transgender', 'male'];\nexport const performerService = new PerformerService();","map":{"version":3,"sources":["E:/programData/React/user/src/services/perfomer.service.ts"],"names":["isUrl","omit","cookie","APIRequest","TOKEN","getGlobalConfig","PerformerService","me","headers","get","updateMe","payload","put","search","query","buildUrl","details","username","getAvatarUploadUrl","config","NEXT_PUBLIC_API_ENDPOINT","getDocumentsUploadUrl","getReleaseFormUrl","myProduct","createProduct","url","data","options","onProgress","Promise","resolve","reject","req","XMLHttpRequest","upload","addEventListener","event","lengthComputable","percentage","loaded","total","success","status","response","formData","FormData","image","file","originFileObj","append","name","digitalFile","Object","keys","forEach","v","responseType","open","token","setRequestHeader","send","updateProduct","removeProduct","id","del","getCommission","updatePaymentInfo","post","updateDirectDepost","updatePaxum","updateBitpay","updateStreamingStatus","geoBlock","getBlockedList","increaseView","performerId","updateDefaultPrice","updateBroadcastSetting","suspendAccount","password","checkBlock","GENNDER_PERFORMER","performerService"],"mappings":"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","sourcesContent":["import {\n  IPerformer,\n  ICreatePerformerProductPayload,\n  IUpdatePerformerProductPayload\n} from 'src/interfaces';\nimport { isUrl } from '@lib/string';\nimport { omit } from 'lodash';\nimport cookie from 'js-cookie';\n\nimport { APIRequest, IResponse, TOKEN } from './api-request';\nimport { getGlobalConfig } from './config';\n\nexport class PerformerService extends APIRequest {\n  me(headers?: { [key: string]: string }): Promise<IResponse<IPerformer>> {\n    return this.get('/performers/me', headers);\n  }\n\n  updateMe(payload: any) {\n    return this.put('/performers', payload);\n  }\n\n  search(query?: { [key: string]: any }) {\n    return this.get(this.buildUrl('/performers/search', query));\n  }\n\n  details(username: string, headers = {}): Promise<IResponse<IPerformer>> {\n    return this.get(`/performers/${username}/view`, headers);\n  }\n\n  getAvatarUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/avatar/upload`;\n  }\n\n  getDocumentsUploadUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/documents/upload`;\n  }\n\n  getReleaseFormUrl() {\n    const config = getGlobalConfig();\n    return `${config.NEXT_PUBLIC_API_ENDPOINT}/performers/release-form/upload`;\n  }\n\n  myProduct(query?: { [key: string]: any }) {\n    return this.get(\n      this.buildUrl('/performer/performer-assets/products/search', query)\n    );\n  }\n\n  createProduct(\n    url: string,\n    data: ICreatePerformerProductPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.image) {\n        const image = data.image.file.originFileObj;\n        formData.append('image', image, image.name);\n      }\n\n      if (data.digitalFile) {\n        const digitalFile = data.digitalFile.file.originFileObj;\n        formData.append('digitalFile', digitalFile, digitalFile.name);\n      }\n\n      Object.keys(omit(data, ['image', 'digitalFile'])).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('POST', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  updateProduct(\n    url: string,\n    data: IUpdatePerformerProductPayload,\n    options: { onProgress: Function } = {\n      onProgress() {}\n    }\n  ): Promise<IResponse<any>> {\n    const config = getGlobalConfig();\n    return new Promise((resolve, reject) => {\n      const req = new XMLHttpRequest();\n\n      req.upload.addEventListener('progress', (event) => {\n        if (event.lengthComputable) {\n          options.onProgress({\n            percentage: (event.loaded / event.total) * 100\n          });\n        }\n      });\n\n      req.addEventListener('load', () => {\n        const success = req.status >= 200 && req.status < 300;\n        const { response } = req;\n        if (!success) {\n          return reject(response);\n        }\n        return resolve(response);\n      });\n\n      req.upload.addEventListener('error', () => {\n        reject(req.response);\n      });\n\n      const formData = new FormData();\n      // formData.append('file', file, file.name);\n      if (data.image && data.image.file) {\n        const image = data.image.file.originFileObj;\n        formData.append('image', image, image.name);\n      }\n\n      if (data.digitalFile && data.digitalFile.file) {\n        const digitalFile = data.digitalFile.file.originFileObj;\n        formData.append('digitalFile', digitalFile, digitalFile.name);\n      }\n\n      Object.keys(omit(data, ['image', 'digitalFile'])).forEach((v) => {\n        formData.append(v, data[v]);\n      });\n\n      req.responseType = 'json';\n      req.open('PUT', isUrl(url) ? url : `${config.NEXT_PUBLIC_API_ENDPOINT}${url}`);\n\n      const token: any = cookie.get(TOKEN);\n      if (token) {\n        req.setRequestHeader('Authorization', token);\n      }\n      req.send(formData);\n    });\n  }\n\n  removeProduct(id: string) {\n    return this.del(`/performer/performer-assets/products/${id}`);\n  }\n\n  getCommission() {\n    return this.get('/settings/performer/commission');\n  }\n\n  updatePaymentInfo(payload): Promise<IResponse<IPerformer>> {\n    return this.post('/performers/bank-transfer/update', payload);\n  }\n\n  updateDirectDepost(payload): Promise<IResponse<IPerformer>> {\n    return this.post('/performers/direct-deposit/update', payload);\n  }\n\n  updatePaxum(payload): Promise<IResponse<IPerformer>> {\n    return this.post('/performers/paxum/update', payload);\n  }\n\n  updateBitpay(payload): Promise<IResponse<IPerformer>> {\n    return this.post('/performers/bitpay/update', payload);\n  }\n\n  updateStreamingStatus(payload: {\n    status: string;\n  }): Promise<IResponse<IPerformer>> {\n    return this.post('/performers/streaming-status/update', payload);\n  }\n\n  geoBlock(payload: {userIds?: string[], countries?: string[]}): Promise<IResponse<any>> {\n    return this.post('/performers/blocking/update', payload);\n  }\n\n  getBlockedList(): Promise<IResponse<any>> {\n    return this.get(this.buildUrl('/performers/blocking'));\n  }\n\n  increaseView(performerId) {\n    return this.post(`/performers/${performerId}/inc-view`);\n  }\n\n  updateDefaultPrice(payload): Promise<IResponse<IPerformer>> {\n    return this.post('/performers/default-price/update', payload);\n  }\n\n  updateBroadcastSetting(payload): Promise<IResponse<any>> {\n    return this.post('/performers/broadcast-setting/update', payload);\n  }\n\n  suspendAccount(password: string) {\n    return this.post('/performers/suspend-account', { password });\n  }\n\n  checkBlock(performerId: string) {\n    return this.get(`/performers/${performerId}/check-blocking`);\n  }\n}\n\nexport const GENNDER_PERFORMER = ['female', 'transgender', 'male'];\n\nexport const performerService = new PerformerService();\n"]},"metadata":{},"sourceType":"module"}