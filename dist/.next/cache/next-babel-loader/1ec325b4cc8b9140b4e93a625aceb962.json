{"ast":null,"code":"/* eslint-disable no-console */\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { message } from 'antd';\nimport { getStreamConversation, getStreamConversationSuccess, fetchingStreamMessage, loadMoreStreamMessages, loadMoreStreamMessagesSuccess, loadStreamMessages, loadStreamMessagesSuccess, sendStreamMessage, sendStreamMessageSuccess, deleteMessage, deleteMessageSuccess } from './actions';\nconst streamMessageSagas = [{\n  on: getStreamConversation,\n\n  *worker(data) {\n    try {\n      const {\n        conversation\n      } = data.payload;\n      const {\n        type\n      } = conversation;\n      const resp = type === 'stream_public' ? yield messageService.findPublicConversationPerformer(conversation.performerId) : yield messageService.getConversationByStreamId(conversation.streamId);\n\n      if (resp && resp.data) {\n        yield put(getStreamConversationSuccess({\n          data: resp.data\n        }));\n        yield put(loadStreamMessages({\n          conversationId: resp.data._id,\n          limit: 25,\n          offset: 0,\n          type\n        }));\n      }\n    } catch (e) {\n      // load error\n      console.log('err-get-conversation', e);\n    }\n  }\n\n}, {\n  on: loadStreamMessages,\n\n  *worker(data) {\n    try {\n      const {\n        conversationId,\n        offset,\n        limit,\n        type\n      } = data.payload;\n      yield put(fetchingStreamMessage({\n        conversationId\n      }));\n      const resp = type === 'stream_public' ? yield messageService.getPublicMessages(conversationId, {\n        sort: 'desc',\n        offset,\n        limit\n      }) : yield messageService.getMessages(conversationId, {\n        sort: 'desc',\n        offset,\n        limit\n      });\n      yield put(loadStreamMessagesSuccess({\n        conversationId,\n        items: resp.data.data,\n        total: resp.data.total\n      }));\n    } catch (e) {\n      // load error\n      console.log('err', e);\n    }\n  }\n\n}, {\n  on: loadMoreStreamMessages,\n\n  *worker(data) {\n    try {\n      const messageMap = select(state => state.streamMessage.messages);\n      const {\n        conversationId,\n        offset,\n        limit,\n        type\n      } = data.payload;\n\n      if (messageMap && messageMap.fetching) {\n        return;\n      }\n\n      yield put(fetchingStreamMessage({\n        conversationId\n      }));\n      const resp = type === 'stream_public' ? yield messageService.getPublicMessages(conversationId, {\n        sort: 'desc',\n        offset,\n        limit\n      }) : yield messageService.getMessages(conversationId, {\n        sort: 'desc',\n        offset,\n        limit\n      });\n      yield put(loadMoreStreamMessagesSuccess({\n        conversationId,\n        items: resp.data.data,\n        total: resp.data.total\n      }));\n    } catch (e) {\n      // load error\n      message.error('Error occured, please try again later');\n      console.log('err', e);\n    }\n  }\n\n}, {\n  on: sendStreamMessage,\n\n  *worker(req) {\n    try {\n      const {\n        conversationId,\n        data,\n        type\n      } = req.payload;\n      const resp = type === 'stream_public' ? yield messageService.sendPublicStreamMessage(conversationId, data) : yield messageService.sendStreamMessage(conversationId, data);\n      yield put(sendStreamMessageSuccess(resp.data));\n    } catch (e) {\n      yield put(sendStreamMessageSuccess(e));\n    }\n  }\n\n}, {\n  on: deleteMessage,\n\n  *worker(req) {\n    try {\n      const {\n        messageId\n      } = req.payload;\n      const resp = yield messageService.deleteMessage(messageId);\n      yield put(deleteMessageSuccess(resp.data));\n    } catch (e) {\n      yield put(deleteMessageSuccess(e));\n    }\n  }\n\n}];\nexport default flatten([createSagas(streamMessageSagas)]);","map":{"version":3,"sources":["E:/programData/React/user/src/redux/stream-chat/sagas.ts"],"names":["flatten","put","select","createSagas","messageService","message","getStreamConversation","getStreamConversationSuccess","fetchingStreamMessage","loadMoreStreamMessages","loadMoreStreamMessagesSuccess","loadStreamMessages","loadStreamMessagesSuccess","sendStreamMessage","sendStreamMessageSuccess","deleteMessage","deleteMessageSuccess","streamMessageSagas","on","worker","data","conversation","payload","type","resp","findPublicConversationPerformer","performerId","getConversationByStreamId","streamId","conversationId","_id","limit","offset","e","console","log","getPublicMessages","sort","getMessages","items","total","messageMap","state","streamMessage","messages","fetching","error","req","sendPublicStreamMessage","messageId"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport { flatten } from 'lodash';\nimport { put, select } from 'redux-saga/effects';\nimport { createSagas } from '@lib/redux';\nimport { messageService } from '@services/message.service';\nimport { IReduxAction } from 'src/interfaces';\nimport { message } from 'antd';\nimport {\n  getStreamConversation,\n  getStreamConversationSuccess,\n  fetchingStreamMessage,\n  loadMoreStreamMessages,\n  loadMoreStreamMessagesSuccess,\n  loadStreamMessages,\n  loadStreamMessagesSuccess,\n  sendStreamMessage,\n  sendStreamMessageSuccess,\n  deleteMessage,\n  deleteMessageSuccess\n} from './actions';\n\nconst streamMessageSagas = [\n  {\n    on: getStreamConversation,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const { conversation } = data.payload;\n        const { type } = conversation;\n        const resp = type === 'stream_public'\n          ? yield messageService.findPublicConversationPerformer(\n            conversation.performerId\n          )\n          : yield messageService.getConversationByStreamId(\n            conversation.streamId\n          );\n        if (resp && resp.data) {\n          yield put(getStreamConversationSuccess({ data: resp.data }));\n          yield put(\n            loadStreamMessages({\n              conversationId: resp.data._id,\n              limit: 25,\n              offset: 0,\n              type\n            })\n          );\n        }\n      } catch (e) {\n        // load error\n        console.log('err-get-conversation', e);\n      }\n    }\n  },\n  {\n    on: loadStreamMessages,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const {\n          conversationId, offset, limit, type\n        } = data.payload;\n        yield put(fetchingStreamMessage({ conversationId }));\n        const resp = type === 'stream_public'\n          ? yield messageService.getPublicMessages(conversationId, {\n            sort: 'desc',\n            offset,\n            limit\n          })\n          : yield messageService.getMessages(conversationId, {\n            sort: 'desc',\n            offset,\n            limit\n          });\n        yield put(\n          loadStreamMessagesSuccess({\n            conversationId,\n            items: resp.data.data,\n            total: resp.data.total\n          })\n        );\n      } catch (e) {\n        // load error\n        console.log('err', e);\n      }\n    }\n  },\n  {\n    on: loadMoreStreamMessages,\n    * worker(data: IReduxAction<Record<string, any>>) {\n      try {\n        const messageMap = select(\n          (state) => state.streamMessage.messages\n        ) as any;\n        const {\n          conversationId, offset, limit, type\n        } = data.payload;\n        if (messageMap && messageMap.fetching) {\n          return;\n        }\n\n        yield put(fetchingStreamMessage({ conversationId }));\n        const resp = type === 'stream_public'\n          ? yield messageService.getPublicMessages(conversationId, {\n            sort: 'desc',\n            offset,\n            limit\n          })\n          : yield messageService.getMessages(conversationId, {\n            sort: 'desc',\n            offset,\n            limit\n          });\n        yield put(\n          loadMoreStreamMessagesSuccess({\n            conversationId,\n            items: resp.data.data,\n            total: resp.data.total\n          })\n        );\n      } catch (e) {\n        // load error\n        message.error('Error occured, please try again later');\n        console.log('err', e);\n      }\n    }\n  },\n  {\n    on: sendStreamMessage,\n    * worker(req: IReduxAction<any>) {\n      try {\n        const { conversationId, data, type } = req.payload;\n        const resp = type === 'stream_public'\n          ? yield messageService.sendPublicStreamMessage(conversationId, data)\n          : yield messageService.sendStreamMessage(conversationId, data);\n\n        yield put(sendStreamMessageSuccess(resp.data));\n      } catch (e) {\n        yield put(sendStreamMessageSuccess(e));\n      }\n    }\n  },\n  {\n    on: deleteMessage,\n    * worker(req: IReduxAction<any>) {\n      try {\n        const { messageId } = req.payload;\n        const resp = yield messageService.deleteMessage(messageId);\n        yield put(deleteMessageSuccess(resp.data));\n      } catch (e) {\n        yield put(deleteMessageSuccess(e));\n      }\n    }\n  }\n];\n\nexport default flatten([createSagas(streamMessageSagas)]);\n"]},"metadata":{},"sourceType":"module"}